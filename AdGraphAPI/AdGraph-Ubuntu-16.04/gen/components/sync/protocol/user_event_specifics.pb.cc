// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_event_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_event_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class UserEventSpecifics_TestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_Test> {
} _UserEventSpecifics_Test_default_instance_;
class UserEventSpecifics_FieldTrialDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_FieldTrial> {
} _UserEventSpecifics_FieldTrial_default_instance_;
class UserEventSpecifics_LanguageDetection_LanguageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_LanguageDetection_Language> {
} _UserEventSpecifics_LanguageDetection_Language_default_instance_;
class UserEventSpecifics_LanguageDetectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_LanguageDetection> {
} _UserEventSpecifics_LanguageDetection_default_instance_;
class UserEventSpecifics_TranslationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_Translation> {
} _UserEventSpecifics_Translation_default_instance_;
class UserEventSpecifics_UserConsentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_UserConsent> {
  public:
  const ::sync_pb::UserConsentTypes_SyncConsent* sync_consent_;
  const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent_;
  const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent_;
  const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent_;
  const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent_;
} _UserEventSpecifics_UserConsent_default_instance_;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus> {
} _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetectedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected> {
} _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_default_instance_;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup> {
} _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_default_instance_;
class UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteractionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction> {
} _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_;
class UserEventSpecifics_GaiaPasswordReuseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics_GaiaPasswordReuse> {
} _UserEventSpecifics_GaiaPasswordReuse_default_instance_;
class UserEventSpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserEventSpecifics> {
  public:
  const ::sync_pb::UserEventSpecifics_Test* test_event_;
  const ::sync_pb::UserEventSpecifics_FieldTrial* field_trial_event_;
  const ::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event_;
  const ::sync_pb::UserEventSpecifics_Translation* translation_event_;
  const ::sync_pb::UserEventSpecifics_UserConsent* user_consent_;
  const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse* gaia_password_reuse_event_;
} _UserEventSpecifics_default_instance_;

namespace protobuf_user_5fevent_5fspecifics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _UserEventSpecifics_Test_default_instance_.Shutdown();
  _UserEventSpecifics_FieldTrial_default_instance_.Shutdown();
  _UserEventSpecifics_LanguageDetection_Language_default_instance_.Shutdown();
  _UserEventSpecifics_LanguageDetection_default_instance_.Shutdown();
  _UserEventSpecifics_Translation_default_instance_.Shutdown();
  _UserEventSpecifics_UserConsent_default_instance_.Shutdown();
  _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_.Shutdown();
  _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_default_instance_.Shutdown();
  _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_default_instance_.Shutdown();
  _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_.Shutdown();
  _UserEventSpecifics_GaiaPasswordReuse_default_instance_.Shutdown();
  _UserEventSpecifics_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sync_pb::protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  _UserEventSpecifics_Test_default_instance_.DefaultConstruct();
  _UserEventSpecifics_FieldTrial_default_instance_.DefaultConstruct();
  _UserEventSpecifics_LanguageDetection_Language_default_instance_.DefaultConstruct();
  _UserEventSpecifics_LanguageDetection_default_instance_.DefaultConstruct();
  _UserEventSpecifics_Translation_default_instance_.DefaultConstruct();
  _UserEventSpecifics_UserConsent_default_instance_.DefaultConstruct();
  _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_default_instance_.DefaultConstruct();
  _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_default_instance_.DefaultConstruct();
  _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_default_instance_.DefaultConstruct();
  _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_default_instance_.DefaultConstruct();
  _UserEventSpecifics_GaiaPasswordReuse_default_instance_.DefaultConstruct();
  _UserEventSpecifics_default_instance_.DefaultConstruct();
  _UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_default_instance_.get_mutable()->status_ = const_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus*>(
      ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::internal_default_instance());
  _UserEventSpecifics_GaiaPasswordReuse_default_instance_.get_mutable()->reuse_detected_ = const_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected*>(
      ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::internal_default_instance());
  _UserEventSpecifics_GaiaPasswordReuse_default_instance_.get_mutable()->reuse_lookup_ = const_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup*>(
      ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::internal_default_instance());
  _UserEventSpecifics_GaiaPasswordReuse_default_instance_.get_mutable()->dialog_interaction_ = const_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction*>(
      ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::sync_pb::protobuf_user_5fconsent_5ftypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_user_5fevent_5fspecifics_2eproto

bool UserEventSpecifics_Translation_Interaction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::UNKNOWN;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::ACCEPT;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::DECLINE;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::IGNORED;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::DISMISSED;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::MANUAL;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::TRANSLATION_REVERTED;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::AUTO_TRANSLATION_BY_PREF;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::AUTO_TRANSLATION_BY_LINK;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::INITIALIZATION_ERROR;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::Interaction_MIN;
const UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::Interaction_MAX;
const int UserEventSpecifics_Translation::Interaction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool UserEventSpecifics_UserConsent_Feature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::FEATURE_UNSPECIFIED;
const UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::CHROME_SYNC;
const UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::PLAY_STORE;
const UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::BACKUP_AND_RESTORE;
const UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::GOOGLE_LOCATION_SERVICE;
const UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::Feature_MIN;
const UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::Feature_MAX;
const int UserEventSpecifics_UserConsent::Feature_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::REPORTING_POPULATION_UNSPECIFIED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::NONE;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::EXTENDED_REPORTING;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SCOUT;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::ReportingPopulation_MIN;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::ReportingPopulation_MAX;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::ReportingPopulation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::UNSPECIFIED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::WHITELIST_HIT;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::CACHE_HIT;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::REQUEST_SUCCESS;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::REQUEST_FAILURE;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::URL_UNSUPPORTED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::ENTERPRISE_WHITELIST_HIT;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::TURNED_OFF_BY_POLICY;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::LookupResult_MIN;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::LookupResult_MAX;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::LookupResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::VERDICT_UNSPECIFIED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::SAFE;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::LOW_REPUTATION;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::PHISHING;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::ReputationVerdict_MIN;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::ReputationVerdict_MAX;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::ReputationVerdict_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::UNSPECIFIED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::WARNING_ACTION_TAKEN;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::WARNING_ACTION_IGNORED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::WARNING_UI_IGNORED;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::InteractionResult_MIN;
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::InteractionResult_MAX;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::InteractionResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_Test::UserEventSpecifics_Test()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.Test)
}
UserEventSpecifics_Test::UserEventSpecifics_Test(const UserEventSpecifics_Test& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.Test)
}

void UserEventSpecifics_Test::SharedCtor() {
  _cached_size_ = 0;
}

UserEventSpecifics_Test::~UserEventSpecifics_Test() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.Test)
  SharedDtor();
}

void UserEventSpecifics_Test::SharedDtor() {
}

void UserEventSpecifics_Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_Test& UserEventSpecifics_Test::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_Test* UserEventSpecifics_Test::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_Test* n = new UserEventSpecifics_Test;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_Test::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.Test)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.Test)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.Test)
  return false;
#undef DO_
}

void UserEventSpecifics_Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.Test)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.Test)
}

size_t UserEventSpecifics_Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.Test)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_Test::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_Test*>(&from));
}

void UserEventSpecifics_Test::MergeFrom(const UserEventSpecifics_Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserEventSpecifics_Test::CopyFrom(const UserEventSpecifics_Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_Test::IsInitialized() const {
  return true;
}

void UserEventSpecifics_Test::Swap(UserEventSpecifics_Test* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_Test::InternalSwap(UserEventSpecifics_Test* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_Test::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.Test";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_Test

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_FieldTrial::kVariationIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_FieldTrial::UserEventSpecifics_FieldTrial()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.FieldTrial)
}
UserEventSpecifics_FieldTrial::UserEventSpecifics_FieldTrial(const UserEventSpecifics_FieldTrial& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      variation_ids_(from.variation_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.FieldTrial)
}

void UserEventSpecifics_FieldTrial::SharedCtor() {
  _cached_size_ = 0;
}

UserEventSpecifics_FieldTrial::~UserEventSpecifics_FieldTrial() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.FieldTrial)
  SharedDtor();
}

void UserEventSpecifics_FieldTrial::SharedDtor() {
}

void UserEventSpecifics_FieldTrial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_FieldTrial& UserEventSpecifics_FieldTrial::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_FieldTrial* UserEventSpecifics_FieldTrial::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_FieldTrial* n = new UserEventSpecifics_FieldTrial;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_FieldTrial::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.FieldTrial)
  variation_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_FieldTrial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.FieldTrial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 variation_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13u, input, this->mutable_variation_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_variation_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.FieldTrial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.FieldTrial)
  return false;
#undef DO_
}

void UserEventSpecifics_FieldTrial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.FieldTrial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 variation_ids = 1;
  for (int i = 0, n = this->variation_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->variation_ids(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.FieldTrial)
}

size_t UserEventSpecifics_FieldTrial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.FieldTrial)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated fixed32 variation_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->variation_ids_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->variation_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_FieldTrial::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_FieldTrial*>(&from));
}

void UserEventSpecifics_FieldTrial::MergeFrom(const UserEventSpecifics_FieldTrial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.FieldTrial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variation_ids_.MergeFrom(from.variation_ids_);
}

void UserEventSpecifics_FieldTrial::CopyFrom(const UserEventSpecifics_FieldTrial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.FieldTrial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_FieldTrial::IsInitialized() const {
  return true;
}

void UserEventSpecifics_FieldTrial::Swap(UserEventSpecifics_FieldTrial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_FieldTrial::InternalSwap(UserEventSpecifics_FieldTrial* other) {
  variation_ids_.InternalSwap(&other->variation_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_FieldTrial::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.FieldTrial";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_FieldTrial

// repeated fixed32 variation_ids = 1;
int UserEventSpecifics_FieldTrial::variation_ids_size() const {
  return variation_ids_.size();
}
void UserEventSpecifics_FieldTrial::clear_variation_ids() {
  variation_ids_.Clear();
}
::google::protobuf::uint32 UserEventSpecifics_FieldTrial::variation_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
  return variation_ids_.Get(index);
}
void UserEventSpecifics_FieldTrial::set_variation_ids(int index, ::google::protobuf::uint32 value) {
  variation_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
}
void UserEventSpecifics_FieldTrial::add_variation_ids(::google::protobuf::uint32 value) {
  variation_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserEventSpecifics_FieldTrial::variation_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
  return variation_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserEventSpecifics_FieldTrial::mutable_variation_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.FieldTrial.variation_ids)
  return &variation_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_LanguageDetection_Language::kLanguageCodeFieldNumber;
const int UserEventSpecifics_LanguageDetection_Language::kIsReliableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_LanguageDetection_Language::UserEventSpecifics_LanguageDetection_Language()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.LanguageDetection.Language)
}
UserEventSpecifics_LanguageDetection_Language::UserEventSpecifics_LanguageDetection_Language(const UserEventSpecifics_LanguageDetection_Language& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language_code()) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  is_reliable_ = from.is_reliable_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.LanguageDetection.Language)
}

void UserEventSpecifics_LanguageDetection_Language::SharedCtor() {
  _cached_size_ = 0;
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_reliable_ = false;
}

UserEventSpecifics_LanguageDetection_Language::~UserEventSpecifics_LanguageDetection_Language() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  SharedDtor();
}

void UserEventSpecifics_LanguageDetection_Language::SharedDtor() {
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserEventSpecifics_LanguageDetection_Language::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_LanguageDetection_Language& UserEventSpecifics_LanguageDetection_Language::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection_Language::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_LanguageDetection_Language* n = new UserEventSpecifics_LanguageDetection_Language;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_LanguageDetection_Language::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  if (has_language_code()) {
    GOOGLE_DCHECK(!language_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*language_code_.UnsafeRawStringPointer())->clear();
  }
  is_reliable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_LanguageDetection_Language::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string language_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_reliable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_reliable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reliable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  return false;
#undef DO_
}

void UserEventSpecifics_LanguageDetection_Language::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // optional bool is_reliable = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_reliable(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.LanguageDetection.Language)
}

size_t UserEventSpecifics_LanguageDetection_Language::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string language_code = 1;
    if (has_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

    // optional bool is_reliable = 2;
    if (has_is_reliable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_LanguageDetection_Language::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_LanguageDetection_Language*>(&from));
}

void UserEventSpecifics_LanguageDetection_Language::MergeFrom(const UserEventSpecifics_LanguageDetection_Language& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_language_code();
      language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_reliable_ = from.is_reliable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserEventSpecifics_LanguageDetection_Language::CopyFrom(const UserEventSpecifics_LanguageDetection_Language& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.LanguageDetection.Language)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_LanguageDetection_Language::IsInitialized() const {
  return true;
}

void UserEventSpecifics_LanguageDetection_Language::Swap(UserEventSpecifics_LanguageDetection_Language* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_LanguageDetection_Language::InternalSwap(UserEventSpecifics_LanguageDetection_Language* other) {
  language_code_.Swap(&other->language_code_);
  std::swap(is_reliable_, other->is_reliable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_LanguageDetection_Language::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.LanguageDetection.Language";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_LanguageDetection_Language

// optional string language_code = 1;
bool UserEventSpecifics_LanguageDetection_Language::has_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics_LanguageDetection_Language::set_has_language_code() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics_LanguageDetection_Language::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics_LanguageDetection_Language::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language_code();
}
const ::std::string& UserEventSpecifics_LanguageDetection_Language::language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  return language_code_.GetNoArena();
}
void UserEventSpecifics_LanguageDetection_Language::set_language_code(const ::std::string& value) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
#if LANG_CXX11
void UserEventSpecifics_LanguageDetection_Language::set_language_code(::std::string&& value) {
  set_has_language_code();
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
#endif
void UserEventSpecifics_LanguageDetection_Language::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
void UserEventSpecifics_LanguageDetection_Language::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}
::std::string* UserEventSpecifics_LanguageDetection_Language::mutable_language_code() {
  set_has_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserEventSpecifics_LanguageDetection_Language::release_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
  clear_has_language_code();
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserEventSpecifics_LanguageDetection_Language::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    set_has_language_code();
  } else {
    clear_has_language_code();
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.LanguageDetection.Language.language_code)
}

// optional bool is_reliable = 2;
bool UserEventSpecifics_LanguageDetection_Language::has_is_reliable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserEventSpecifics_LanguageDetection_Language::set_has_is_reliable() {
  _has_bits_[0] |= 0x00000002u;
}
void UserEventSpecifics_LanguageDetection_Language::clear_has_is_reliable() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserEventSpecifics_LanguageDetection_Language::clear_is_reliable() {
  is_reliable_ = false;
  clear_has_is_reliable();
}
bool UserEventSpecifics_LanguageDetection_Language::is_reliable() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.Language.is_reliable)
  return is_reliable_;
}
void UserEventSpecifics_LanguageDetection_Language::set_is_reliable(bool value) {
  set_has_is_reliable();
  is_reliable_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.Language.is_reliable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_LanguageDetection::kDetectedLanguagesFieldNumber;
const int UserEventSpecifics_LanguageDetection::kAdoptedLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_LanguageDetection::UserEventSpecifics_LanguageDetection()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.LanguageDetection)
}
UserEventSpecifics_LanguageDetection::UserEventSpecifics_LanguageDetection(const UserEventSpecifics_LanguageDetection& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      detected_languages_(from.detected_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adopted_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_adopted_language_code()) {
    adopted_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adopted_language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.LanguageDetection)
}

void UserEventSpecifics_LanguageDetection::SharedCtor() {
  _cached_size_ = 0;
  adopted_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserEventSpecifics_LanguageDetection::~UserEventSpecifics_LanguageDetection() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.LanguageDetection)
  SharedDtor();
}

void UserEventSpecifics_LanguageDetection::SharedDtor() {
  adopted_language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserEventSpecifics_LanguageDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_LanguageDetection& UserEventSpecifics_LanguageDetection::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_LanguageDetection* UserEventSpecifics_LanguageDetection::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_LanguageDetection* n = new UserEventSpecifics_LanguageDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_LanguageDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.LanguageDetection)
  detected_languages_.Clear();
  if (has_adopted_language_code()) {
    GOOGLE_DCHECK(!adopted_language_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*adopted_language_code_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_LanguageDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.LanguageDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detected_languages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string adopted_language_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adopted_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.LanguageDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.LanguageDetection)
  return false;
#undef DO_
}

void UserEventSpecifics_LanguageDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.LanguageDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detected_languages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->detected_languages(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string adopted_language_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->adopted_language_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.LanguageDetection)
}

size_t UserEventSpecifics_LanguageDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.LanguageDetection)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->detected_languages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detected_languages(static_cast<int>(i)));
    }
  }

  // optional string adopted_language_code = 2;
  if (has_adopted_language_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adopted_language_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_LanguageDetection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_LanguageDetection*>(&from));
}

void UserEventSpecifics_LanguageDetection::MergeFrom(const UserEventSpecifics_LanguageDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.LanguageDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detected_languages_.MergeFrom(from.detected_languages_);
  if (from.has_adopted_language_code()) {
    set_has_adopted_language_code();
    adopted_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adopted_language_code_);
  }
}

void UserEventSpecifics_LanguageDetection::CopyFrom(const UserEventSpecifics_LanguageDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.LanguageDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_LanguageDetection::IsInitialized() const {
  return true;
}

void UserEventSpecifics_LanguageDetection::Swap(UserEventSpecifics_LanguageDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_LanguageDetection::InternalSwap(UserEventSpecifics_LanguageDetection* other) {
  detected_languages_.InternalSwap(&other->detected_languages_);
  adopted_language_code_.Swap(&other->adopted_language_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_LanguageDetection::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.LanguageDetection";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_LanguageDetection

// repeated .sync_pb.UserEventSpecifics.LanguageDetection.Language detected_languages = 1;
int UserEventSpecifics_LanguageDetection::detected_languages_size() const {
  return detected_languages_.size();
}
void UserEventSpecifics_LanguageDetection::clear_detected_languages() {
  detected_languages_.Clear();
}
const ::sync_pb::UserEventSpecifics_LanguageDetection_Language& UserEventSpecifics_LanguageDetection::detected_languages(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Get(index);
}
::sync_pb::UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection::mutable_detected_languages(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Mutable(index);
}
::sync_pb::UserEventSpecifics_LanguageDetection_Language* UserEventSpecifics_LanguageDetection::add_detected_languages() {
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >*
UserEventSpecifics_LanguageDetection::mutable_detected_languages() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return &detected_languages_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::UserEventSpecifics_LanguageDetection_Language >&
UserEventSpecifics_LanguageDetection::detected_languages() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.LanguageDetection.detected_languages)
  return detected_languages_;
}

// optional string adopted_language_code = 2;
bool UserEventSpecifics_LanguageDetection::has_adopted_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics_LanguageDetection::set_has_adopted_language_code() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics_LanguageDetection::clear_has_adopted_language_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics_LanguageDetection::clear_adopted_language_code() {
  adopted_language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adopted_language_code();
}
const ::std::string& UserEventSpecifics_LanguageDetection::adopted_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  return adopted_language_code_.GetNoArena();
}
void UserEventSpecifics_LanguageDetection::set_adopted_language_code(const ::std::string& value) {
  set_has_adopted_language_code();
  adopted_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
#if LANG_CXX11
void UserEventSpecifics_LanguageDetection::set_adopted_language_code(::std::string&& value) {
  set_has_adopted_language_code();
  adopted_language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
#endif
void UserEventSpecifics_LanguageDetection::set_adopted_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adopted_language_code();
  adopted_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
void UserEventSpecifics_LanguageDetection::set_adopted_language_code(const char* value, size_t size) {
  set_has_adopted_language_code();
  adopted_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}
::std::string* UserEventSpecifics_LanguageDetection::mutable_adopted_language_code() {
  set_has_adopted_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  return adopted_language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserEventSpecifics_LanguageDetection::release_adopted_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
  clear_has_adopted_language_code();
  return adopted_language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserEventSpecifics_LanguageDetection::set_allocated_adopted_language_code(::std::string* adopted_language_code) {
  if (adopted_language_code != NULL) {
    set_has_adopted_language_code();
  } else {
    clear_has_adopted_language_code();
  }
  adopted_language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adopted_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.LanguageDetection.adopted_language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_Translation::kFromLanguageCodeFieldNumber;
const int UserEventSpecifics_Translation::kToLanguageCodeFieldNumber;
const int UserEventSpecifics_Translation::kInteractionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_Translation::UserEventSpecifics_Translation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.Translation)
}
UserEventSpecifics_Translation::UserEventSpecifics_Translation(const UserEventSpecifics_Translation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_language_code()) {
    from_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_language_code_);
  }
  to_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_language_code()) {
    to_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_language_code_);
  }
  interaction_ = from.interaction_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.Translation)
}

void UserEventSpecifics_Translation::SharedCtor() {
  _cached_size_ = 0;
  from_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interaction_ = 0;
}

UserEventSpecifics_Translation::~UserEventSpecifics_Translation() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.Translation)
  SharedDtor();
}

void UserEventSpecifics_Translation::SharedDtor() {
  from_language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserEventSpecifics_Translation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_Translation& UserEventSpecifics_Translation::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_Translation* UserEventSpecifics_Translation::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_Translation* n = new UserEventSpecifics_Translation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.Translation)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_from_language_code()) {
      GOOGLE_DCHECK(!from_language_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_language_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_to_language_code()) {
      GOOGLE_DCHECK(!to_language_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_language_code_.UnsafeRawStringPointer())->clear();
    }
  }
  interaction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_Translation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.Translation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_language_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_language_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_language_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserEventSpecifics_Translation_Interaction_IsValid(value)) {
            set_interaction(static_cast< ::sync_pb::UserEventSpecifics_Translation_Interaction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.Translation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.Translation)
  return false;
#undef DO_
}

void UserEventSpecifics_Translation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_language_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_language_code(), output);
  }

  // optional string to_language_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to_language_code(), output);
  }

  // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->interaction(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.Translation)
}

size_t UserEventSpecifics_Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.Translation)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string from_language_code = 1;
    if (has_from_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_language_code());
    }

    // optional string to_language_code = 2;
    if (has_to_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_language_code());
    }

    // optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
    if (has_interaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->interaction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_Translation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_Translation*>(&from));
}

void UserEventSpecifics_Translation::MergeFrom(const UserEventSpecifics_Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_language_code();
      from_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_language_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_language_code();
      to_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_language_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      interaction_ = from.interaction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserEventSpecifics_Translation::CopyFrom(const UserEventSpecifics_Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_Translation::IsInitialized() const {
  return true;
}

void UserEventSpecifics_Translation::Swap(UserEventSpecifics_Translation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_Translation::InternalSwap(UserEventSpecifics_Translation* other) {
  from_language_code_.Swap(&other->from_language_code_);
  to_language_code_.Swap(&other->to_language_code_);
  std::swap(interaction_, other->interaction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_Translation::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.Translation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_Translation

// optional string from_language_code = 1;
bool UserEventSpecifics_Translation::has_from_language_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics_Translation::set_has_from_language_code() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics_Translation::clear_has_from_language_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics_Translation::clear_from_language_code() {
  from_language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_language_code();
}
const ::std::string& UserEventSpecifics_Translation::from_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.from_language_code)
  return from_language_code_.GetNoArena();
}
void UserEventSpecifics_Translation::set_from_language_code(const ::std::string& value) {
  set_has_from_language_code();
  from_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
#if LANG_CXX11
void UserEventSpecifics_Translation::set_from_language_code(::std::string&& value) {
  set_has_from_language_code();
  from_language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
#endif
void UserEventSpecifics_Translation::set_from_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_language_code();
  from_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
void UserEventSpecifics_Translation::set_from_language_code(const char* value, size_t size) {
  set_has_from_language_code();
  from_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.Translation.from_language_code)
}
::std::string* UserEventSpecifics_Translation::mutable_from_language_code() {
  set_has_from_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.Translation.from_language_code)
  return from_language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserEventSpecifics_Translation::release_from_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.Translation.from_language_code)
  clear_has_from_language_code();
  return from_language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserEventSpecifics_Translation::set_allocated_from_language_code(::std::string* from_language_code) {
  if (from_language_code != NULL) {
    set_has_from_language_code();
  } else {
    clear_has_from_language_code();
  }
  from_language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.Translation.from_language_code)
}

// optional string to_language_code = 2;
bool UserEventSpecifics_Translation::has_to_language_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserEventSpecifics_Translation::set_has_to_language_code() {
  _has_bits_[0] |= 0x00000002u;
}
void UserEventSpecifics_Translation::clear_has_to_language_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserEventSpecifics_Translation::clear_to_language_code() {
  to_language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_language_code();
}
const ::std::string& UserEventSpecifics_Translation::to_language_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.to_language_code)
  return to_language_code_.GetNoArena();
}
void UserEventSpecifics_Translation::set_to_language_code(const ::std::string& value) {
  set_has_to_language_code();
  to_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
#if LANG_CXX11
void UserEventSpecifics_Translation::set_to_language_code(::std::string&& value) {
  set_has_to_language_code();
  to_language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
#endif
void UserEventSpecifics_Translation::set_to_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to_language_code();
  to_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
void UserEventSpecifics_Translation::set_to_language_code(const char* value, size_t size) {
  set_has_to_language_code();
  to_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.Translation.to_language_code)
}
::std::string* UserEventSpecifics_Translation::mutable_to_language_code() {
  set_has_to_language_code();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.Translation.to_language_code)
  return to_language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserEventSpecifics_Translation::release_to_language_code() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.Translation.to_language_code)
  clear_has_to_language_code();
  return to_language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserEventSpecifics_Translation::set_allocated_to_language_code(::std::string* to_language_code) {
  if (to_language_code != NULL) {
    set_has_to_language_code();
  } else {
    clear_has_to_language_code();
  }
  to_language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_language_code);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.Translation.to_language_code)
}

// optional .sync_pb.UserEventSpecifics.Translation.Interaction interaction = 3;
bool UserEventSpecifics_Translation::has_interaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserEventSpecifics_Translation::set_has_interaction() {
  _has_bits_[0] |= 0x00000004u;
}
void UserEventSpecifics_Translation::clear_has_interaction() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserEventSpecifics_Translation::clear_interaction() {
  interaction_ = 0;
  clear_has_interaction();
}
::sync_pb::UserEventSpecifics_Translation_Interaction UserEventSpecifics_Translation::interaction() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.Translation.interaction)
  return static_cast< ::sync_pb::UserEventSpecifics_Translation_Interaction >(interaction_);
}
void UserEventSpecifics_Translation::set_interaction(::sync_pb::UserEventSpecifics_Translation_Interaction value) {
  assert(::sync_pb::UserEventSpecifics_Translation_Interaction_IsValid(value));
  set_has_interaction();
  interaction_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.Translation.interaction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_UserConsent::kLocaleFieldNumber;
const int UserEventSpecifics_UserConsent::kClientConsentTimeUsecFieldNumber;
const int UserEventSpecifics_UserConsent::kSyncConsentFieldNumber;
const int UserEventSpecifics_UserConsent::kArcBackupAndRestoreConsentFieldNumber;
const int UserEventSpecifics_UserConsent::kArcLocationServiceConsentFieldNumber;
const int UserEventSpecifics_UserConsent::kArcPlayTermsOfServiceConsentFieldNumber;
const int UserEventSpecifics_UserConsent::kArcMetricsAndUsageConsentFieldNumber;
const int UserEventSpecifics_UserConsent::kAccountIdFieldNumber;
const int UserEventSpecifics_UserConsent::kFeatureFieldNumber;
const int UserEventSpecifics_UserConsent::kDescriptionGrdIdsFieldNumber;
const int UserEventSpecifics_UserConsent::kConfirmationGrdIdFieldNumber;
const int UserEventSpecifics_UserConsent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_UserConsent::UserEventSpecifics_UserConsent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.UserConsent)
}
UserEventSpecifics_UserConsent::UserEventSpecifics_UserConsent(const UserEventSpecifics_UserConsent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      description_grd_ids_(from.description_grd_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_locale()) {
    locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_id()) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  ::memcpy(&feature_, &from.feature_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_consent_time_usec_) -
    reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  clear_has_consent();
  switch (from.consent_case()) {
    case kSyncConsent: {
      mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from.sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from.arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from.arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from.arc_play_terms_of_service_consent());
      break;
    }
    case kArcMetricsAndUsageConsent: {
      mutable_arc_metrics_and_usage_consent()->::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::MergeFrom(from.arc_metrics_and_usage_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.UserConsent)
}

void UserEventSpecifics_UserConsent::SharedCtor() {
  _cached_size_ = 0;
  locale_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_consent_time_usec_) -
      reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  clear_has_consent();
}

UserEventSpecifics_UserConsent::~UserEventSpecifics_UserConsent() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.UserConsent)
  SharedDtor();
}

void UserEventSpecifics_UserConsent::SharedDtor() {
  locale_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_consent()) {
    clear_consent();
  }
}

void UserEventSpecifics_UserConsent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_UserConsent& UserEventSpecifics_UserConsent::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_UserConsent* UserEventSpecifics_UserConsent::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_UserConsent* n = new UserEventSpecifics_UserConsent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_UserConsent::clear_consent() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.UserEventSpecifics.UserConsent)
  switch (consent_case()) {
    case kSyncConsent: {
      delete consent_.sync_consent_;
      break;
    }
    case kArcBackupAndRestoreConsent: {
      delete consent_.arc_backup_and_restore_consent_;
      break;
    }
    case kArcLocationServiceConsent: {
      delete consent_.arc_location_service_consent_;
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      delete consent_.arc_play_terms_of_service_consent_;
      break;
    }
    case kArcMetricsAndUsageConsent: {
      delete consent_.arc_metrics_and_usage_consent_;
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSENT_NOT_SET;
}


void UserEventSpecifics_UserConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.UserConsent)
  description_grd_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_locale()) {
      GOOGLE_DCHECK(!locale_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*locale_.UnsafeRawStringPointer())->clear();
    }
    if (has_account_id()) {
      GOOGLE_DCHECK(!account_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*account_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&feature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_consent_time_usec_) -
        reinterpret_cast<char*>(&feature_)) + sizeof(client_consent_time_usec_));
  }
  clear_consent();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_UserConsent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.UserConsent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserEventSpecifics_UserConsent_Feature_IsValid(value)) {
            set_feature(static_cast< ::sync_pb::UserEventSpecifics_UserConsent_Feature >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 description_grd_ids = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_description_grd_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_description_grd_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 confirmation_grd_id = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_confirmation_grd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmation_grd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string locale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc_backup_and_restore_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc_location_service_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc_play_terms_of_service_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arc_metrics_and_usage_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 client_consent_time_usec = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_client_consent_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_consent_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.UserConsent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.UserConsent)
  return false;
#undef DO_
}

void UserEventSpecifics_UserConsent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.UserConsent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->feature(), output);
  }

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  for (int i = 0, n = this->description_grd_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->description_grd_ids(i), output);
  }

  // optional int32 confirmation_grd_id = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->confirmation_grd_id(), output);
  }

  // optional string locale = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->locale(), output);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional string account_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account_id(), output);
  }

  switch (consent_case()) {
    case kSyncConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        7, *consent_.sync_consent_, output);
      break;
    case kArcBackupAndRestoreConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        8, *consent_.arc_backup_and_restore_consent_, output);
      break;
    case kArcLocationServiceConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        9, *consent_.arc_location_service_consent_, output);
      break;
    case kArcPlayTermsOfServiceConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        10, *consent_.arc_play_terms_of_service_consent_, output);
      break;
    case kArcMetricsAndUsageConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        11, *consent_.arc_metrics_and_usage_consent_, output);
      break;
    default: ;
  }
  // optional int64 client_consent_time_usec = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->client_consent_time_usec(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.UserConsent)
}

size_t UserEventSpecifics_UserConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.UserConsent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 description_grd_ids = 2 [deprecated = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->description_grd_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->description_grd_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string locale = 4;
    if (has_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale());
    }

    // optional string account_id = 6;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }

    // optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feature());
    }

    // optional int32 confirmation_grd_id = 3 [deprecated = true];
    if (has_confirmation_grd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confirmation_grd_id());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int64 client_consent_time_usec = 12;
    if (has_client_consent_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->client_consent_time_usec());
    }

  }
  switch (consent_case()) {
    // optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
    case kSyncConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.sync_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
    case kArcBackupAndRestoreConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.arc_backup_and_restore_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
    case kArcLocationServiceConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.arc_location_service_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
    case kArcPlayTermsOfServiceConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.arc_play_terms_of_service_consent_);
      break;
    }
    // optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
    case kArcMetricsAndUsageConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *consent_.arc_metrics_and_usage_consent_);
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_UserConsent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_UserConsent*>(&from));
}

void UserEventSpecifics_UserConsent::MergeFrom(const UserEventSpecifics_UserConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.UserConsent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_grd_ids_.MergeFrom(from.description_grd_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_locale();
      locale_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locale_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_account_id();
      account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      feature_ = from.feature_;
    }
    if (cached_has_bits & 0x00000008u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_consent_time_usec_ = from.client_consent_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.consent_case()) {
    case kSyncConsent: {
      mutable_sync_consent()->::sync_pb::UserConsentTypes_SyncConsent::MergeFrom(from.sync_consent());
      break;
    }
    case kArcBackupAndRestoreConsent: {
      mutable_arc_backup_and_restore_consent()->::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(from.arc_backup_and_restore_consent());
      break;
    }
    case kArcLocationServiceConsent: {
      mutable_arc_location_service_consent()->::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(from.arc_location_service_consent());
      break;
    }
    case kArcPlayTermsOfServiceConsent: {
      mutable_arc_play_terms_of_service_consent()->::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(from.arc_play_terms_of_service_consent());
      break;
    }
    case kArcMetricsAndUsageConsent: {
      mutable_arc_metrics_and_usage_consent()->::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::MergeFrom(from.arc_metrics_and_usage_consent());
      break;
    }
    case CONSENT_NOT_SET: {
      break;
    }
  }
}

void UserEventSpecifics_UserConsent::CopyFrom(const UserEventSpecifics_UserConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.UserConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_UserConsent::IsInitialized() const {
  return true;
}

void UserEventSpecifics_UserConsent::Swap(UserEventSpecifics_UserConsent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_UserConsent::InternalSwap(UserEventSpecifics_UserConsent* other) {
  description_grd_ids_.InternalSwap(&other->description_grd_ids_);
  locale_.Swap(&other->locale_);
  account_id_.Swap(&other->account_id_);
  std::swap(feature_, other->feature_);
  std::swap(confirmation_grd_id_, other->confirmation_grd_id_);
  std::swap(status_, other->status_);
  std::swap(client_consent_time_usec_, other->client_consent_time_usec_);
  std::swap(consent_, other->consent_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_UserConsent::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.UserConsent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_UserConsent

// optional string locale = 4;
bool UserEventSpecifics_UserConsent::has_locale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics_UserConsent::set_has_locale() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics_UserConsent::clear_has_locale() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics_UserConsent::clear_locale() {
  locale_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_locale();
}
const ::std::string& UserEventSpecifics_UserConsent::locale() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.locale)
  return locale_.GetNoArena();
}
void UserEventSpecifics_UserConsent::set_locale(const ::std::string& value) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.locale)
}
#if LANG_CXX11
void UserEventSpecifics_UserConsent::set_locale(::std::string&& value) {
  set_has_locale();
  locale_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.UserConsent.locale)
}
#endif
void UserEventSpecifics_UserConsent::set_locale(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.UserConsent.locale)
}
void UserEventSpecifics_UserConsent::set_locale(const char* value, size_t size) {
  set_has_locale();
  locale_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.UserConsent.locale)
}
::std::string* UserEventSpecifics_UserConsent::mutable_locale() {
  set_has_locale();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.locale)
  return locale_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserEventSpecifics_UserConsent::release_locale() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.locale)
  clear_has_locale();
  return locale_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserEventSpecifics_UserConsent::set_allocated_locale(::std::string* locale) {
  if (locale != NULL) {
    set_has_locale();
  } else {
    clear_has_locale();
  }
  locale_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.locale)
}

// optional int64 client_consent_time_usec = 12;
bool UserEventSpecifics_UserConsent::has_client_consent_time_usec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserEventSpecifics_UserConsent::set_has_client_consent_time_usec() {
  _has_bits_[0] |= 0x00000020u;
}
void UserEventSpecifics_UserConsent::clear_has_client_consent_time_usec() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserEventSpecifics_UserConsent::clear_client_consent_time_usec() {
  client_consent_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_client_consent_time_usec();
}
::google::protobuf::int64 UserEventSpecifics_UserConsent::client_consent_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.client_consent_time_usec)
  return client_consent_time_usec_;
}
void UserEventSpecifics_UserConsent::set_client_consent_time_usec(::google::protobuf::int64 value) {
  set_has_client_consent_time_usec();
  client_consent_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.client_consent_time_usec)
}

// optional .sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;
bool UserEventSpecifics_UserConsent::has_sync_consent() const {
  return consent_case() == kSyncConsent;
}
void UserEventSpecifics_UserConsent::set_has_sync_consent() {
  _oneof_case_[0] = kSyncConsent;
}
void UserEventSpecifics_UserConsent::clear_sync_consent() {
  if (has_sync_consent()) {
    delete consent_.sync_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_SyncConsent& UserEventSpecifics_UserConsent::sync_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  return has_sync_consent()
      ? *consent_.sync_consent_
      : ::sync_pb::UserConsentTypes_SyncConsent::default_instance();
}
::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::mutable_sync_consent() {
  if (!has_sync_consent()) {
    clear_consent();
    set_has_sync_consent();
    consent_.sync_consent_ = new ::sync_pb::UserConsentTypes_SyncConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  return consent_.sync_consent_;
}
::sync_pb::UserConsentTypes_SyncConsent* UserEventSpecifics_UserConsent::release_sync_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
  if (has_sync_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_SyncConsent* temp = consent_.sync_consent_;
    consent_.sync_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics_UserConsent::set_allocated_sync_consent(::sync_pb::UserConsentTypes_SyncConsent* sync_consent) {
  clear_consent();
  if (sync_consent) {
    set_has_sync_consent();
    consent_.sync_consent_ = sync_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.sync_consent)
}

// optional .sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;
bool UserEventSpecifics_UserConsent::has_arc_backup_and_restore_consent() const {
  return consent_case() == kArcBackupAndRestoreConsent;
}
void UserEventSpecifics_UserConsent::set_has_arc_backup_and_restore_consent() {
  _oneof_case_[0] = kArcBackupAndRestoreConsent;
}
void UserEventSpecifics_UserConsent::clear_arc_backup_and_restore_consent() {
  if (has_arc_backup_and_restore_consent()) {
    delete consent_.arc_backup_and_restore_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent& UserEventSpecifics_UserConsent::arc_backup_and_restore_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  return has_arc_backup_and_restore_consent()
      ? *consent_.arc_backup_and_restore_consent_
      : ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent::default_instance();
}
::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::mutable_arc_backup_and_restore_consent() {
  if (!has_arc_backup_and_restore_consent()) {
    clear_consent();
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = new ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  return consent_.arc_backup_and_restore_consent_;
}
::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* UserEventSpecifics_UserConsent::release_arc_backup_and_restore_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
  if (has_arc_backup_and_restore_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* temp = consent_.arc_backup_and_restore_consent_;
    consent_.arc_backup_and_restore_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics_UserConsent::set_allocated_arc_backup_and_restore_consent(::sync_pb::UserConsentTypes_ArcBackupAndRestoreConsent* arc_backup_and_restore_consent) {
  clear_consent();
  if (arc_backup_and_restore_consent) {
    set_has_arc_backup_and_restore_consent();
    consent_.arc_backup_and_restore_consent_ = arc_backup_and_restore_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_backup_and_restore_consent)
}

// optional .sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;
bool UserEventSpecifics_UserConsent::has_arc_location_service_consent() const {
  return consent_case() == kArcLocationServiceConsent;
}
void UserEventSpecifics_UserConsent::set_has_arc_location_service_consent() {
  _oneof_case_[0] = kArcLocationServiceConsent;
}
void UserEventSpecifics_UserConsent::clear_arc_location_service_consent() {
  if (has_arc_location_service_consent()) {
    delete consent_.arc_location_service_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent& UserEventSpecifics_UserConsent::arc_location_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  return has_arc_location_service_consent()
      ? *consent_.arc_location_service_consent_
      : ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent::default_instance();
}
::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::mutable_arc_location_service_consent() {
  if (!has_arc_location_service_consent()) {
    clear_consent();
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = new ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  return consent_.arc_location_service_consent_;
}
::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* UserEventSpecifics_UserConsent::release_arc_location_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
  if (has_arc_location_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* temp = consent_.arc_location_service_consent_;
    consent_.arc_location_service_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics_UserConsent::set_allocated_arc_location_service_consent(::sync_pb::UserConsentTypes_ArcGoogleLocationServiceConsent* arc_location_service_consent) {
  clear_consent();
  if (arc_location_service_consent) {
    set_has_arc_location_service_consent();
    consent_.arc_location_service_consent_ = arc_location_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_location_service_consent)
}

// optional .sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;
bool UserEventSpecifics_UserConsent::has_arc_play_terms_of_service_consent() const {
  return consent_case() == kArcPlayTermsOfServiceConsent;
}
void UserEventSpecifics_UserConsent::set_has_arc_play_terms_of_service_consent() {
  _oneof_case_[0] = kArcPlayTermsOfServiceConsent;
}
void UserEventSpecifics_UserConsent::clear_arc_play_terms_of_service_consent() {
  if (has_arc_play_terms_of_service_consent()) {
    delete consent_.arc_play_terms_of_service_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent& UserEventSpecifics_UserConsent::arc_play_terms_of_service_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  return has_arc_play_terms_of_service_consent()
      ? *consent_.arc_play_terms_of_service_consent_
      : ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent::default_instance();
}
::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::mutable_arc_play_terms_of_service_consent() {
  if (!has_arc_play_terms_of_service_consent()) {
    clear_consent();
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = new ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  return consent_.arc_play_terms_of_service_consent_;
}
::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* UserEventSpecifics_UserConsent::release_arc_play_terms_of_service_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
  if (has_arc_play_terms_of_service_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* temp = consent_.arc_play_terms_of_service_consent_;
    consent_.arc_play_terms_of_service_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics_UserConsent::set_allocated_arc_play_terms_of_service_consent(::sync_pb::UserConsentTypes_ArcPlayTermsOfServiceConsent* arc_play_terms_of_service_consent) {
  clear_consent();
  if (arc_play_terms_of_service_consent) {
    set_has_arc_play_terms_of_service_consent();
    consent_.arc_play_terms_of_service_consent_ = arc_play_terms_of_service_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_play_terms_of_service_consent)
}

// optional .sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent arc_metrics_and_usage_consent = 11;
bool UserEventSpecifics_UserConsent::has_arc_metrics_and_usage_consent() const {
  return consent_case() == kArcMetricsAndUsageConsent;
}
void UserEventSpecifics_UserConsent::set_has_arc_metrics_and_usage_consent() {
  _oneof_case_[0] = kArcMetricsAndUsageConsent;
}
void UserEventSpecifics_UserConsent::clear_arc_metrics_and_usage_consent() {
  if (has_arc_metrics_and_usage_consent()) {
    delete consent_.arc_metrics_and_usage_consent_;
    clear_has_consent();
  }
}
 const ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent& UserEventSpecifics_UserConsent::arc_metrics_and_usage_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
  return has_arc_metrics_and_usage_consent()
      ? *consent_.arc_metrics_and_usage_consent_
      : ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent::default_instance();
}
::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserEventSpecifics_UserConsent::mutable_arc_metrics_and_usage_consent() {
  if (!has_arc_metrics_and_usage_consent()) {
    clear_consent();
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = new ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
  return consent_.arc_metrics_and_usage_consent_;
}
::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* UserEventSpecifics_UserConsent::release_arc_metrics_and_usage_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
  if (has_arc_metrics_and_usage_consent()) {
    clear_has_consent();
    ::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* temp = consent_.arc_metrics_and_usage_consent_;
    consent_.arc_metrics_and_usage_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics_UserConsent::set_allocated_arc_metrics_and_usage_consent(::sync_pb::UserConsentTypes_ArcMetricsAndUsageConsent* arc_metrics_and_usage_consent) {
  clear_consent();
  if (arc_metrics_and_usage_consent) {
    set_has_arc_metrics_and_usage_consent();
    consent_.arc_metrics_and_usage_consent_ = arc_metrics_and_usage_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.arc_metrics_and_usage_consent)
}

// optional string account_id = 6;
bool UserEventSpecifics_UserConsent::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserEventSpecifics_UserConsent::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UserEventSpecifics_UserConsent::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserEventSpecifics_UserConsent::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_id();
}
const ::std::string& UserEventSpecifics_UserConsent::account_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.account_id)
  return account_id_.GetNoArena();
}
void UserEventSpecifics_UserConsent::set_account_id(const ::std::string& value) {
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
#if LANG_CXX11
void UserEventSpecifics_UserConsent::set_account_id(::std::string&& value) {
  set_has_account_id();
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
#endif
void UserEventSpecifics_UserConsent::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
void UserEventSpecifics_UserConsent::set_account_id(const char* value, size_t size) {
  set_has_account_id();
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.UserConsent.account_id)
}
::std::string* UserEventSpecifics_UserConsent::mutable_account_id() {
  set_has_account_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.UserConsent.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserEventSpecifics_UserConsent::release_account_id() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.UserConsent.account_id)
  clear_has_account_id();
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserEventSpecifics_UserConsent::set_allocated_account_id(::std::string* account_id) {
  if (account_id != NULL) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.UserConsent.account_id)
}

// optional .sync_pb.UserEventSpecifics.UserConsent.Feature feature = 1 [deprecated = true];
bool UserEventSpecifics_UserConsent::has_feature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserEventSpecifics_UserConsent::set_has_feature() {
  _has_bits_[0] |= 0x00000004u;
}
void UserEventSpecifics_UserConsent::clear_has_feature() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserEventSpecifics_UserConsent::clear_feature() {
  feature_ = 0;
  clear_has_feature();
}
::sync_pb::UserEventSpecifics_UserConsent_Feature UserEventSpecifics_UserConsent::feature() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.feature)
  return static_cast< ::sync_pb::UserEventSpecifics_UserConsent_Feature >(feature_);
}
void UserEventSpecifics_UserConsent::set_feature(::sync_pb::UserEventSpecifics_UserConsent_Feature value) {
  assert(::sync_pb::UserEventSpecifics_UserConsent_Feature_IsValid(value));
  set_has_feature();
  feature_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.feature)
}

// repeated int32 description_grd_ids = 2 [deprecated = true];
int UserEventSpecifics_UserConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
void UserEventSpecifics_UserConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
::google::protobuf::int32 UserEventSpecifics_UserConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
void UserEventSpecifics_UserConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
}
void UserEventSpecifics_UserConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserEventSpecifics_UserConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return description_grd_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserEventSpecifics_UserConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserEventSpecifics.UserConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 3 [deprecated = true];
bool UserEventSpecifics_UserConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserEventSpecifics_UserConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UserEventSpecifics_UserConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserEventSpecifics_UserConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
::google::protobuf::int32 UserEventSpecifics_UserConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
void UserEventSpecifics_UserConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];
bool UserEventSpecifics_UserConsent::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserEventSpecifics_UserConsent::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void UserEventSpecifics_UserConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserEventSpecifics_UserConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
::sync_pb::UserConsentTypes_ConsentStatus UserEventSpecifics_UserConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.UserConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
void UserEventSpecifics_UserConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.UserConsent.status)
}

bool UserEventSpecifics_UserConsent::has_consent() const {
  return consent_case() != CONSENT_NOT_SET;
}
void UserEventSpecifics_UserConsent::clear_has_consent() {
  _oneof_case_[0] = CONSENT_NOT_SET;
}
UserEventSpecifics_UserConsent::ConsentCase UserEventSpecifics_UserConsent::consent_case() const {
  return UserEventSpecifics_UserConsent::ConsentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::kEnabledFieldNumber;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::kSafeBrowsingReportingPopulationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
}
UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&safe_browsing_reporting_population_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(safe_browsing_reporting_population_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_browsing_reporting_population_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(safe_browsing_reporting_population_));
}

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::~UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  SharedDtor();
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SharedDtor() {
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* n = new UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&safe_browsing_reporting_population_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(safe_browsing_reporting_population_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(value)) {
            set_safe_browsing_reporting_population(static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  return false;
#undef DO_
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->safe_browsing_reporting_population(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
}

size_t UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool enabled = 1;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
    if (has_safe_browsing_reporting_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->safe_browsing_reporting_population());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus*>(&from));
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::MergeFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      safe_browsing_reporting_population_ = from.safe_browsing_reporting_population_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::CopyFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::IsInitialized() const {
  return true;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::Swap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::InternalSwap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(safe_browsing_reporting_population_, other->safe_browsing_reporting_population_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus

// optional bool enabled = 1;
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::enabled() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.enabled)
  return enabled_;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.enabled)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::has_safe_browsing_reporting_population() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_has_safe_browsing_reporting_population() {
  _has_bits_[0] |= 0x00000002u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_has_safe_browsing_reporting_population() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::clear_safe_browsing_reporting_population() {
  safe_browsing_reporting_population_ = 0;
  clear_has_safe_browsing_reporting_population();
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::safe_browsing_reporting_population() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.safe_browsing_reporting_population)
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation >(safe_browsing_reporting_population_);
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::set_safe_browsing_reporting_population(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus_ReportingPopulation_IsValid(value));
  set_has_safe_browsing_reporting_population();
  safe_browsing_reporting_population_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.safe_browsing_reporting_population)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
}
UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
}

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::~UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
  SharedDtor();
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::SharedDtor() {
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* n = new UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
  if (has_status()) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
  return false;
#undef DO_
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->status_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
}

size_t UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected*>(&from));
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::MergeFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::MergeFrom(from.status());
  }
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::CopyFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::IsInitialized() const {
  return true;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::Swap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::InternalSwap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::clear_status() {
  if (status_ != NULL) status_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::Clear();
  clear_has_status();
}
const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus& UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.status)
  return status_ != NULL ? *status_
                         : *::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus::internal_default_instance();
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.status)
  return status_;
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::release_status() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.status)
  clear_has_status();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::set_allocated_status(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected_SafeBrowsingStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::kLookupResultFieldNumber;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::kVerdictFieldNumber;
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::kVerdictTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
}
UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  verdict_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verdict_token()) {
    verdict_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verdict_token_);
  }
  ::memcpy(&lookup_result_, &from.lookup_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&verdict_) -
    reinterpret_cast<char*>(&lookup_result_)) + sizeof(verdict_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::SharedCtor() {
  _cached_size_ = 0;
  verdict_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lookup_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verdict_) -
      reinterpret_cast<char*>(&lookup_result_)) + sizeof(verdict_));
}

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::~UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
  SharedDtor();
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::SharedDtor() {
  verdict_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* n = new UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
  if (has_verdict_token()) {
    GOOGLE_DCHECK(!verdict_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*verdict_token_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&lookup_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&verdict_) -
        reinterpret_cast<char*>(&lookup_result_)) + sizeof(verdict_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(value)) {
            set_lookup_result(static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(value)) {
            set_verdict(static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes verdict_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verdict_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
  return false;
#undef DO_
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lookup_result(), output);
  }

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->verdict(), output);
  }

  // optional bytes verdict_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->verdict_token(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
}

size_t UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes verdict_token = 3;
    if (has_verdict_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->verdict_token());
    }

    // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
    if (has_lookup_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lookup_result());
    }

    // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
    if (has_verdict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->verdict());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup*>(&from));
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::MergeFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_verdict_token();
      verdict_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verdict_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      lookup_result_ = from.lookup_result_;
    }
    if (cached_has_bits & 0x00000004u) {
      verdict_ = from.verdict_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::CopyFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::IsInitialized() const {
  return true;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::Swap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::InternalSwap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* other) {
  verdict_token_.Swap(&other->verdict_token_);
  std::swap(lookup_result_, other->lookup_result_);
  std::swap(verdict_, other->verdict_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::has_lookup_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_has_lookup_result() {
  _has_bits_[0] |= 0x00000002u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_has_lookup_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_lookup_result() {
  lookup_result_ = 0;
  clear_has_lookup_result();
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::lookup_result() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.lookup_result)
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult >(lookup_result_);
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_lookup_result(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_LookupResult_IsValid(value));
  set_has_lookup_result();
  lookup_result_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.lookup_result)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::has_verdict() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_has_verdict() {
  _has_bits_[0] |= 0x00000004u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_has_verdict() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_verdict() {
  verdict_ = 0;
  clear_has_verdict();
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::verdict() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict)
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict >(verdict_);
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup_ReputationVerdict_IsValid(value));
  set_has_verdict();
  verdict_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict)
}

// optional bytes verdict_token = 3;
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::has_verdict_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_has_verdict_token() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_has_verdict_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::clear_verdict_token() {
  verdict_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verdict_token();
}
const ::std::string& UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::verdict_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
  return verdict_token_.GetNoArena();
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(const ::std::string& value) {
  set_has_verdict_token();
  verdict_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
#if LANG_CXX11
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(::std::string&& value) {
  set_has_verdict_token();
  verdict_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
#endif
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verdict_token();
  verdict_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_verdict_token(const void* value, size_t size) {
  set_has_verdict_token();
  verdict_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}
::std::string* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::mutable_verdict_token() {
  set_has_verdict_token();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
  return verdict_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::release_verdict_token() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
  clear_has_verdict_token();
  return verdict_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::set_allocated_verdict_token(::std::string* verdict_token) {
  if (verdict_token != NULL) {
    set_has_verdict_token();
  } else {
    clear_has_verdict_token();
  }
  verdict_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verdict_token);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup.verdict_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::kInteractionResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
}
UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interaction_result_ = from.interaction_result_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::SharedCtor() {
  _cached_size_ = 0;
  interaction_result_ = 0;
}

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::~UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  SharedDtor();
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::SharedDtor() {
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* n = new UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  interaction_result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(value)) {
            set_interaction_result(static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  return false;
#undef DO_
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->interaction_result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
}

size_t UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
  if (has_interaction_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->interaction_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction*>(&from));
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::MergeFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interaction_result()) {
    set_interaction_result(from.interaction_result());
  }
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::CopyFrom(const UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::IsInitialized() const {
  return true;
}

void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::Swap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::InternalSwap(UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* other) {
  std::swap(interaction_result_, other->interaction_result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;
bool UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::has_interaction_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::set_has_interaction_result() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::clear_has_interaction_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::clear_interaction_result() {
  interaction_result_ = 0;
  clear_has_interaction_result();
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::interaction_result() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.interaction_result)
  return static_cast< ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult >(interaction_result_);
}
void UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::set_interaction_result(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult value) {
  assert(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction_InteractionResult_IsValid(value));
  set_has_interaction_result();
  interaction_result_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction.interaction_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics_GaiaPasswordReuse::kReuseDetectedFieldNumber;
const int UserEventSpecifics_GaiaPasswordReuse::kReuseLookupFieldNumber;
const int UserEventSpecifics_GaiaPasswordReuse::kDialogInteractionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics_GaiaPasswordReuse::UserEventSpecifics_GaiaPasswordReuse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
}
UserEventSpecifics_GaiaPasswordReuse::UserEventSpecifics_GaiaPasswordReuse(const UserEventSpecifics_GaiaPasswordReuse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reuse_detected()) {
    reuse_detected_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected(*from.reuse_detected_);
  } else {
    reuse_detected_ = NULL;
  }
  if (from.has_reuse_lookup()) {
    reuse_lookup_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup(*from.reuse_lookup_);
  } else {
    reuse_lookup_ = NULL;
  }
  if (from.has_dialog_interaction()) {
    dialog_interaction_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction(*from.dialog_interaction_);
  } else {
    dialog_interaction_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
}

void UserEventSpecifics_GaiaPasswordReuse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reuse_detected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dialog_interaction_) -
      reinterpret_cast<char*>(&reuse_detected_)) + sizeof(dialog_interaction_));
}

UserEventSpecifics_GaiaPasswordReuse::~UserEventSpecifics_GaiaPasswordReuse() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
  SharedDtor();
}

void UserEventSpecifics_GaiaPasswordReuse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete reuse_detected_;
  }
  if (this != internal_default_instance()) {
    delete reuse_lookup_;
  }
  if (this != internal_default_instance()) {
    delete dialog_interaction_;
  }
}

void UserEventSpecifics_GaiaPasswordReuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics_GaiaPasswordReuse& UserEventSpecifics_GaiaPasswordReuse::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics_GaiaPasswordReuse* UserEventSpecifics_GaiaPasswordReuse::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics_GaiaPasswordReuse* n = new UserEventSpecifics_GaiaPasswordReuse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics_GaiaPasswordReuse::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_reuse_detected()) {
      GOOGLE_DCHECK(reuse_detected_ != NULL);
      reuse_detected_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::Clear();
    }
    if (has_reuse_lookup()) {
      GOOGLE_DCHECK(reuse_lookup_ != NULL);
      reuse_lookup_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::Clear();
    }
    if (has_dialog_interaction()) {
      GOOGLE_DCHECK(dialog_interaction_ != NULL);
      dialog_interaction_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics_GaiaPasswordReuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reuse_detected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reuse_lookup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dialog_interaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
  return false;
#undef DO_
}

void UserEventSpecifics_GaiaPasswordReuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->reuse_detected_, output);
  }

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reuse_lookup_, output);
  }

  // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->dialog_interaction_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
}

size_t UserEventSpecifics_GaiaPasswordReuse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
    if (has_reuse_detected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reuse_detected_);
    }

    // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
    if (has_reuse_lookup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reuse_lookup_);
    }

    // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
    if (has_dialog_interaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dialog_interaction_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics_GaiaPasswordReuse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics_GaiaPasswordReuse*>(&from));
}

void UserEventSpecifics_GaiaPasswordReuse::MergeFrom(const UserEventSpecifics_GaiaPasswordReuse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reuse_detected()->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::MergeFrom(from.reuse_detected());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reuse_lookup()->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::MergeFrom(from.reuse_lookup());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dialog_interaction()->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::MergeFrom(from.dialog_interaction());
    }
  }
}

void UserEventSpecifics_GaiaPasswordReuse::CopyFrom(const UserEventSpecifics_GaiaPasswordReuse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics.GaiaPasswordReuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics_GaiaPasswordReuse::IsInitialized() const {
  return true;
}

void UserEventSpecifics_GaiaPasswordReuse::Swap(UserEventSpecifics_GaiaPasswordReuse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics_GaiaPasswordReuse::InternalSwap(UserEventSpecifics_GaiaPasswordReuse* other) {
  std::swap(reuse_detected_, other->reuse_detected_);
  std::swap(reuse_lookup_, other->reuse_lookup_);
  std::swap(dialog_interaction_, other->dialog_interaction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics_GaiaPasswordReuse::GetTypeName() const {
  return "sync_pb.UserEventSpecifics.GaiaPasswordReuse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics_GaiaPasswordReuse

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;
bool UserEventSpecifics_GaiaPasswordReuse::has_reuse_detected() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse::set_has_reuse_detected() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse::clear_has_reuse_detected() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics_GaiaPasswordReuse::clear_reuse_detected() {
  if (reuse_detected_ != NULL) reuse_detected_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::Clear();
  clear_has_reuse_detected();
}
const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected& UserEventSpecifics_GaiaPasswordReuse::reuse_detected() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_detected)
  return reuse_detected_ != NULL ? *reuse_detected_
                         : *::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected::internal_default_instance();
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* UserEventSpecifics_GaiaPasswordReuse::mutable_reuse_detected() {
  set_has_reuse_detected();
  if (reuse_detected_ == NULL) {
    reuse_detected_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_detected)
  return reuse_detected_;
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* UserEventSpecifics_GaiaPasswordReuse::release_reuse_detected() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_detected)
  clear_has_reuse_detected();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* temp = reuse_detected_;
  reuse_detected_ = NULL;
  return temp;
}
void UserEventSpecifics_GaiaPasswordReuse::set_allocated_reuse_detected(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDetected* reuse_detected) {
  delete reuse_detected_;
  reuse_detected_ = reuse_detected;
  if (reuse_detected) {
    set_has_reuse_detected();
  } else {
    clear_has_reuse_detected();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_detected)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;
bool UserEventSpecifics_GaiaPasswordReuse::has_reuse_lookup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse::set_has_reuse_lookup() {
  _has_bits_[0] |= 0x00000002u;
}
void UserEventSpecifics_GaiaPasswordReuse::clear_has_reuse_lookup() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserEventSpecifics_GaiaPasswordReuse::clear_reuse_lookup() {
  if (reuse_lookup_ != NULL) reuse_lookup_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::Clear();
  clear_has_reuse_lookup();
}
const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup& UserEventSpecifics_GaiaPasswordReuse::reuse_lookup() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_lookup)
  return reuse_lookup_ != NULL ? *reuse_lookup_
                         : *::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup::internal_default_instance();
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* UserEventSpecifics_GaiaPasswordReuse::mutable_reuse_lookup() {
  set_has_reuse_lookup();
  if (reuse_lookup_ == NULL) {
    reuse_lookup_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_lookup)
  return reuse_lookup_;
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* UserEventSpecifics_GaiaPasswordReuse::release_reuse_lookup() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_lookup)
  clear_has_reuse_lookup();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* temp = reuse_lookup_;
  reuse_lookup_ = NULL;
  return temp;
}
void UserEventSpecifics_GaiaPasswordReuse::set_allocated_reuse_lookup(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseLookup* reuse_lookup) {
  delete reuse_lookup_;
  reuse_lookup_ = reuse_lookup;
  if (reuse_lookup) {
    set_has_reuse_lookup();
  } else {
    clear_has_reuse_lookup();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.reuse_lookup)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;
bool UserEventSpecifics_GaiaPasswordReuse::has_dialog_interaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserEventSpecifics_GaiaPasswordReuse::set_has_dialog_interaction() {
  _has_bits_[0] |= 0x00000004u;
}
void UserEventSpecifics_GaiaPasswordReuse::clear_has_dialog_interaction() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserEventSpecifics_GaiaPasswordReuse::clear_dialog_interaction() {
  if (dialog_interaction_ != NULL) dialog_interaction_->::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::Clear();
  clear_has_dialog_interaction();
}
const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction& UserEventSpecifics_GaiaPasswordReuse::dialog_interaction() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.GaiaPasswordReuse.dialog_interaction)
  return dialog_interaction_ != NULL ? *dialog_interaction_
                         : *::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction::internal_default_instance();
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* UserEventSpecifics_GaiaPasswordReuse::mutable_dialog_interaction() {
  set_has_dialog_interaction();
  if (dialog_interaction_ == NULL) {
    dialog_interaction_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.GaiaPasswordReuse.dialog_interaction)
  return dialog_interaction_;
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* UserEventSpecifics_GaiaPasswordReuse::release_dialog_interaction() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.GaiaPasswordReuse.dialog_interaction)
  clear_has_dialog_interaction();
  ::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* temp = dialog_interaction_;
  dialog_interaction_ = NULL;
  return temp;
}
void UserEventSpecifics_GaiaPasswordReuse::set_allocated_dialog_interaction(::sync_pb::UserEventSpecifics_GaiaPasswordReuse_PasswordReuseDialogInteraction* dialog_interaction) {
  delete dialog_interaction_;
  dialog_interaction_ = dialog_interaction;
  if (dialog_interaction) {
    set_has_dialog_interaction();
  } else {
    clear_has_dialog_interaction();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.GaiaPasswordReuse.dialog_interaction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserEventSpecifics::kEventTimeUsecFieldNumber;
const int UserEventSpecifics::kNavigationIdFieldNumber;
const int UserEventSpecifics::kSessionIdFieldNumber;
const int UserEventSpecifics::kTestEventFieldNumber;
const int UserEventSpecifics::kFieldTrialEventFieldNumber;
const int UserEventSpecifics::kLanguageDetectionEventFieldNumber;
const int UserEventSpecifics::kTranslationEventFieldNumber;
const int UserEventSpecifics::kUserConsentFieldNumber;
const int UserEventSpecifics::kGaiaPasswordReuseEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserEventSpecifics::UserEventSpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserEventSpecifics)
}
UserEventSpecifics::UserEventSpecifics(const UserEventSpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_time_usec_, &from.event_time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&event_time_usec_)) + sizeof(session_id_));
  clear_has_event();
  switch (from.event_case()) {
    case kTestEvent: {
      mutable_test_event()->::sync_pb::UserEventSpecifics_Test::MergeFrom(from.test_event());
      break;
    }
    case kFieldTrialEvent: {
      mutable_field_trial_event()->::sync_pb::UserEventSpecifics_FieldTrial::MergeFrom(from.field_trial_event());
      break;
    }
    case kLanguageDetectionEvent: {
      mutable_language_detection_event()->::sync_pb::UserEventSpecifics_LanguageDetection::MergeFrom(from.language_detection_event());
      break;
    }
    case kTranslationEvent: {
      mutable_translation_event()->::sync_pb::UserEventSpecifics_Translation::MergeFrom(from.translation_event());
      break;
    }
    case kUserConsent: {
      mutable_user_consent()->::sync_pb::UserEventSpecifics_UserConsent::MergeFrom(from.user_consent());
      break;
    }
    case kGaiaPasswordReuseEvent: {
      mutable_gaia_password_reuse_event()->::sync_pb::UserEventSpecifics_GaiaPasswordReuse::MergeFrom(from.gaia_password_reuse_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserEventSpecifics)
}

void UserEventSpecifics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&event_time_usec_)) + sizeof(session_id_));
  clear_has_event();
}

UserEventSpecifics::~UserEventSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.UserEventSpecifics)
  SharedDtor();
}

void UserEventSpecifics::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void UserEventSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserEventSpecifics& UserEventSpecifics::default_instance() {
  protobuf_user_5fevent_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserEventSpecifics* UserEventSpecifics::New(::google::protobuf::Arena* arena) const {
  UserEventSpecifics* n = new UserEventSpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserEventSpecifics::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:sync_pb.UserEventSpecifics)
  switch (event_case()) {
    case kTestEvent: {
      delete event_.test_event_;
      break;
    }
    case kFieldTrialEvent: {
      delete event_.field_trial_event_;
      break;
    }
    case kLanguageDetectionEvent: {
      delete event_.language_detection_event_;
      break;
    }
    case kTranslationEvent: {
      delete event_.translation_event_;
      break;
    }
    case kUserConsent: {
      delete event_.user_consent_;
      break;
    }
    case kGaiaPasswordReuseEvent: {
      delete event_.gaia_password_reuse_event_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void UserEventSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserEventSpecifics)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&event_time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&event_time_usec_)) + sizeof(session_id_));
  }
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserEventSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserEventSpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 event_time_usec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_time_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &event_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 navigation_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_navigation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &navigation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 session_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.Test test_event = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field_trial_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_language_detection_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse gaia_password_reuse_event = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaia_password_reuse_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserEventSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserEventSpecifics)
  return false;
#undef DO_
}

void UserEventSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserEventSpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 event_time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->event_time_usec(), output);
  }

  // optional int64 navigation_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->navigation_id(), output);
  }

  // optional fixed64 session_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->session_id(), output);
  }

  switch (event_case()) {
    case kTestEvent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        8, *event_.test_event_, output);
      break;
    case kFieldTrialEvent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        9, *event_.field_trial_event_, output);
      break;
    case kLanguageDetectionEvent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        10, *event_.language_detection_event_, output);
      break;
    case kTranslationEvent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        11, *event_.translation_event_, output);
      break;
    case kUserConsent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        12, *event_.user_consent_, output);
      break;
    case kGaiaPasswordReuseEvent:
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
        104, *event_.gaia_password_reuse_event_, output);
      break;
    default: ;
  }
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserEventSpecifics)
}

size_t UserEventSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserEventSpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 event_time_usec = 1;
    if (has_event_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->event_time_usec());
    }

    // optional int64 navigation_id = 2;
    if (has_navigation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->navigation_id());
    }

    // optional fixed64 session_id = 3;
    if (has_session_id()) {
      total_size += 1 + 8;
    }

  }
  switch (event_case()) {
    // optional .sync_pb.UserEventSpecifics.Test test_event = 8;
    case kTestEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.test_event_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
    case kFieldTrialEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.field_trial_event_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
    case kLanguageDetectionEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.language_detection_event_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
    case kTranslationEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.translation_event_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
    case kUserConsent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.user_consent_);
      break;
    }
    // optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse gaia_password_reuse_event = 104;
    case kGaiaPasswordReuseEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.gaia_password_reuse_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserEventSpecifics*>(&from));
}

void UserEventSpecifics::MergeFrom(const UserEventSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserEventSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      event_time_usec_ = from.event_time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      navigation_id_ = from.navigation_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.event_case()) {
    case kTestEvent: {
      mutable_test_event()->::sync_pb::UserEventSpecifics_Test::MergeFrom(from.test_event());
      break;
    }
    case kFieldTrialEvent: {
      mutable_field_trial_event()->::sync_pb::UserEventSpecifics_FieldTrial::MergeFrom(from.field_trial_event());
      break;
    }
    case kLanguageDetectionEvent: {
      mutable_language_detection_event()->::sync_pb::UserEventSpecifics_LanguageDetection::MergeFrom(from.language_detection_event());
      break;
    }
    case kTranslationEvent: {
      mutable_translation_event()->::sync_pb::UserEventSpecifics_Translation::MergeFrom(from.translation_event());
      break;
    }
    case kUserConsent: {
      mutable_user_consent()->::sync_pb::UserEventSpecifics_UserConsent::MergeFrom(from.user_consent());
      break;
    }
    case kGaiaPasswordReuseEvent: {
      mutable_gaia_password_reuse_event()->::sync_pb::UserEventSpecifics_GaiaPasswordReuse::MergeFrom(from.gaia_password_reuse_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void UserEventSpecifics::CopyFrom(const UserEventSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserEventSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventSpecifics::IsInitialized() const {
  return true;
}

void UserEventSpecifics::Swap(UserEventSpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserEventSpecifics::InternalSwap(UserEventSpecifics* other) {
  std::swap(event_time_usec_, other->event_time_usec_);
  std::swap(navigation_id_, other->navigation_id_);
  std::swap(session_id_, other->session_id_);
  std::swap(event_, other->event_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserEventSpecifics::GetTypeName() const {
  return "sync_pb.UserEventSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserEventSpecifics

// optional int64 event_time_usec = 1;
bool UserEventSpecifics::has_event_time_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserEventSpecifics::set_has_event_time_usec() {
  _has_bits_[0] |= 0x00000001u;
}
void UserEventSpecifics::clear_has_event_time_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserEventSpecifics::clear_event_time_usec() {
  event_time_usec_ = GOOGLE_LONGLONG(0);
  clear_has_event_time_usec();
}
::google::protobuf::int64 UserEventSpecifics::event_time_usec() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.event_time_usec)
  return event_time_usec_;
}
void UserEventSpecifics::set_event_time_usec(::google::protobuf::int64 value) {
  set_has_event_time_usec();
  event_time_usec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.event_time_usec)
}

// optional int64 navigation_id = 2;
bool UserEventSpecifics::has_navigation_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserEventSpecifics::set_has_navigation_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UserEventSpecifics::clear_has_navigation_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserEventSpecifics::clear_navigation_id() {
  navigation_id_ = GOOGLE_LONGLONG(0);
  clear_has_navigation_id();
}
::google::protobuf::int64 UserEventSpecifics::navigation_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.navigation_id)
  return navigation_id_;
}
void UserEventSpecifics::set_navigation_id(::google::protobuf::int64 value) {
  set_has_navigation_id();
  navigation_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.navigation_id)
}

// optional fixed64 session_id = 3;
bool UserEventSpecifics::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserEventSpecifics::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UserEventSpecifics::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserEventSpecifics::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_session_id();
}
::google::protobuf::uint64 UserEventSpecifics::session_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.session_id)
  return session_id_;
}
void UserEventSpecifics::set_session_id(::google::protobuf::uint64 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserEventSpecifics.session_id)
}

// optional .sync_pb.UserEventSpecifics.Test test_event = 8;
bool UserEventSpecifics::has_test_event() const {
  return event_case() == kTestEvent;
}
void UserEventSpecifics::set_has_test_event() {
  _oneof_case_[0] = kTestEvent;
}
void UserEventSpecifics::clear_test_event() {
  if (has_test_event()) {
    delete event_.test_event_;
    clear_has_event();
  }
}
 const ::sync_pb::UserEventSpecifics_Test& UserEventSpecifics::test_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.test_event)
  return has_test_event()
      ? *event_.test_event_
      : ::sync_pb::UserEventSpecifics_Test::default_instance();
}
::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::mutable_test_event() {
  if (!has_test_event()) {
    clear_event();
    set_has_test_event();
    event_.test_event_ = new ::sync_pb::UserEventSpecifics_Test;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.test_event)
  return event_.test_event_;
}
::sync_pb::UserEventSpecifics_Test* UserEventSpecifics::release_test_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.test_event)
  if (has_test_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_Test* temp = event_.test_event_;
    event_.test_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics::set_allocated_test_event(::sync_pb::UserEventSpecifics_Test* test_event) {
  clear_event();
  if (test_event) {
    set_has_test_event();
    event_.test_event_ = test_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.test_event)
}

// optional .sync_pb.UserEventSpecifics.FieldTrial field_trial_event = 9;
bool UserEventSpecifics::has_field_trial_event() const {
  return event_case() == kFieldTrialEvent;
}
void UserEventSpecifics::set_has_field_trial_event() {
  _oneof_case_[0] = kFieldTrialEvent;
}
void UserEventSpecifics::clear_field_trial_event() {
  if (has_field_trial_event()) {
    delete event_.field_trial_event_;
    clear_has_event();
  }
}
 const ::sync_pb::UserEventSpecifics_FieldTrial& UserEventSpecifics::field_trial_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.field_trial_event)
  return has_field_trial_event()
      ? *event_.field_trial_event_
      : ::sync_pb::UserEventSpecifics_FieldTrial::default_instance();
}
::sync_pb::UserEventSpecifics_FieldTrial* UserEventSpecifics::mutable_field_trial_event() {
  if (!has_field_trial_event()) {
    clear_event();
    set_has_field_trial_event();
    event_.field_trial_event_ = new ::sync_pb::UserEventSpecifics_FieldTrial;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.field_trial_event)
  return event_.field_trial_event_;
}
::sync_pb::UserEventSpecifics_FieldTrial* UserEventSpecifics::release_field_trial_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.field_trial_event)
  if (has_field_trial_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_FieldTrial* temp = event_.field_trial_event_;
    event_.field_trial_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics::set_allocated_field_trial_event(::sync_pb::UserEventSpecifics_FieldTrial* field_trial_event) {
  clear_event();
  if (field_trial_event) {
    set_has_field_trial_event();
    event_.field_trial_event_ = field_trial_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.field_trial_event)
}

// optional .sync_pb.UserEventSpecifics.LanguageDetection language_detection_event = 10;
bool UserEventSpecifics::has_language_detection_event() const {
  return event_case() == kLanguageDetectionEvent;
}
void UserEventSpecifics::set_has_language_detection_event() {
  _oneof_case_[0] = kLanguageDetectionEvent;
}
void UserEventSpecifics::clear_language_detection_event() {
  if (has_language_detection_event()) {
    delete event_.language_detection_event_;
    clear_has_event();
  }
}
 const ::sync_pb::UserEventSpecifics_LanguageDetection& UserEventSpecifics::language_detection_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.language_detection_event)
  return has_language_detection_event()
      ? *event_.language_detection_event_
      : ::sync_pb::UserEventSpecifics_LanguageDetection::default_instance();
}
::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::mutable_language_detection_event() {
  if (!has_language_detection_event()) {
    clear_event();
    set_has_language_detection_event();
    event_.language_detection_event_ = new ::sync_pb::UserEventSpecifics_LanguageDetection;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.language_detection_event)
  return event_.language_detection_event_;
}
::sync_pb::UserEventSpecifics_LanguageDetection* UserEventSpecifics::release_language_detection_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.language_detection_event)
  if (has_language_detection_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_LanguageDetection* temp = event_.language_detection_event_;
    event_.language_detection_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics::set_allocated_language_detection_event(::sync_pb::UserEventSpecifics_LanguageDetection* language_detection_event) {
  clear_event();
  if (language_detection_event) {
    set_has_language_detection_event();
    event_.language_detection_event_ = language_detection_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.language_detection_event)
}

// optional .sync_pb.UserEventSpecifics.Translation translation_event = 11;
bool UserEventSpecifics::has_translation_event() const {
  return event_case() == kTranslationEvent;
}
void UserEventSpecifics::set_has_translation_event() {
  _oneof_case_[0] = kTranslationEvent;
}
void UserEventSpecifics::clear_translation_event() {
  if (has_translation_event()) {
    delete event_.translation_event_;
    clear_has_event();
  }
}
 const ::sync_pb::UserEventSpecifics_Translation& UserEventSpecifics::translation_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.translation_event)
  return has_translation_event()
      ? *event_.translation_event_
      : ::sync_pb::UserEventSpecifics_Translation::default_instance();
}
::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::mutable_translation_event() {
  if (!has_translation_event()) {
    clear_event();
    set_has_translation_event();
    event_.translation_event_ = new ::sync_pb::UserEventSpecifics_Translation;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.translation_event)
  return event_.translation_event_;
}
::sync_pb::UserEventSpecifics_Translation* UserEventSpecifics::release_translation_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.translation_event)
  if (has_translation_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_Translation* temp = event_.translation_event_;
    event_.translation_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics::set_allocated_translation_event(::sync_pb::UserEventSpecifics_Translation* translation_event) {
  clear_event();
  if (translation_event) {
    set_has_translation_event();
    event_.translation_event_ = translation_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.translation_event)
}

// optional .sync_pb.UserEventSpecifics.UserConsent user_consent = 12;
bool UserEventSpecifics::has_user_consent() const {
  return event_case() == kUserConsent;
}
void UserEventSpecifics::set_has_user_consent() {
  _oneof_case_[0] = kUserConsent;
}
void UserEventSpecifics::clear_user_consent() {
  if (has_user_consent()) {
    delete event_.user_consent_;
    clear_has_event();
  }
}
 const ::sync_pb::UserEventSpecifics_UserConsent& UserEventSpecifics::user_consent() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.user_consent)
  return has_user_consent()
      ? *event_.user_consent_
      : ::sync_pb::UserEventSpecifics_UserConsent::default_instance();
}
::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::mutable_user_consent() {
  if (!has_user_consent()) {
    clear_event();
    set_has_user_consent();
    event_.user_consent_ = new ::sync_pb::UserEventSpecifics_UserConsent;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.user_consent)
  return event_.user_consent_;
}
::sync_pb::UserEventSpecifics_UserConsent* UserEventSpecifics::release_user_consent() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.user_consent)
  if (has_user_consent()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_UserConsent* temp = event_.user_consent_;
    event_.user_consent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics::set_allocated_user_consent(::sync_pb::UserEventSpecifics_UserConsent* user_consent) {
  clear_event();
  if (user_consent) {
    set_has_user_consent();
    event_.user_consent_ = user_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.user_consent)
}

// optional .sync_pb.UserEventSpecifics.GaiaPasswordReuse gaia_password_reuse_event = 104;
bool UserEventSpecifics::has_gaia_password_reuse_event() const {
  return event_case() == kGaiaPasswordReuseEvent;
}
void UserEventSpecifics::set_has_gaia_password_reuse_event() {
  _oneof_case_[0] = kGaiaPasswordReuseEvent;
}
void UserEventSpecifics::clear_gaia_password_reuse_event() {
  if (has_gaia_password_reuse_event()) {
    delete event_.gaia_password_reuse_event_;
    clear_has_event();
  }
}
 const ::sync_pb::UserEventSpecifics_GaiaPasswordReuse& UserEventSpecifics::gaia_password_reuse_event() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  return has_gaia_password_reuse_event()
      ? *event_.gaia_password_reuse_event_
      : ::sync_pb::UserEventSpecifics_GaiaPasswordReuse::default_instance();
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse* UserEventSpecifics::mutable_gaia_password_reuse_event() {
  if (!has_gaia_password_reuse_event()) {
    clear_event();
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = new ::sync_pb::UserEventSpecifics_GaiaPasswordReuse;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  return event_.gaia_password_reuse_event_;
}
::sync_pb::UserEventSpecifics_GaiaPasswordReuse* UserEventSpecifics::release_gaia_password_reuse_event() {
  // @@protoc_insertion_point(field_release:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
  if (has_gaia_password_reuse_event()) {
    clear_has_event();
    ::sync_pb::UserEventSpecifics_GaiaPasswordReuse* temp = event_.gaia_password_reuse_event_;
    event_.gaia_password_reuse_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UserEventSpecifics::set_allocated_gaia_password_reuse_event(::sync_pb::UserEventSpecifics_GaiaPasswordReuse* gaia_password_reuse_event) {
  clear_event();
  if (gaia_password_reuse_event) {
    set_has_gaia_password_reuse_event();
    event_.gaia_password_reuse_event_ = gaia_password_reuse_event;
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserEventSpecifics.gaia_password_reuse_event)
}

bool UserEventSpecifics::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
void UserEventSpecifics::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
UserEventSpecifics::EventCase UserEventSpecifics::event_case() const {
  return UserEventSpecifics::EventCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
