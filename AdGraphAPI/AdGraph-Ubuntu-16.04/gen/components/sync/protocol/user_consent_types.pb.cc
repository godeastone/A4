// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_consent_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_consent_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class UserConsentTypes_ArcBackupAndRestoreConsentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserConsentTypes_ArcBackupAndRestoreConsent> {
} _UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_;
class UserConsentTypes_ArcGoogleLocationServiceConsentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserConsentTypes_ArcGoogleLocationServiceConsent> {
} _UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_;
class UserConsentTypes_ArcMetricsAndUsageConsentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserConsentTypes_ArcMetricsAndUsageConsent> {
} _UserConsentTypes_ArcMetricsAndUsageConsent_default_instance_;
class UserConsentTypes_ArcPlayTermsOfServiceConsentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserConsentTypes_ArcPlayTermsOfServiceConsent> {
} _UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_;
class UserConsentTypes_SyncConsentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserConsentTypes_SyncConsent> {
} _UserConsentTypes_SyncConsent_default_instance_;
class UserConsentTypesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserConsentTypes> {
} _UserConsentTypes_default_instance_;

namespace protobuf_user_5fconsent_5ftypes_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_.Shutdown();
  _UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_.Shutdown();
  _UserConsentTypes_ArcMetricsAndUsageConsent_default_instance_.Shutdown();
  _UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_.Shutdown();
  _UserConsentTypes_SyncConsent_default_instance_.Shutdown();
  _UserConsentTypes_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UserConsentTypes_ArcBackupAndRestoreConsent_default_instance_.DefaultConstruct();
  _UserConsentTypes_ArcGoogleLocationServiceConsent_default_instance_.DefaultConstruct();
  _UserConsentTypes_ArcMetricsAndUsageConsent_default_instance_.DefaultConstruct();
  _UserConsentTypes_ArcPlayTermsOfServiceConsent_default_instance_.DefaultConstruct();
  _UserConsentTypes_SyncConsent_default_instance_.DefaultConstruct();
  _UserConsentTypes_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_user_5fconsent_5ftypes_2eproto

bool UserConsentTypes_ConsentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserConsentTypes_ConsentStatus UserConsentTypes::CONSENT_STATUS_UNSPECIFIED;
const UserConsentTypes_ConsentStatus UserConsentTypes::NOT_GIVEN;
const UserConsentTypes_ConsentStatus UserConsentTypes::GIVEN;
const UserConsentTypes_ConsentStatus UserConsentTypes::ConsentStatus_MIN;
const UserConsentTypes_ConsentStatus UserConsentTypes::ConsentStatus_MAX;
const int UserConsentTypes::ConsentStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserConsentTypes_ArcBackupAndRestoreConsent::kDescriptionGrdIdsFieldNumber;
const int UserConsentTypes_ArcBackupAndRestoreConsent::kConfirmationGrdIdFieldNumber;
const int UserConsentTypes_ArcBackupAndRestoreConsent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserConsentTypes_ArcBackupAndRestoreConsent::UserConsentTypes_ArcBackupAndRestoreConsent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
}
UserConsentTypes_ArcBackupAndRestoreConsent::UserConsentTypes_ArcBackupAndRestoreConsent(const UserConsentTypes_ArcBackupAndRestoreConsent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      description_grd_ids_(from.description_grd_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confirmation_grd_id_, &from.confirmation_grd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
}

void UserConsentTypes_ArcBackupAndRestoreConsent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&confirmation_grd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
}

UserConsentTypes_ArcBackupAndRestoreConsent::~UserConsentTypes_ArcBackupAndRestoreConsent() {
  // @@protoc_insertion_point(destructor:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
  SharedDtor();
}

void UserConsentTypes_ArcBackupAndRestoreConsent::SharedDtor() {
}

void UserConsentTypes_ArcBackupAndRestoreConsent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConsentTypes_ArcBackupAndRestoreConsent& UserConsentTypes_ArcBackupAndRestoreConsent::default_instance() {
  protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserConsentTypes_ArcBackupAndRestoreConsent* UserConsentTypes_ArcBackupAndRestoreConsent::New(::google::protobuf::Arena* arena) const {
  UserConsentTypes_ArcBackupAndRestoreConsent* n = new UserConsentTypes_ArcBackupAndRestoreConsent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserConsentTypes_ArcBackupAndRestoreConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
  description_grd_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&confirmation_grd_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserConsentTypes_ArcBackupAndRestoreConsent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 description_grd_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_description_grd_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_description_grd_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 confirmation_grd_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_confirmation_grd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmation_grd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
  return false;
#undef DO_
}

void UserConsentTypes_ArcBackupAndRestoreConsent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 description_grd_ids = 1;
  for (int i = 0, n = this->description_grd_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->description_grd_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 confirmation_grd_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confirmation_grd_id(), output);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
}

size_t UserConsentTypes_ArcBackupAndRestoreConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 description_grd_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->description_grd_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->description_grd_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 confirmation_grd_id = 2;
    if (has_confirmation_grd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confirmation_grd_id());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConsentTypes_ArcBackupAndRestoreConsent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConsentTypes_ArcBackupAndRestoreConsent*>(&from));
}

void UserConsentTypes_ArcBackupAndRestoreConsent::MergeFrom(const UserConsentTypes_ArcBackupAndRestoreConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_grd_ids_.MergeFrom(from.description_grd_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserConsentTypes_ArcBackupAndRestoreConsent::CopyFrom(const UserConsentTypes_ArcBackupAndRestoreConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConsentTypes_ArcBackupAndRestoreConsent::IsInitialized() const {
  return true;
}

void UserConsentTypes_ArcBackupAndRestoreConsent::Swap(UserConsentTypes_ArcBackupAndRestoreConsent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserConsentTypes_ArcBackupAndRestoreConsent::InternalSwap(UserConsentTypes_ArcBackupAndRestoreConsent* other) {
  description_grd_ids_.InternalSwap(&other->description_grd_ids_);
  std::swap(confirmation_grd_id_, other->confirmation_grd_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserConsentTypes_ArcBackupAndRestoreConsent::GetTypeName() const {
  return "sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserConsentTypes_ArcBackupAndRestoreConsent

// repeated int32 description_grd_ids = 1;
int UserConsentTypes_ArcBackupAndRestoreConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
void UserConsentTypes_ArcBackupAndRestoreConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
::google::protobuf::int32 UserConsentTypes_ArcBackupAndRestoreConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
void UserConsentTypes_ArcBackupAndRestoreConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
}
void UserConsentTypes_ArcBackupAndRestoreConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentTypes_ArcBackupAndRestoreConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
  return description_grd_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentTypes_ArcBackupAndRestoreConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
bool UserConsentTypes_ArcBackupAndRestoreConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserConsentTypes_ArcBackupAndRestoreConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserConsentTypes_ArcBackupAndRestoreConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserConsentTypes_ArcBackupAndRestoreConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
::google::protobuf::int32 UserConsentTypes_ArcBackupAndRestoreConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
void UserConsentTypes_ArcBackupAndRestoreConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
bool UserConsentTypes_ArcBackupAndRestoreConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserConsentTypes_ArcBackupAndRestoreConsent::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void UserConsentTypes_ArcBackupAndRestoreConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserConsentTypes_ArcBackupAndRestoreConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcBackupAndRestoreConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
void UserConsentTypes_ArcBackupAndRestoreConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserConsentTypes_ArcGoogleLocationServiceConsent::kDescriptionGrdIdsFieldNumber;
const int UserConsentTypes_ArcGoogleLocationServiceConsent::kConfirmationGrdIdFieldNumber;
const int UserConsentTypes_ArcGoogleLocationServiceConsent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserConsentTypes_ArcGoogleLocationServiceConsent::UserConsentTypes_ArcGoogleLocationServiceConsent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
}
UserConsentTypes_ArcGoogleLocationServiceConsent::UserConsentTypes_ArcGoogleLocationServiceConsent(const UserConsentTypes_ArcGoogleLocationServiceConsent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      description_grd_ids_(from.description_grd_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confirmation_grd_id_, &from.confirmation_grd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
}

void UserConsentTypes_ArcGoogleLocationServiceConsent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&confirmation_grd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
}

UserConsentTypes_ArcGoogleLocationServiceConsent::~UserConsentTypes_ArcGoogleLocationServiceConsent() {
  // @@protoc_insertion_point(destructor:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
  SharedDtor();
}

void UserConsentTypes_ArcGoogleLocationServiceConsent::SharedDtor() {
}

void UserConsentTypes_ArcGoogleLocationServiceConsent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConsentTypes_ArcGoogleLocationServiceConsent& UserConsentTypes_ArcGoogleLocationServiceConsent::default_instance() {
  protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserConsentTypes_ArcGoogleLocationServiceConsent* UserConsentTypes_ArcGoogleLocationServiceConsent::New(::google::protobuf::Arena* arena) const {
  UserConsentTypes_ArcGoogleLocationServiceConsent* n = new UserConsentTypes_ArcGoogleLocationServiceConsent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserConsentTypes_ArcGoogleLocationServiceConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
  description_grd_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&confirmation_grd_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserConsentTypes_ArcGoogleLocationServiceConsent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 description_grd_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_description_grd_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_description_grd_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 confirmation_grd_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_confirmation_grd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmation_grd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
  return false;
#undef DO_
}

void UserConsentTypes_ArcGoogleLocationServiceConsent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 description_grd_ids = 1;
  for (int i = 0, n = this->description_grd_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->description_grd_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 confirmation_grd_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confirmation_grd_id(), output);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
}

size_t UserConsentTypes_ArcGoogleLocationServiceConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 description_grd_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->description_grd_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->description_grd_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 confirmation_grd_id = 2;
    if (has_confirmation_grd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confirmation_grd_id());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConsentTypes_ArcGoogleLocationServiceConsent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConsentTypes_ArcGoogleLocationServiceConsent*>(&from));
}

void UserConsentTypes_ArcGoogleLocationServiceConsent::MergeFrom(const UserConsentTypes_ArcGoogleLocationServiceConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_grd_ids_.MergeFrom(from.description_grd_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserConsentTypes_ArcGoogleLocationServiceConsent::CopyFrom(const UserConsentTypes_ArcGoogleLocationServiceConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConsentTypes_ArcGoogleLocationServiceConsent::IsInitialized() const {
  return true;
}

void UserConsentTypes_ArcGoogleLocationServiceConsent::Swap(UserConsentTypes_ArcGoogleLocationServiceConsent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::InternalSwap(UserConsentTypes_ArcGoogleLocationServiceConsent* other) {
  description_grd_ids_.InternalSwap(&other->description_grd_ids_);
  std::swap(confirmation_grd_id_, other->confirmation_grd_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserConsentTypes_ArcGoogleLocationServiceConsent::GetTypeName() const {
  return "sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserConsentTypes_ArcGoogleLocationServiceConsent

// repeated int32 description_grd_ids = 1;
int UserConsentTypes_ArcGoogleLocationServiceConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
::google::protobuf::int32 UserConsentTypes_ArcGoogleLocationServiceConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentTypes_ArcGoogleLocationServiceConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
  return description_grd_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentTypes_ArcGoogleLocationServiceConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
bool UserConsentTypes_ArcGoogleLocationServiceConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
::google::protobuf::int32 UserConsentTypes_ArcGoogleLocationServiceConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
bool UserConsentTypes_ArcGoogleLocationServiceConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcGoogleLocationServiceConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
void UserConsentTypes_ArcGoogleLocationServiceConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserConsentTypes_ArcMetricsAndUsageConsent::kDescriptionGrdIdsFieldNumber;
const int UserConsentTypes_ArcMetricsAndUsageConsent::kConfirmationGrdIdFieldNumber;
const int UserConsentTypes_ArcMetricsAndUsageConsent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserConsentTypes_ArcMetricsAndUsageConsent::UserConsentTypes_ArcMetricsAndUsageConsent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
}
UserConsentTypes_ArcMetricsAndUsageConsent::UserConsentTypes_ArcMetricsAndUsageConsent(const UserConsentTypes_ArcMetricsAndUsageConsent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      description_grd_ids_(from.description_grd_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confirmation_grd_id_, &from.confirmation_grd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
}

void UserConsentTypes_ArcMetricsAndUsageConsent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&confirmation_grd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
}

UserConsentTypes_ArcMetricsAndUsageConsent::~UserConsentTypes_ArcMetricsAndUsageConsent() {
  // @@protoc_insertion_point(destructor:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
  SharedDtor();
}

void UserConsentTypes_ArcMetricsAndUsageConsent::SharedDtor() {
}

void UserConsentTypes_ArcMetricsAndUsageConsent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConsentTypes_ArcMetricsAndUsageConsent& UserConsentTypes_ArcMetricsAndUsageConsent::default_instance() {
  protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserConsentTypes_ArcMetricsAndUsageConsent* UserConsentTypes_ArcMetricsAndUsageConsent::New(::google::protobuf::Arena* arena) const {
  UserConsentTypes_ArcMetricsAndUsageConsent* n = new UserConsentTypes_ArcMetricsAndUsageConsent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserConsentTypes_ArcMetricsAndUsageConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
  description_grd_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&confirmation_grd_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserConsentTypes_ArcMetricsAndUsageConsent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 description_grd_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_description_grd_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_description_grd_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 confirmation_grd_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_confirmation_grd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmation_grd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
  return false;
#undef DO_
}

void UserConsentTypes_ArcMetricsAndUsageConsent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 description_grd_ids = 1;
  for (int i = 0, n = this->description_grd_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->description_grd_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 confirmation_grd_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confirmation_grd_id(), output);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
}

size_t UserConsentTypes_ArcMetricsAndUsageConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 description_grd_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->description_grd_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->description_grd_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 confirmation_grd_id = 2;
    if (has_confirmation_grd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confirmation_grd_id());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConsentTypes_ArcMetricsAndUsageConsent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConsentTypes_ArcMetricsAndUsageConsent*>(&from));
}

void UserConsentTypes_ArcMetricsAndUsageConsent::MergeFrom(const UserConsentTypes_ArcMetricsAndUsageConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_grd_ids_.MergeFrom(from.description_grd_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserConsentTypes_ArcMetricsAndUsageConsent::CopyFrom(const UserConsentTypes_ArcMetricsAndUsageConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConsentTypes_ArcMetricsAndUsageConsent::IsInitialized() const {
  return true;
}

void UserConsentTypes_ArcMetricsAndUsageConsent::Swap(UserConsentTypes_ArcMetricsAndUsageConsent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserConsentTypes_ArcMetricsAndUsageConsent::InternalSwap(UserConsentTypes_ArcMetricsAndUsageConsent* other) {
  description_grd_ids_.InternalSwap(&other->description_grd_ids_);
  std::swap(confirmation_grd_id_, other->confirmation_grd_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserConsentTypes_ArcMetricsAndUsageConsent::GetTypeName() const {
  return "sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserConsentTypes_ArcMetricsAndUsageConsent

// repeated int32 description_grd_ids = 1;
int UserConsentTypes_ArcMetricsAndUsageConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
void UserConsentTypes_ArcMetricsAndUsageConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
::google::protobuf::int32 UserConsentTypes_ArcMetricsAndUsageConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
void UserConsentTypes_ArcMetricsAndUsageConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
}
void UserConsentTypes_ArcMetricsAndUsageConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentTypes_ArcMetricsAndUsageConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
  return description_grd_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentTypes_ArcMetricsAndUsageConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
bool UserConsentTypes_ArcMetricsAndUsageConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserConsentTypes_ArcMetricsAndUsageConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserConsentTypes_ArcMetricsAndUsageConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserConsentTypes_ArcMetricsAndUsageConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
::google::protobuf::int32 UserConsentTypes_ArcMetricsAndUsageConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
void UserConsentTypes_ArcMetricsAndUsageConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
bool UserConsentTypes_ArcMetricsAndUsageConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserConsentTypes_ArcMetricsAndUsageConsent::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void UserConsentTypes_ArcMetricsAndUsageConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserConsentTypes_ArcMetricsAndUsageConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcMetricsAndUsageConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
void UserConsentTypes_ArcMetricsAndUsageConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcMetricsAndUsageConsent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserConsentTypes_ArcPlayTermsOfServiceConsent::kPlayTermsOfServiceTextLengthFieldNumber;
const int UserConsentTypes_ArcPlayTermsOfServiceConsent::kPlayTermsOfServiceHashFieldNumber;
const int UserConsentTypes_ArcPlayTermsOfServiceConsent::kConfirmationGrdIdFieldNumber;
const int UserConsentTypes_ArcPlayTermsOfServiceConsent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserConsentTypes_ArcPlayTermsOfServiceConsent::UserConsentTypes_ArcPlayTermsOfServiceConsent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
}
UserConsentTypes_ArcPlayTermsOfServiceConsent::UserConsentTypes_ArcPlayTermsOfServiceConsent(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  play_terms_of_service_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_play_terms_of_service_hash()) {
    play_terms_of_service_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.play_terms_of_service_hash_);
  }
  ::memcpy(&play_terms_of_service_text_length_, &from.play_terms_of_service_text_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&play_terms_of_service_text_length_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
}

void UserConsentTypes_ArcPlayTermsOfServiceConsent::SharedCtor() {
  _cached_size_ = 0;
  play_terms_of_service_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&play_terms_of_service_text_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&play_terms_of_service_text_length_)) + sizeof(status_));
}

UserConsentTypes_ArcPlayTermsOfServiceConsent::~UserConsentTypes_ArcPlayTermsOfServiceConsent() {
  // @@protoc_insertion_point(destructor:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
  SharedDtor();
}

void UserConsentTypes_ArcPlayTermsOfServiceConsent::SharedDtor() {
  play_terms_of_service_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserConsentTypes_ArcPlayTermsOfServiceConsent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConsentTypes_ArcPlayTermsOfServiceConsent& UserConsentTypes_ArcPlayTermsOfServiceConsent::default_instance() {
  protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserConsentTypes_ArcPlayTermsOfServiceConsent* UserConsentTypes_ArcPlayTermsOfServiceConsent::New(::google::protobuf::Arena* arena) const {
  UserConsentTypes_ArcPlayTermsOfServiceConsent* n = new UserConsentTypes_ArcPlayTermsOfServiceConsent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserConsentTypes_ArcPlayTermsOfServiceConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
  if (has_play_terms_of_service_hash()) {
    GOOGLE_DCHECK(!play_terms_of_service_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*play_terms_of_service_hash_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&play_terms_of_service_text_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&play_terms_of_service_text_length_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserConsentTypes_ArcPlayTermsOfServiceConsent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 play_terms_of_service_text_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_play_terms_of_service_text_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_terms_of_service_text_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes play_terms_of_service_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_play_terms_of_service_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 confirmation_grd_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_confirmation_grd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmation_grd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
  return false;
#undef DO_
}

void UserConsentTypes_ArcPlayTermsOfServiceConsent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 play_terms_of_service_text_length = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->play_terms_of_service_text_length(), output);
  }

  // optional bytes play_terms_of_service_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->play_terms_of_service_hash(), output);
  }

  // optional int32 confirmation_grd_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->confirmation_grd_id(), output);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
}

size_t UserConsentTypes_ArcPlayTermsOfServiceConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes play_terms_of_service_hash = 2;
    if (has_play_terms_of_service_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->play_terms_of_service_hash());
    }

    // optional int32 play_terms_of_service_text_length = 1;
    if (has_play_terms_of_service_text_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_terms_of_service_text_length());
    }

    // optional int32 confirmation_grd_id = 3;
    if (has_confirmation_grd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confirmation_grd_id());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConsentTypes_ArcPlayTermsOfServiceConsent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConsentTypes_ArcPlayTermsOfServiceConsent*>(&from));
}

void UserConsentTypes_ArcPlayTermsOfServiceConsent::MergeFrom(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_play_terms_of_service_hash();
      play_terms_of_service_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.play_terms_of_service_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      play_terms_of_service_text_length_ = from.play_terms_of_service_text_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserConsentTypes_ArcPlayTermsOfServiceConsent::CopyFrom(const UserConsentTypes_ArcPlayTermsOfServiceConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConsentTypes_ArcPlayTermsOfServiceConsent::IsInitialized() const {
  return true;
}

void UserConsentTypes_ArcPlayTermsOfServiceConsent::Swap(UserConsentTypes_ArcPlayTermsOfServiceConsent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::InternalSwap(UserConsentTypes_ArcPlayTermsOfServiceConsent* other) {
  play_terms_of_service_hash_.Swap(&other->play_terms_of_service_hash_);
  std::swap(play_terms_of_service_text_length_, other->play_terms_of_service_text_length_);
  std::swap(confirmation_grd_id_, other->confirmation_grd_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserConsentTypes_ArcPlayTermsOfServiceConsent::GetTypeName() const {
  return "sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserConsentTypes_ArcPlayTermsOfServiceConsent

// optional int32 play_terms_of_service_text_length = 1;
bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_play_terms_of_service_text_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_has_play_terms_of_service_text_length() {
  _has_bits_[0] |= 0x00000002u;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_has_play_terms_of_service_text_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_play_terms_of_service_text_length() {
  play_terms_of_service_text_length_ = 0;
  clear_has_play_terms_of_service_text_length();
}
::google::protobuf::int32 UserConsentTypes_ArcPlayTermsOfServiceConsent::play_terms_of_service_text_length() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_text_length)
  return play_terms_of_service_text_length_;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_text_length(::google::protobuf::int32 value) {
  set_has_play_terms_of_service_text_length();
  play_terms_of_service_text_length_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_text_length)
}

// optional bytes play_terms_of_service_hash = 2;
bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_play_terms_of_service_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_has_play_terms_of_service_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_has_play_terms_of_service_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_play_terms_of_service_hash() {
  play_terms_of_service_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_play_terms_of_service_hash();
}
const ::std::string& UserConsentTypes_ArcPlayTermsOfServiceConsent::play_terms_of_service_hash() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
  return play_terms_of_service_hash_.GetNoArena();
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(const ::std::string& value) {
  set_has_play_terms_of_service_hash();
  play_terms_of_service_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
#if LANG_CXX11
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(::std::string&& value) {
  set_has_play_terms_of_service_hash();
  play_terms_of_service_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
#endif
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_play_terms_of_service_hash();
  play_terms_of_service_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_play_terms_of_service_hash(const void* value, size_t size) {
  set_has_play_terms_of_service_hash();
  play_terms_of_service_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}
::std::string* UserConsentTypes_ArcPlayTermsOfServiceConsent::mutable_play_terms_of_service_hash() {
  set_has_play_terms_of_service_hash();
  // @@protoc_insertion_point(field_mutable:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
  return play_terms_of_service_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserConsentTypes_ArcPlayTermsOfServiceConsent::release_play_terms_of_service_hash() {
  // @@protoc_insertion_point(field_release:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
  clear_has_play_terms_of_service_hash();
  return play_terms_of_service_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_allocated_play_terms_of_service_hash(::std::string* play_terms_of_service_hash) {
  if (play_terms_of_service_hash != NULL) {
    set_has_play_terms_of_service_hash();
  } else {
    clear_has_play_terms_of_service_hash();
  }
  play_terms_of_service_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), play_terms_of_service_hash);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.play_terms_of_service_hash)
}

// optional int32 confirmation_grd_id = 3;
bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
::google::protobuf::int32 UserConsentTypes_ArcPlayTermsOfServiceConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 4;
bool UserConsentTypes_ArcPlayTermsOfServiceConsent::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_ArcPlayTermsOfServiceConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
void UserConsentTypes_ArcPlayTermsOfServiceConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserConsentTypes_SyncConsent::kDescriptionGrdIdsFieldNumber;
const int UserConsentTypes_SyncConsent::kConfirmationGrdIdFieldNumber;
const int UserConsentTypes_SyncConsent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserConsentTypes_SyncConsent::UserConsentTypes_SyncConsent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserConsentTypes.SyncConsent)
}
UserConsentTypes_SyncConsent::UserConsentTypes_SyncConsent(const UserConsentTypes_SyncConsent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      description_grd_ids_(from.description_grd_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confirmation_grd_id_, &from.confirmation_grd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserConsentTypes.SyncConsent)
}

void UserConsentTypes_SyncConsent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&confirmation_grd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
}

UserConsentTypes_SyncConsent::~UserConsentTypes_SyncConsent() {
  // @@protoc_insertion_point(destructor:sync_pb.UserConsentTypes.SyncConsent)
  SharedDtor();
}

void UserConsentTypes_SyncConsent::SharedDtor() {
}

void UserConsentTypes_SyncConsent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConsentTypes_SyncConsent& UserConsentTypes_SyncConsent::default_instance() {
  protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserConsentTypes_SyncConsent* UserConsentTypes_SyncConsent::New(::google::protobuf::Arena* arena) const {
  UserConsentTypes_SyncConsent* n = new UserConsentTypes_SyncConsent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserConsentTypes_SyncConsent::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserConsentTypes.SyncConsent)
  description_grd_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&confirmation_grd_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&confirmation_grd_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserConsentTypes_SyncConsent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserConsentTypes.SyncConsent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 description_grd_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_description_grd_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_description_grd_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 confirmation_grd_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_confirmation_grd_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmation_grd_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value)) {
            set_status(static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserConsentTypes.SyncConsent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserConsentTypes.SyncConsent)
  return false;
#undef DO_
}

void UserConsentTypes_SyncConsent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserConsentTypes.SyncConsent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 description_grd_ids = 1;
  for (int i = 0, n = this->description_grd_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->description_grd_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 confirmation_grd_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confirmation_grd_id(), output);
  }

  // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserConsentTypes.SyncConsent)
}

size_t UserConsentTypes_SyncConsent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserConsentTypes.SyncConsent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 description_grd_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->description_grd_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->description_grd_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 confirmation_grd_id = 2;
    if (has_confirmation_grd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confirmation_grd_id());
    }

    // optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConsentTypes_SyncConsent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConsentTypes_SyncConsent*>(&from));
}

void UserConsentTypes_SyncConsent::MergeFrom(const UserConsentTypes_SyncConsent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserConsentTypes.SyncConsent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  description_grd_ids_.MergeFrom(from.description_grd_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      confirmation_grd_id_ = from.confirmation_grd_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserConsentTypes_SyncConsent::CopyFrom(const UserConsentTypes_SyncConsent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserConsentTypes.SyncConsent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConsentTypes_SyncConsent::IsInitialized() const {
  return true;
}

void UserConsentTypes_SyncConsent::Swap(UserConsentTypes_SyncConsent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserConsentTypes_SyncConsent::InternalSwap(UserConsentTypes_SyncConsent* other) {
  description_grd_ids_.InternalSwap(&other->description_grd_ids_);
  std::swap(confirmation_grd_id_, other->confirmation_grd_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserConsentTypes_SyncConsent::GetTypeName() const {
  return "sync_pb.UserConsentTypes.SyncConsent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserConsentTypes_SyncConsent

// repeated int32 description_grd_ids = 1;
int UserConsentTypes_SyncConsent::description_grd_ids_size() const {
  return description_grd_ids_.size();
}
void UserConsentTypes_SyncConsent::clear_description_grd_ids() {
  description_grd_ids_.Clear();
}
::google::protobuf::int32 UserConsentTypes_SyncConsent::description_grd_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
  return description_grd_ids_.Get(index);
}
void UserConsentTypes_SyncConsent::set_description_grd_ids(int index, ::google::protobuf::int32 value) {
  description_grd_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
}
void UserConsentTypes_SyncConsent::add_description_grd_ids(::google::protobuf::int32 value) {
  description_grd_ids_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserConsentTypes_SyncConsent::description_grd_ids() const {
  // @@protoc_insertion_point(field_list:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
  return description_grd_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserConsentTypes_SyncConsent::mutable_description_grd_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.UserConsentTypes.SyncConsent.description_grd_ids)
  return &description_grd_ids_;
}

// optional int32 confirmation_grd_id = 2;
bool UserConsentTypes_SyncConsent::has_confirmation_grd_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserConsentTypes_SyncConsent::set_has_confirmation_grd_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserConsentTypes_SyncConsent::clear_has_confirmation_grd_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserConsentTypes_SyncConsent::clear_confirmation_grd_id() {
  confirmation_grd_id_ = 0;
  clear_has_confirmation_grd_id();
}
::google::protobuf::int32 UserConsentTypes_SyncConsent::confirmation_grd_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.SyncConsent.confirmation_grd_id)
  return confirmation_grd_id_;
}
void UserConsentTypes_SyncConsent::set_confirmation_grd_id(::google::protobuf::int32 value) {
  set_has_confirmation_grd_id();
  confirmation_grd_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.SyncConsent.confirmation_grd_id)
}

// optional .sync_pb.UserConsentTypes.ConsentStatus status = 3;
bool UserConsentTypes_SyncConsent::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserConsentTypes_SyncConsent::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void UserConsentTypes_SyncConsent::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserConsentTypes_SyncConsent::clear_status() {
  status_ = 0;
  clear_has_status();
}
::sync_pb::UserConsentTypes_ConsentStatus UserConsentTypes_SyncConsent::status() const {
  // @@protoc_insertion_point(field_get:sync_pb.UserConsentTypes.SyncConsent.status)
  return static_cast< ::sync_pb::UserConsentTypes_ConsentStatus >(status_);
}
void UserConsentTypes_SyncConsent::set_status(::sync_pb::UserConsentTypes_ConsentStatus value) {
  assert(::sync_pb::UserConsentTypes_ConsentStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.UserConsentTypes.SyncConsent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserConsentTypes::UserConsentTypes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.UserConsentTypes)
}
UserConsentTypes::UserConsentTypes(const UserConsentTypes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.UserConsentTypes)
}

void UserConsentTypes::SharedCtor() {
  _cached_size_ = 0;
}

UserConsentTypes::~UserConsentTypes() {
  // @@protoc_insertion_point(destructor:sync_pb.UserConsentTypes)
  SharedDtor();
}

void UserConsentTypes::SharedDtor() {
}

void UserConsentTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserConsentTypes& UserConsentTypes::default_instance() {
  protobuf_user_5fconsent_5ftypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserConsentTypes* UserConsentTypes::New(::google::protobuf::Arena* arena) const {
  UserConsentTypes* n = new UserConsentTypes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserConsentTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.UserConsentTypes)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserConsentTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.UserConsentTypes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.UserConsentTypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.UserConsentTypes)
  return false;
#undef DO_
}

void UserConsentTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.UserConsentTypes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.UserConsentTypes)
}

size_t UserConsentTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.UserConsentTypes)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserConsentTypes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserConsentTypes*>(&from));
}

void UserConsentTypes::MergeFrom(const UserConsentTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.UserConsentTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserConsentTypes::CopyFrom(const UserConsentTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.UserConsentTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserConsentTypes::IsInitialized() const {
  return true;
}

void UserConsentTypes::Swap(UserConsentTypes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserConsentTypes::InternalSwap(UserConsentTypes* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserConsentTypes::GetTypeName() const {
  return "sync_pb.UserConsentTypes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserConsentTypes

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
