// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nigori_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nigori_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class NigoriKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NigoriKey> {
} _NigoriKey_default_instance_;
class NigoriKeyBagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NigoriKeyBag> {
} _NigoriKeyBag_default_instance_;
class NigoriSpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NigoriSpecifics> {
} _NigoriSpecifics_default_instance_;

namespace protobuf_nigori_5fspecifics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _NigoriKey_default_instance_.Shutdown();
  _NigoriKeyBag_default_instance_.Shutdown();
  _NigoriSpecifics_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sync_pb::protobuf_encryption_2eproto::InitDefaults();
  _NigoriKey_default_instance_.DefaultConstruct();
  _NigoriKeyBag_default_instance_.DefaultConstruct();
  _NigoriSpecifics_default_instance_.DefaultConstruct();
  _NigoriSpecifics_default_instance_.get_mutable()->encryption_keybag_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
  _NigoriSpecifics_default_instance_.get_mutable()->keystore_decryptor_token_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::sync_pb::protobuf_encryption_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_nigori_5fspecifics_2eproto

bool NigoriSpecifics_PassphraseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NigoriSpecifics_PassphraseType NigoriSpecifics::UNKNOWN;
const NigoriSpecifics_PassphraseType NigoriSpecifics::IMPLICIT_PASSPHRASE;
const NigoriSpecifics_PassphraseType NigoriSpecifics::KEYSTORE_PASSPHRASE;
const NigoriSpecifics_PassphraseType NigoriSpecifics::FROZEN_IMPLICIT_PASSPHRASE;
const NigoriSpecifics_PassphraseType NigoriSpecifics::CUSTOM_PASSPHRASE;
const NigoriSpecifics_PassphraseType NigoriSpecifics::PassphraseType_MIN;
const NigoriSpecifics_PassphraseType NigoriSpecifics::PassphraseType_MAX;
const int NigoriSpecifics::PassphraseType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NigoriKey::kNameFieldNumber;
const int NigoriKey::kUserKeyFieldNumber;
const int NigoriKey::kEncryptionKeyFieldNumber;
const int NigoriKey::kMacKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NigoriKey::NigoriKey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_nigori_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.NigoriKey)
}
NigoriKey::NigoriKey(const NigoriKey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  user_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_key()) {
    user_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_key_);
  }
  encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encryption_key()) {
    encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
  }
  mac_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mac_key()) {
    mac_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_key_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriKey)
}

void NigoriKey::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NigoriKey::~NigoriKey() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriKey)
  SharedDtor();
}

void NigoriKey::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryption_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NigoriKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NigoriKey& NigoriKey::default_instance() {
  protobuf_nigori_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

NigoriKey* NigoriKey::New(::google::protobuf::Arena* arena) const {
  NigoriKey* n = new NigoriKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NigoriKey::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriKey)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_user_key()) {
      GOOGLE_DCHECK(!user_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_encryption_key()) {
      GOOGLE_DCHECK(!encryption_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*encryption_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_mac_key()) {
      GOOGLE_DCHECK(!mac_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mac_key_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NigoriKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.NigoriKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes user_key = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encryption_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryption_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes mac_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.NigoriKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.NigoriKey)
  return false;
#undef DO_
}

void NigoriKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.NigoriKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes user_key = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_key(), output);
  }

  // optional bytes encryption_key = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encryption_key(), output);
  }

  // optional bytes mac_key = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->mac_key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.NigoriKey)
}

size_t NigoriKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriKey)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes user_key = 2 [deprecated = true];
    if (has_user_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_key());
    }

    // optional bytes encryption_key = 3;
    if (has_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryption_key());
    }

    // optional bytes mac_key = 4;
    if (has_mac_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mac_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NigoriKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NigoriKey*>(&from));
}

void NigoriKey::MergeFrom(const NigoriKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_key();
      user_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_encryption_key();
      encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encryption_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_mac_key();
      mac_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_key_);
    }
  }
}

void NigoriKey::CopyFrom(const NigoriKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriKey::IsInitialized() const {
  return true;
}

void NigoriKey::Swap(NigoriKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NigoriKey::InternalSwap(NigoriKey* other) {
  name_.Swap(&other->name_);
  user_key_.Swap(&other->user_key_);
  encryption_key_.Swap(&other->encryption_key_);
  mac_key_.Swap(&other->mac_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NigoriKey::GetTypeName() const {
  return "sync_pb.NigoriKey";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NigoriKey

// optional string name = 1;
bool NigoriKey::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NigoriKey::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NigoriKey::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NigoriKey::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& NigoriKey::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriKey.name)
  return name_.GetNoArena();
}
void NigoriKey::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriKey.name)
}
#if LANG_CXX11
void NigoriKey::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.NigoriKey.name)
}
#endif
void NigoriKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.NigoriKey.name)
}
void NigoriKey::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.NigoriKey.name)
}
::std::string* NigoriKey::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKey.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NigoriKey::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriKey.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NigoriKey::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriKey.name)
}

// optional bytes user_key = 2 [deprecated = true];
bool NigoriKey::has_user_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NigoriKey::set_has_user_key() {
  _has_bits_[0] |= 0x00000002u;
}
void NigoriKey::clear_has_user_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void NigoriKey::clear_user_key() {
  user_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_key();
}
const ::std::string& NigoriKey::user_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriKey.user_key)
  return user_key_.GetNoArena();
}
void NigoriKey::set_user_key(const ::std::string& value) {
  set_has_user_key();
  user_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriKey.user_key)
}
#if LANG_CXX11
void NigoriKey::set_user_key(::std::string&& value) {
  set_has_user_key();
  user_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.NigoriKey.user_key)
}
#endif
void NigoriKey::set_user_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_key();
  user_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.NigoriKey.user_key)
}
void NigoriKey::set_user_key(const void* value, size_t size) {
  set_has_user_key();
  user_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.NigoriKey.user_key)
}
::std::string* NigoriKey::mutable_user_key() {
  set_has_user_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKey.user_key)
  return user_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NigoriKey::release_user_key() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriKey.user_key)
  clear_has_user_key();
  return user_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NigoriKey::set_allocated_user_key(::std::string* user_key) {
  if (user_key != NULL) {
    set_has_user_key();
  } else {
    clear_has_user_key();
  }
  user_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriKey.user_key)
}

// optional bytes encryption_key = 3;
bool NigoriKey::has_encryption_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NigoriKey::set_has_encryption_key() {
  _has_bits_[0] |= 0x00000004u;
}
void NigoriKey::clear_has_encryption_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void NigoriKey::clear_encryption_key() {
  encryption_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryption_key();
}
const ::std::string& NigoriKey::encryption_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriKey.encryption_key)
  return encryption_key_.GetNoArena();
}
void NigoriKey::set_encryption_key(const ::std::string& value) {
  set_has_encryption_key();
  encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriKey.encryption_key)
}
#if LANG_CXX11
void NigoriKey::set_encryption_key(::std::string&& value) {
  set_has_encryption_key();
  encryption_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.NigoriKey.encryption_key)
}
#endif
void NigoriKey::set_encryption_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encryption_key();
  encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.NigoriKey.encryption_key)
}
void NigoriKey::set_encryption_key(const void* value, size_t size) {
  set_has_encryption_key();
  encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.NigoriKey.encryption_key)
}
::std::string* NigoriKey::mutable_encryption_key() {
  set_has_encryption_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKey.encryption_key)
  return encryption_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NigoriKey::release_encryption_key() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriKey.encryption_key)
  clear_has_encryption_key();
  return encryption_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NigoriKey::set_allocated_encryption_key(::std::string* encryption_key) {
  if (encryption_key != NULL) {
    set_has_encryption_key();
  } else {
    clear_has_encryption_key();
  }
  encryption_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryption_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriKey.encryption_key)
}

// optional bytes mac_key = 4;
bool NigoriKey::has_mac_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NigoriKey::set_has_mac_key() {
  _has_bits_[0] |= 0x00000008u;
}
void NigoriKey::clear_has_mac_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void NigoriKey::clear_mac_key() {
  mac_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mac_key();
}
const ::std::string& NigoriKey::mac_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriKey.mac_key)
  return mac_key_.GetNoArena();
}
void NigoriKey::set_mac_key(const ::std::string& value) {
  set_has_mac_key();
  mac_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.NigoriKey.mac_key)
}
#if LANG_CXX11
void NigoriKey::set_mac_key(::std::string&& value) {
  set_has_mac_key();
  mac_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.NigoriKey.mac_key)
}
#endif
void NigoriKey::set_mac_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mac_key();
  mac_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.NigoriKey.mac_key)
}
void NigoriKey::set_mac_key(const void* value, size_t size) {
  set_has_mac_key();
  mac_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.NigoriKey.mac_key)
}
::std::string* NigoriKey::mutable_mac_key() {
  set_has_mac_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKey.mac_key)
  return mac_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NigoriKey::release_mac_key() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriKey.mac_key)
  clear_has_mac_key();
  return mac_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NigoriKey::set_allocated_mac_key(::std::string* mac_key) {
  if (mac_key != NULL) {
    set_has_mac_key();
  } else {
    clear_has_mac_key();
  }
  mac_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriKey.mac_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NigoriKeyBag::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NigoriKeyBag::NigoriKeyBag()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_nigori_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.NigoriKeyBag)
}
NigoriKeyBag::NigoriKeyBag(const NigoriKeyBag& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      key_(from.key_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriKeyBag)
}

void NigoriKeyBag::SharedCtor() {
  _cached_size_ = 0;
}

NigoriKeyBag::~NigoriKeyBag() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriKeyBag)
  SharedDtor();
}

void NigoriKeyBag::SharedDtor() {
}

void NigoriKeyBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NigoriKeyBag& NigoriKeyBag::default_instance() {
  protobuf_nigori_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

NigoriKeyBag* NigoriKeyBag::New(::google::protobuf::Arena* arena) const {
  NigoriKeyBag* n = new NigoriKeyBag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NigoriKeyBag::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriKeyBag)
  key_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NigoriKeyBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.NigoriKeyBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.NigoriKey key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.NigoriKeyBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.NigoriKeyBag)
  return false;
#undef DO_
}

void NigoriKeyBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.NigoriKeyBag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.NigoriKey key = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->key(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.NigoriKeyBag)
}

size_t NigoriKeyBag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriKeyBag)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.NigoriKey key = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->key_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NigoriKeyBag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NigoriKeyBag*>(&from));
}

void NigoriKeyBag::MergeFrom(const NigoriKeyBag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriKeyBag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
}

void NigoriKeyBag::CopyFrom(const NigoriKeyBag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriKeyBag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriKeyBag::IsInitialized() const {
  return true;
}

void NigoriKeyBag::Swap(NigoriKeyBag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NigoriKeyBag::InternalSwap(NigoriKeyBag* other) {
  key_.InternalSwap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NigoriKeyBag::GetTypeName() const {
  return "sync_pb.NigoriKeyBag";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NigoriKeyBag

// repeated .sync_pb.NigoriKey key = 2;
int NigoriKeyBag::key_size() const {
  return key_.size();
}
void NigoriKeyBag::clear_key() {
  key_.Clear();
}
const ::sync_pb::NigoriKey& NigoriKeyBag::key(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriKeyBag.key)
  return key_.Get(index);
}
::sync_pb::NigoriKey* NigoriKeyBag::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriKeyBag.key)
  return key_.Mutable(index);
}
::sync_pb::NigoriKey* NigoriKeyBag::add_key() {
  // @@protoc_insertion_point(field_add:sync_pb.NigoriKeyBag.key)
  return key_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::NigoriKey >*
NigoriKeyBag::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.NigoriKeyBag.key)
  return &key_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::NigoriKey >&
NigoriKeyBag::key() const {
  // @@protoc_insertion_point(field_list:sync_pb.NigoriKeyBag.key)
  return key_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NigoriSpecifics::kEncryptionKeybagFieldNumber;
const int NigoriSpecifics::kKeybagIsFrozenFieldNumber;
const int NigoriSpecifics::kEncryptBookmarksFieldNumber;
const int NigoriSpecifics::kEncryptPreferencesFieldNumber;
const int NigoriSpecifics::kEncryptAutofillProfileFieldNumber;
const int NigoriSpecifics::kEncryptAutofillFieldNumber;
const int NigoriSpecifics::kEncryptThemesFieldNumber;
const int NigoriSpecifics::kEncryptTypedUrlsFieldNumber;
const int NigoriSpecifics::kEncryptExtensionsFieldNumber;
const int NigoriSpecifics::kEncryptSessionsFieldNumber;
const int NigoriSpecifics::kEncryptAppsFieldNumber;
const int NigoriSpecifics::kEncryptSearchEnginesFieldNumber;
const int NigoriSpecifics::kEncryptEverythingFieldNumber;
const int NigoriSpecifics::kEncryptExtensionSettingsFieldNumber;
const int NigoriSpecifics::kEncryptAppNotificationsFieldNumber;
const int NigoriSpecifics::kEncryptAppSettingsFieldNumber;
const int NigoriSpecifics::kSyncTabFaviconsFieldNumber;
const int NigoriSpecifics::kPassphraseTypeFieldNumber;
const int NigoriSpecifics::kKeystoreDecryptorTokenFieldNumber;
const int NigoriSpecifics::kKeystoreMigrationTimeFieldNumber;
const int NigoriSpecifics::kCustomPassphraseTimeFieldNumber;
const int NigoriSpecifics::kEncryptDictionaryFieldNumber;
const int NigoriSpecifics::kEncryptFaviconImagesFieldNumber;
const int NigoriSpecifics::kEncryptFaviconTrackingFieldNumber;
const int NigoriSpecifics::kEncryptArticlesFieldNumber;
const int NigoriSpecifics::kEncryptAppListFieldNumber;
const int NigoriSpecifics::kEncryptAutofillWalletMetadataFieldNumber;
const int NigoriSpecifics::kServerOnlyWasMissingKeystoreMigrationTimeFieldNumber;
const int NigoriSpecifics::kEncryptArcPackageFieldNumber;
const int NigoriSpecifics::kEncryptPrintersFieldNumber;
const int NigoriSpecifics::kEncryptReadingListFieldNumber;
const int NigoriSpecifics::kEncryptMountainSharesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NigoriSpecifics::NigoriSpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_nigori_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.NigoriSpecifics)
}
NigoriSpecifics::NigoriSpecifics(const NigoriSpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_encryption_keybag()) {
    encryption_keybag_ = new ::sync_pb::EncryptedData(*from.encryption_keybag_);
  } else {
    encryption_keybag_ = NULL;
  }
  if (from.has_keystore_decryptor_token()) {
    keystore_decryptor_token_ = new ::sync_pb::EncryptedData(*from.keystore_decryptor_token_);
  } else {
    keystore_decryptor_token_ = NULL;
  }
  ::memcpy(&keybag_is_frozen_, &from.keybag_is_frozen_,
    static_cast<size_t>(reinterpret_cast<char*>(&passphrase_type_) -
    reinterpret_cast<char*>(&keybag_is_frozen_)) + sizeof(passphrase_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.NigoriSpecifics)
}

void NigoriSpecifics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&encryption_keybag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encrypt_arc_package_) -
      reinterpret_cast<char*>(&encryption_keybag_)) + sizeof(encrypt_arc_package_));
  passphrase_type_ = 1;
}

NigoriSpecifics::~NigoriSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.NigoriSpecifics)
  SharedDtor();
}

void NigoriSpecifics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete encryption_keybag_;
  }
  if (this != internal_default_instance()) {
    delete keystore_decryptor_token_;
  }
}

void NigoriSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NigoriSpecifics& NigoriSpecifics::default_instance() {
  protobuf_nigori_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

NigoriSpecifics* NigoriSpecifics::New(::google::protobuf::Arena* arena) const {
  NigoriSpecifics* n = new NigoriSpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NigoriSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NigoriSpecifics)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_encryption_keybag()) {
      GOOGLE_DCHECK(encryption_keybag_ != NULL);
      encryption_keybag_->::sync_pb::EncryptedData::Clear();
    }
    if (has_keystore_decryptor_token()) {
      GOOGLE_DCHECK(keystore_decryptor_token_ != NULL);
      keystore_decryptor_token_->::sync_pb::EncryptedData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&keybag_is_frozen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_themes_) -
        reinterpret_cast<char*>(&keybag_is_frozen_)) + sizeof(encrypt_themes_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&encrypt_typed_urls_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_app_notifications_) -
        reinterpret_cast<char*>(&encrypt_typed_urls_)) + sizeof(encrypt_app_notifications_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&encrypt_app_settings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_dictionary_) -
        reinterpret_cast<char*>(&encrypt_app_settings_)) + sizeof(encrypt_dictionary_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&encrypt_favicon_images_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_arc_package_) -
        reinterpret_cast<char*>(&encrypt_favicon_images_)) + sizeof(encrypt_arc_package_));
    passphrase_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NigoriSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.NigoriSpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.EncryptedData encryption_keybag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encryption_keybag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keybag_is_frozen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_keybag_is_frozen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keybag_is_frozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_bookmarks = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_encrypt_bookmarks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_bookmarks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_preferences = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_encrypt_preferences();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_preferences_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_autofill_profile = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_encrypt_autofill_profile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_autofill_profile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_autofill = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_encrypt_autofill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_autofill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_themes = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_encrypt_themes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_themes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_typed_urls = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_encrypt_typed_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_typed_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_extensions = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_encrypt_extensions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_extensions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_sessions = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_encrypt_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_apps = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_encrypt_apps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_apps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_search_engines = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_encrypt_search_engines();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_search_engines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_everything = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_encrypt_everything();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_everything_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_extension_settings = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_encrypt_extension_settings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_extension_settings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_app_notifications = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_encrypt_app_notifications();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_app_notifications_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_app_settings = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_encrypt_app_settings();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_app_settings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_tab_favicons = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_sync_tab_favicons();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_tab_favicons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 30 [default = IMPLICIT_PASSPHRASE];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::NigoriSpecifics_PassphraseType_IsValid(value)) {
            set_passphrase_type(static_cast< ::sync_pb::NigoriSpecifics_PassphraseType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(240u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keystore_decryptor_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 keystore_migration_time = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u)) {
          set_has_keystore_migration_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &keystore_migration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 custom_passphrase_time = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_custom_passphrase_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &custom_passphrase_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_dictionary = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_encrypt_dictionary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_dictionary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_favicon_images = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_encrypt_favicon_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_favicon_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_favicon_tracking = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_encrypt_favicon_tracking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_favicon_tracking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_articles = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_encrypt_articles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_articles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_app_list = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_encrypt_app_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_app_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_autofill_wallet_metadata = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_encrypt_autofill_wallet_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_autofill_wallet_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool server_only_was_missing_keystore_migration_time = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_server_only_was_missing_keystore_migration_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &server_only_was_missing_keystore_migration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_arc_package = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_encrypt_arc_package();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_arc_package_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_printers = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_encrypt_printers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_printers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_reading_list = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_encrypt_reading_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_reading_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt_mountain_shares = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_encrypt_mountain_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_mountain_shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.NigoriSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.NigoriSpecifics)
  return false;
#undef DO_
}

void NigoriSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.NigoriSpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.EncryptedData encryption_keybag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->encryption_keybag_, output);
  }

  // optional bool keybag_is_frozen = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->keybag_is_frozen(), output);
  }

  // optional bool encrypt_bookmarks = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->encrypt_bookmarks(), output);
  }

  // optional bool encrypt_preferences = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->encrypt_preferences(), output);
  }

  // optional bool encrypt_autofill_profile = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->encrypt_autofill_profile(), output);
  }

  // optional bool encrypt_autofill = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->encrypt_autofill(), output);
  }

  // optional bool encrypt_themes = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->encrypt_themes(), output);
  }

  // optional bool encrypt_typed_urls = 18;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->encrypt_typed_urls(), output);
  }

  // optional bool encrypt_extensions = 19;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->encrypt_extensions(), output);
  }

  // optional bool encrypt_sessions = 20;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->encrypt_sessions(), output);
  }

  // optional bool encrypt_apps = 21;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->encrypt_apps(), output);
  }

  // optional bool encrypt_search_engines = 22;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->encrypt_search_engines(), output);
  }

  // optional bool encrypt_everything = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->encrypt_everything(), output);
  }

  // optional bool encrypt_extension_settings = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->encrypt_extension_settings(), output);
  }

  // optional bool encrypt_app_notifications = 26;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->encrypt_app_notifications(), output);
  }

  // optional bool encrypt_app_settings = 27;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->encrypt_app_settings(), output);
  }

  // optional bool sync_tab_favicons = 29;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->sync_tab_favicons(), output);
  }

  // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 30 [default = IMPLICIT_PASSPHRASE];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->passphrase_type(), output);
  }

  // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, *this->keystore_decryptor_token_, output);
  }

  // optional int64 keystore_migration_time = 32;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->keystore_migration_time(), output);
  }

  // optional int64 custom_passphrase_time = 33;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->custom_passphrase_time(), output);
  }

  // optional bool encrypt_dictionary = 34;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->encrypt_dictionary(), output);
  }

  // optional bool encrypt_favicon_images = 35;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->encrypt_favicon_images(), output);
  }

  // optional bool encrypt_favicon_tracking = 36;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->encrypt_favicon_tracking(), output);
  }

  // optional bool encrypt_articles = 37;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->encrypt_articles(), output);
  }

  // optional bool encrypt_app_list = 38;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->encrypt_app_list(), output);
  }

  // optional bool encrypt_autofill_wallet_metadata = 39;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->encrypt_autofill_wallet_metadata(), output);
  }

  // optional bool server_only_was_missing_keystore_migration_time = 40;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->server_only_was_missing_keystore_migration_time(), output);
  }

  // optional bool encrypt_arc_package = 41;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->encrypt_arc_package(), output);
  }

  // optional bool encrypt_printers = 42;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->encrypt_printers(), output);
  }

  // optional bool encrypt_reading_list = 43;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->encrypt_reading_list(), output);
  }

  // optional bool encrypt_mountain_shares = 44;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->encrypt_mountain_shares(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.NigoriSpecifics)
}

size_t NigoriSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NigoriSpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .sync_pb.EncryptedData encryption_keybag = 1;
    if (has_encryption_keybag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->encryption_keybag_);
    }

    // optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
    if (has_keystore_decryptor_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->keystore_decryptor_token_);
    }

    // optional bool keybag_is_frozen = 2;
    if (has_keybag_is_frozen()) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_bookmarks = 13;
    if (has_encrypt_bookmarks()) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_preferences = 14;
    if (has_encrypt_preferences()) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_autofill_profile = 15;
    if (has_encrypt_autofill_profile()) {
      total_size += 1 + 1;
    }

    // optional bool encrypt_autofill = 16;
    if (has_encrypt_autofill()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_themes = 17;
    if (has_encrypt_themes()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool encrypt_typed_urls = 18;
    if (has_encrypt_typed_urls()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_extensions = 19;
    if (has_encrypt_extensions()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_sessions = 20;
    if (has_encrypt_sessions()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_apps = 21;
    if (has_encrypt_apps()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_search_engines = 22;
    if (has_encrypt_search_engines()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_everything = 24;
    if (has_encrypt_everything()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_extension_settings = 25;
    if (has_encrypt_extension_settings()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_app_notifications = 26;
    if (has_encrypt_app_notifications()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool encrypt_app_settings = 27;
    if (has_encrypt_app_settings()) {
      total_size += 2 + 1;
    }

    // optional bool sync_tab_favicons = 29;
    if (has_sync_tab_favicons()) {
      total_size += 2 + 1;
    }

    // optional int64 keystore_migration_time = 32;
    if (has_keystore_migration_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->keystore_migration_time());
    }

    // optional int64 custom_passphrase_time = 33;
    if (has_custom_passphrase_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->custom_passphrase_time());
    }

    // optional bool encrypt_printers = 42;
    if (has_encrypt_printers()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_reading_list = 43;
    if (has_encrypt_reading_list()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_mountain_shares = 44;
    if (has_encrypt_mountain_shares()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_dictionary = 34;
    if (has_encrypt_dictionary()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool encrypt_favicon_images = 35;
    if (has_encrypt_favicon_images()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_favicon_tracking = 36;
    if (has_encrypt_favicon_tracking()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_articles = 37;
    if (has_encrypt_articles()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_app_list = 38;
    if (has_encrypt_app_list()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_autofill_wallet_metadata = 39;
    if (has_encrypt_autofill_wallet_metadata()) {
      total_size += 2 + 1;
    }

    // optional bool server_only_was_missing_keystore_migration_time = 40;
    if (has_server_only_was_missing_keystore_migration_time()) {
      total_size += 2 + 1;
    }

    // optional bool encrypt_arc_package = 41;
    if (has_encrypt_arc_package()) {
      total_size += 2 + 1;
    }

    // optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 30 [default = IMPLICIT_PASSPHRASE];
    if (has_passphrase_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->passphrase_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NigoriSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NigoriSpecifics*>(&from));
}

void NigoriSpecifics::MergeFrom(const NigoriSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NigoriSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_encryption_keybag()->::sync_pb::EncryptedData::MergeFrom(from.encryption_keybag());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keystore_decryptor_token()->::sync_pb::EncryptedData::MergeFrom(from.keystore_decryptor_token());
    }
    if (cached_has_bits & 0x00000004u) {
      keybag_is_frozen_ = from.keybag_is_frozen_;
    }
    if (cached_has_bits & 0x00000008u) {
      encrypt_bookmarks_ = from.encrypt_bookmarks_;
    }
    if (cached_has_bits & 0x00000010u) {
      encrypt_preferences_ = from.encrypt_preferences_;
    }
    if (cached_has_bits & 0x00000020u) {
      encrypt_autofill_profile_ = from.encrypt_autofill_profile_;
    }
    if (cached_has_bits & 0x00000040u) {
      encrypt_autofill_ = from.encrypt_autofill_;
    }
    if (cached_has_bits & 0x00000080u) {
      encrypt_themes_ = from.encrypt_themes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      encrypt_typed_urls_ = from.encrypt_typed_urls_;
    }
    if (cached_has_bits & 0x00000200u) {
      encrypt_extensions_ = from.encrypt_extensions_;
    }
    if (cached_has_bits & 0x00000400u) {
      encrypt_sessions_ = from.encrypt_sessions_;
    }
    if (cached_has_bits & 0x00000800u) {
      encrypt_apps_ = from.encrypt_apps_;
    }
    if (cached_has_bits & 0x00001000u) {
      encrypt_search_engines_ = from.encrypt_search_engines_;
    }
    if (cached_has_bits & 0x00002000u) {
      encrypt_everything_ = from.encrypt_everything_;
    }
    if (cached_has_bits & 0x00004000u) {
      encrypt_extension_settings_ = from.encrypt_extension_settings_;
    }
    if (cached_has_bits & 0x00008000u) {
      encrypt_app_notifications_ = from.encrypt_app_notifications_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      encrypt_app_settings_ = from.encrypt_app_settings_;
    }
    if (cached_has_bits & 0x00020000u) {
      sync_tab_favicons_ = from.sync_tab_favicons_;
    }
    if (cached_has_bits & 0x00040000u) {
      keystore_migration_time_ = from.keystore_migration_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      custom_passphrase_time_ = from.custom_passphrase_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      encrypt_printers_ = from.encrypt_printers_;
    }
    if (cached_has_bits & 0x00200000u) {
      encrypt_reading_list_ = from.encrypt_reading_list_;
    }
    if (cached_has_bits & 0x00400000u) {
      encrypt_mountain_shares_ = from.encrypt_mountain_shares_;
    }
    if (cached_has_bits & 0x00800000u) {
      encrypt_dictionary_ = from.encrypt_dictionary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      encrypt_favicon_images_ = from.encrypt_favicon_images_;
    }
    if (cached_has_bits & 0x02000000u) {
      encrypt_favicon_tracking_ = from.encrypt_favicon_tracking_;
    }
    if (cached_has_bits & 0x04000000u) {
      encrypt_articles_ = from.encrypt_articles_;
    }
    if (cached_has_bits & 0x08000000u) {
      encrypt_app_list_ = from.encrypt_app_list_;
    }
    if (cached_has_bits & 0x10000000u) {
      encrypt_autofill_wallet_metadata_ = from.encrypt_autofill_wallet_metadata_;
    }
    if (cached_has_bits & 0x20000000u) {
      server_only_was_missing_keystore_migration_time_ = from.server_only_was_missing_keystore_migration_time_;
    }
    if (cached_has_bits & 0x40000000u) {
      encrypt_arc_package_ = from.encrypt_arc_package_;
    }
    if (cached_has_bits & 0x80000000u) {
      passphrase_type_ = from.passphrase_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NigoriSpecifics::CopyFrom(const NigoriSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NigoriSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NigoriSpecifics::IsInitialized() const {
  return true;
}

void NigoriSpecifics::Swap(NigoriSpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NigoriSpecifics::InternalSwap(NigoriSpecifics* other) {
  std::swap(encryption_keybag_, other->encryption_keybag_);
  std::swap(keystore_decryptor_token_, other->keystore_decryptor_token_);
  std::swap(keybag_is_frozen_, other->keybag_is_frozen_);
  std::swap(encrypt_bookmarks_, other->encrypt_bookmarks_);
  std::swap(encrypt_preferences_, other->encrypt_preferences_);
  std::swap(encrypt_autofill_profile_, other->encrypt_autofill_profile_);
  std::swap(encrypt_autofill_, other->encrypt_autofill_);
  std::swap(encrypt_themes_, other->encrypt_themes_);
  std::swap(encrypt_typed_urls_, other->encrypt_typed_urls_);
  std::swap(encrypt_extensions_, other->encrypt_extensions_);
  std::swap(encrypt_sessions_, other->encrypt_sessions_);
  std::swap(encrypt_apps_, other->encrypt_apps_);
  std::swap(encrypt_search_engines_, other->encrypt_search_engines_);
  std::swap(encrypt_everything_, other->encrypt_everything_);
  std::swap(encrypt_extension_settings_, other->encrypt_extension_settings_);
  std::swap(encrypt_app_notifications_, other->encrypt_app_notifications_);
  std::swap(encrypt_app_settings_, other->encrypt_app_settings_);
  std::swap(sync_tab_favicons_, other->sync_tab_favicons_);
  std::swap(keystore_migration_time_, other->keystore_migration_time_);
  std::swap(custom_passphrase_time_, other->custom_passphrase_time_);
  std::swap(encrypt_printers_, other->encrypt_printers_);
  std::swap(encrypt_reading_list_, other->encrypt_reading_list_);
  std::swap(encrypt_mountain_shares_, other->encrypt_mountain_shares_);
  std::swap(encrypt_dictionary_, other->encrypt_dictionary_);
  std::swap(encrypt_favicon_images_, other->encrypt_favicon_images_);
  std::swap(encrypt_favicon_tracking_, other->encrypt_favicon_tracking_);
  std::swap(encrypt_articles_, other->encrypt_articles_);
  std::swap(encrypt_app_list_, other->encrypt_app_list_);
  std::swap(encrypt_autofill_wallet_metadata_, other->encrypt_autofill_wallet_metadata_);
  std::swap(server_only_was_missing_keystore_migration_time_, other->server_only_was_missing_keystore_migration_time_);
  std::swap(encrypt_arc_package_, other->encrypt_arc_package_);
  std::swap(passphrase_type_, other->passphrase_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NigoriSpecifics::GetTypeName() const {
  return "sync_pb.NigoriSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NigoriSpecifics

// optional .sync_pb.EncryptedData encryption_keybag = 1;
bool NigoriSpecifics::has_encryption_keybag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NigoriSpecifics::set_has_encryption_keybag() {
  _has_bits_[0] |= 0x00000001u;
}
void NigoriSpecifics::clear_has_encryption_keybag() {
  _has_bits_[0] &= ~0x00000001u;
}
void NigoriSpecifics::clear_encryption_keybag() {
  if (encryption_keybag_ != NULL) encryption_keybag_->::sync_pb::EncryptedData::Clear();
  clear_has_encryption_keybag();
}
const ::sync_pb::EncryptedData& NigoriSpecifics::encryption_keybag() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encryption_keybag)
  return encryption_keybag_ != NULL ? *encryption_keybag_
                         : *::sync_pb::EncryptedData::internal_default_instance();
}
::sync_pb::EncryptedData* NigoriSpecifics::mutable_encryption_keybag() {
  set_has_encryption_keybag();
  if (encryption_keybag_ == NULL) {
    encryption_keybag_ = new ::sync_pb::EncryptedData;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriSpecifics.encryption_keybag)
  return encryption_keybag_;
}
::sync_pb::EncryptedData* NigoriSpecifics::release_encryption_keybag() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriSpecifics.encryption_keybag)
  clear_has_encryption_keybag();
  ::sync_pb::EncryptedData* temp = encryption_keybag_;
  encryption_keybag_ = NULL;
  return temp;
}
void NigoriSpecifics::set_allocated_encryption_keybag(::sync_pb::EncryptedData* encryption_keybag) {
  delete encryption_keybag_;
  encryption_keybag_ = encryption_keybag;
  if (encryption_keybag) {
    set_has_encryption_keybag();
  } else {
    clear_has_encryption_keybag();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriSpecifics.encryption_keybag)
}

// optional bool keybag_is_frozen = 2;
bool NigoriSpecifics::has_keybag_is_frozen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NigoriSpecifics::set_has_keybag_is_frozen() {
  _has_bits_[0] |= 0x00000004u;
}
void NigoriSpecifics::clear_has_keybag_is_frozen() {
  _has_bits_[0] &= ~0x00000004u;
}
void NigoriSpecifics::clear_keybag_is_frozen() {
  keybag_is_frozen_ = false;
  clear_has_keybag_is_frozen();
}
bool NigoriSpecifics::keybag_is_frozen() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.keybag_is_frozen)
  return keybag_is_frozen_;
}
void NigoriSpecifics::set_keybag_is_frozen(bool value) {
  set_has_keybag_is_frozen();
  keybag_is_frozen_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.keybag_is_frozen)
}

// optional bool encrypt_bookmarks = 13;
bool NigoriSpecifics::has_encrypt_bookmarks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NigoriSpecifics::set_has_encrypt_bookmarks() {
  _has_bits_[0] |= 0x00000008u;
}
void NigoriSpecifics::clear_has_encrypt_bookmarks() {
  _has_bits_[0] &= ~0x00000008u;
}
void NigoriSpecifics::clear_encrypt_bookmarks() {
  encrypt_bookmarks_ = false;
  clear_has_encrypt_bookmarks();
}
bool NigoriSpecifics::encrypt_bookmarks() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_bookmarks)
  return encrypt_bookmarks_;
}
void NigoriSpecifics::set_encrypt_bookmarks(bool value) {
  set_has_encrypt_bookmarks();
  encrypt_bookmarks_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_bookmarks)
}

// optional bool encrypt_preferences = 14;
bool NigoriSpecifics::has_encrypt_preferences() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NigoriSpecifics::set_has_encrypt_preferences() {
  _has_bits_[0] |= 0x00000010u;
}
void NigoriSpecifics::clear_has_encrypt_preferences() {
  _has_bits_[0] &= ~0x00000010u;
}
void NigoriSpecifics::clear_encrypt_preferences() {
  encrypt_preferences_ = false;
  clear_has_encrypt_preferences();
}
bool NigoriSpecifics::encrypt_preferences() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_preferences)
  return encrypt_preferences_;
}
void NigoriSpecifics::set_encrypt_preferences(bool value) {
  set_has_encrypt_preferences();
  encrypt_preferences_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_preferences)
}

// optional bool encrypt_autofill_profile = 15;
bool NigoriSpecifics::has_encrypt_autofill_profile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NigoriSpecifics::set_has_encrypt_autofill_profile() {
  _has_bits_[0] |= 0x00000020u;
}
void NigoriSpecifics::clear_has_encrypt_autofill_profile() {
  _has_bits_[0] &= ~0x00000020u;
}
void NigoriSpecifics::clear_encrypt_autofill_profile() {
  encrypt_autofill_profile_ = false;
  clear_has_encrypt_autofill_profile();
}
bool NigoriSpecifics::encrypt_autofill_profile() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_autofill_profile)
  return encrypt_autofill_profile_;
}
void NigoriSpecifics::set_encrypt_autofill_profile(bool value) {
  set_has_encrypt_autofill_profile();
  encrypt_autofill_profile_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_autofill_profile)
}

// optional bool encrypt_autofill = 16;
bool NigoriSpecifics::has_encrypt_autofill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NigoriSpecifics::set_has_encrypt_autofill() {
  _has_bits_[0] |= 0x00000040u;
}
void NigoriSpecifics::clear_has_encrypt_autofill() {
  _has_bits_[0] &= ~0x00000040u;
}
void NigoriSpecifics::clear_encrypt_autofill() {
  encrypt_autofill_ = false;
  clear_has_encrypt_autofill();
}
bool NigoriSpecifics::encrypt_autofill() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_autofill)
  return encrypt_autofill_;
}
void NigoriSpecifics::set_encrypt_autofill(bool value) {
  set_has_encrypt_autofill();
  encrypt_autofill_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_autofill)
}

// optional bool encrypt_themes = 17;
bool NigoriSpecifics::has_encrypt_themes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void NigoriSpecifics::set_has_encrypt_themes() {
  _has_bits_[0] |= 0x00000080u;
}
void NigoriSpecifics::clear_has_encrypt_themes() {
  _has_bits_[0] &= ~0x00000080u;
}
void NigoriSpecifics::clear_encrypt_themes() {
  encrypt_themes_ = false;
  clear_has_encrypt_themes();
}
bool NigoriSpecifics::encrypt_themes() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_themes)
  return encrypt_themes_;
}
void NigoriSpecifics::set_encrypt_themes(bool value) {
  set_has_encrypt_themes();
  encrypt_themes_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_themes)
}

// optional bool encrypt_typed_urls = 18;
bool NigoriSpecifics::has_encrypt_typed_urls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void NigoriSpecifics::set_has_encrypt_typed_urls() {
  _has_bits_[0] |= 0x00000100u;
}
void NigoriSpecifics::clear_has_encrypt_typed_urls() {
  _has_bits_[0] &= ~0x00000100u;
}
void NigoriSpecifics::clear_encrypt_typed_urls() {
  encrypt_typed_urls_ = false;
  clear_has_encrypt_typed_urls();
}
bool NigoriSpecifics::encrypt_typed_urls() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_typed_urls)
  return encrypt_typed_urls_;
}
void NigoriSpecifics::set_encrypt_typed_urls(bool value) {
  set_has_encrypt_typed_urls();
  encrypt_typed_urls_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_typed_urls)
}

// optional bool encrypt_extensions = 19;
bool NigoriSpecifics::has_encrypt_extensions() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void NigoriSpecifics::set_has_encrypt_extensions() {
  _has_bits_[0] |= 0x00000200u;
}
void NigoriSpecifics::clear_has_encrypt_extensions() {
  _has_bits_[0] &= ~0x00000200u;
}
void NigoriSpecifics::clear_encrypt_extensions() {
  encrypt_extensions_ = false;
  clear_has_encrypt_extensions();
}
bool NigoriSpecifics::encrypt_extensions() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_extensions)
  return encrypt_extensions_;
}
void NigoriSpecifics::set_encrypt_extensions(bool value) {
  set_has_encrypt_extensions();
  encrypt_extensions_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_extensions)
}

// optional bool encrypt_sessions = 20;
bool NigoriSpecifics::has_encrypt_sessions() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void NigoriSpecifics::set_has_encrypt_sessions() {
  _has_bits_[0] |= 0x00000400u;
}
void NigoriSpecifics::clear_has_encrypt_sessions() {
  _has_bits_[0] &= ~0x00000400u;
}
void NigoriSpecifics::clear_encrypt_sessions() {
  encrypt_sessions_ = false;
  clear_has_encrypt_sessions();
}
bool NigoriSpecifics::encrypt_sessions() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_sessions)
  return encrypt_sessions_;
}
void NigoriSpecifics::set_encrypt_sessions(bool value) {
  set_has_encrypt_sessions();
  encrypt_sessions_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_sessions)
}

// optional bool encrypt_apps = 21;
bool NigoriSpecifics::has_encrypt_apps() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void NigoriSpecifics::set_has_encrypt_apps() {
  _has_bits_[0] |= 0x00000800u;
}
void NigoriSpecifics::clear_has_encrypt_apps() {
  _has_bits_[0] &= ~0x00000800u;
}
void NigoriSpecifics::clear_encrypt_apps() {
  encrypt_apps_ = false;
  clear_has_encrypt_apps();
}
bool NigoriSpecifics::encrypt_apps() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_apps)
  return encrypt_apps_;
}
void NigoriSpecifics::set_encrypt_apps(bool value) {
  set_has_encrypt_apps();
  encrypt_apps_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_apps)
}

// optional bool encrypt_search_engines = 22;
bool NigoriSpecifics::has_encrypt_search_engines() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_search_engines() {
  _has_bits_[0] |= 0x00001000u;
}
void NigoriSpecifics::clear_has_encrypt_search_engines() {
  _has_bits_[0] &= ~0x00001000u;
}
void NigoriSpecifics::clear_encrypt_search_engines() {
  encrypt_search_engines_ = false;
  clear_has_encrypt_search_engines();
}
bool NigoriSpecifics::encrypt_search_engines() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_search_engines)
  return encrypt_search_engines_;
}
void NigoriSpecifics::set_encrypt_search_engines(bool value) {
  set_has_encrypt_search_engines();
  encrypt_search_engines_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_search_engines)
}

// optional bool encrypt_everything = 24;
bool NigoriSpecifics::has_encrypt_everything() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_everything() {
  _has_bits_[0] |= 0x00002000u;
}
void NigoriSpecifics::clear_has_encrypt_everything() {
  _has_bits_[0] &= ~0x00002000u;
}
void NigoriSpecifics::clear_encrypt_everything() {
  encrypt_everything_ = false;
  clear_has_encrypt_everything();
}
bool NigoriSpecifics::encrypt_everything() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_everything)
  return encrypt_everything_;
}
void NigoriSpecifics::set_encrypt_everything(bool value) {
  set_has_encrypt_everything();
  encrypt_everything_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_everything)
}

// optional bool encrypt_extension_settings = 25;
bool NigoriSpecifics::has_encrypt_extension_settings() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_extension_settings() {
  _has_bits_[0] |= 0x00004000u;
}
void NigoriSpecifics::clear_has_encrypt_extension_settings() {
  _has_bits_[0] &= ~0x00004000u;
}
void NigoriSpecifics::clear_encrypt_extension_settings() {
  encrypt_extension_settings_ = false;
  clear_has_encrypt_extension_settings();
}
bool NigoriSpecifics::encrypt_extension_settings() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_extension_settings)
  return encrypt_extension_settings_;
}
void NigoriSpecifics::set_encrypt_extension_settings(bool value) {
  set_has_encrypt_extension_settings();
  encrypt_extension_settings_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_extension_settings)
}

// optional bool encrypt_app_notifications = 26;
bool NigoriSpecifics::has_encrypt_app_notifications() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_app_notifications() {
  _has_bits_[0] |= 0x00008000u;
}
void NigoriSpecifics::clear_has_encrypt_app_notifications() {
  _has_bits_[0] &= ~0x00008000u;
}
void NigoriSpecifics::clear_encrypt_app_notifications() {
  encrypt_app_notifications_ = false;
  clear_has_encrypt_app_notifications();
}
bool NigoriSpecifics::encrypt_app_notifications() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_app_notifications)
  return encrypt_app_notifications_;
}
void NigoriSpecifics::set_encrypt_app_notifications(bool value) {
  set_has_encrypt_app_notifications();
  encrypt_app_notifications_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_app_notifications)
}

// optional bool encrypt_app_settings = 27;
bool NigoriSpecifics::has_encrypt_app_settings() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_app_settings() {
  _has_bits_[0] |= 0x00010000u;
}
void NigoriSpecifics::clear_has_encrypt_app_settings() {
  _has_bits_[0] &= ~0x00010000u;
}
void NigoriSpecifics::clear_encrypt_app_settings() {
  encrypt_app_settings_ = false;
  clear_has_encrypt_app_settings();
}
bool NigoriSpecifics::encrypt_app_settings() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_app_settings)
  return encrypt_app_settings_;
}
void NigoriSpecifics::set_encrypt_app_settings(bool value) {
  set_has_encrypt_app_settings();
  encrypt_app_settings_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_app_settings)
}

// optional bool sync_tab_favicons = 29;
bool NigoriSpecifics::has_sync_tab_favicons() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void NigoriSpecifics::set_has_sync_tab_favicons() {
  _has_bits_[0] |= 0x00020000u;
}
void NigoriSpecifics::clear_has_sync_tab_favicons() {
  _has_bits_[0] &= ~0x00020000u;
}
void NigoriSpecifics::clear_sync_tab_favicons() {
  sync_tab_favicons_ = false;
  clear_has_sync_tab_favicons();
}
bool NigoriSpecifics::sync_tab_favicons() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.sync_tab_favicons)
  return sync_tab_favicons_;
}
void NigoriSpecifics::set_sync_tab_favicons(bool value) {
  set_has_sync_tab_favicons();
  sync_tab_favicons_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.sync_tab_favicons)
}

// optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 30 [default = IMPLICIT_PASSPHRASE];
bool NigoriSpecifics::has_passphrase_type() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void NigoriSpecifics::set_has_passphrase_type() {
  _has_bits_[0] |= 0x80000000u;
}
void NigoriSpecifics::clear_has_passphrase_type() {
  _has_bits_[0] &= ~0x80000000u;
}
void NigoriSpecifics::clear_passphrase_type() {
  passphrase_type_ = 1;
  clear_has_passphrase_type();
}
::sync_pb::NigoriSpecifics_PassphraseType NigoriSpecifics::passphrase_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.passphrase_type)
  return static_cast< ::sync_pb::NigoriSpecifics_PassphraseType >(passphrase_type_);
}
void NigoriSpecifics::set_passphrase_type(::sync_pb::NigoriSpecifics_PassphraseType value) {
  assert(::sync_pb::NigoriSpecifics_PassphraseType_IsValid(value));
  set_has_passphrase_type();
  passphrase_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.passphrase_type)
}

// optional .sync_pb.EncryptedData keystore_decryptor_token = 31;
bool NigoriSpecifics::has_keystore_decryptor_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NigoriSpecifics::set_has_keystore_decryptor_token() {
  _has_bits_[0] |= 0x00000002u;
}
void NigoriSpecifics::clear_has_keystore_decryptor_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void NigoriSpecifics::clear_keystore_decryptor_token() {
  if (keystore_decryptor_token_ != NULL) keystore_decryptor_token_->::sync_pb::EncryptedData::Clear();
  clear_has_keystore_decryptor_token();
}
const ::sync_pb::EncryptedData& NigoriSpecifics::keystore_decryptor_token() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.keystore_decryptor_token)
  return keystore_decryptor_token_ != NULL ? *keystore_decryptor_token_
                         : *::sync_pb::EncryptedData::internal_default_instance();
}
::sync_pb::EncryptedData* NigoriSpecifics::mutable_keystore_decryptor_token() {
  set_has_keystore_decryptor_token();
  if (keystore_decryptor_token_ == NULL) {
    keystore_decryptor_token_ = new ::sync_pb::EncryptedData;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.NigoriSpecifics.keystore_decryptor_token)
  return keystore_decryptor_token_;
}
::sync_pb::EncryptedData* NigoriSpecifics::release_keystore_decryptor_token() {
  // @@protoc_insertion_point(field_release:sync_pb.NigoriSpecifics.keystore_decryptor_token)
  clear_has_keystore_decryptor_token();
  ::sync_pb::EncryptedData* temp = keystore_decryptor_token_;
  keystore_decryptor_token_ = NULL;
  return temp;
}
void NigoriSpecifics::set_allocated_keystore_decryptor_token(::sync_pb::EncryptedData* keystore_decryptor_token) {
  delete keystore_decryptor_token_;
  keystore_decryptor_token_ = keystore_decryptor_token;
  if (keystore_decryptor_token) {
    set_has_keystore_decryptor_token();
  } else {
    clear_has_keystore_decryptor_token();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NigoriSpecifics.keystore_decryptor_token)
}

// optional int64 keystore_migration_time = 32;
bool NigoriSpecifics::has_keystore_migration_time() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void NigoriSpecifics::set_has_keystore_migration_time() {
  _has_bits_[0] |= 0x00040000u;
}
void NigoriSpecifics::clear_has_keystore_migration_time() {
  _has_bits_[0] &= ~0x00040000u;
}
void NigoriSpecifics::clear_keystore_migration_time() {
  keystore_migration_time_ = GOOGLE_LONGLONG(0);
  clear_has_keystore_migration_time();
}
::google::protobuf::int64 NigoriSpecifics::keystore_migration_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.keystore_migration_time)
  return keystore_migration_time_;
}
void NigoriSpecifics::set_keystore_migration_time(::google::protobuf::int64 value) {
  set_has_keystore_migration_time();
  keystore_migration_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.keystore_migration_time)
}

// optional int64 custom_passphrase_time = 33;
bool NigoriSpecifics::has_custom_passphrase_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void NigoriSpecifics::set_has_custom_passphrase_time() {
  _has_bits_[0] |= 0x00080000u;
}
void NigoriSpecifics::clear_has_custom_passphrase_time() {
  _has_bits_[0] &= ~0x00080000u;
}
void NigoriSpecifics::clear_custom_passphrase_time() {
  custom_passphrase_time_ = GOOGLE_LONGLONG(0);
  clear_has_custom_passphrase_time();
}
::google::protobuf::int64 NigoriSpecifics::custom_passphrase_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.custom_passphrase_time)
  return custom_passphrase_time_;
}
void NigoriSpecifics::set_custom_passphrase_time(::google::protobuf::int64 value) {
  set_has_custom_passphrase_time();
  custom_passphrase_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.custom_passphrase_time)
}

// optional bool encrypt_dictionary = 34;
bool NigoriSpecifics::has_encrypt_dictionary() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_dictionary() {
  _has_bits_[0] |= 0x00800000u;
}
void NigoriSpecifics::clear_has_encrypt_dictionary() {
  _has_bits_[0] &= ~0x00800000u;
}
void NigoriSpecifics::clear_encrypt_dictionary() {
  encrypt_dictionary_ = false;
  clear_has_encrypt_dictionary();
}
bool NigoriSpecifics::encrypt_dictionary() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_dictionary)
  return encrypt_dictionary_;
}
void NigoriSpecifics::set_encrypt_dictionary(bool value) {
  set_has_encrypt_dictionary();
  encrypt_dictionary_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_dictionary)
}

// optional bool encrypt_favicon_images = 35;
bool NigoriSpecifics::has_encrypt_favicon_images() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_favicon_images() {
  _has_bits_[0] |= 0x01000000u;
}
void NigoriSpecifics::clear_has_encrypt_favicon_images() {
  _has_bits_[0] &= ~0x01000000u;
}
void NigoriSpecifics::clear_encrypt_favicon_images() {
  encrypt_favicon_images_ = false;
  clear_has_encrypt_favicon_images();
}
bool NigoriSpecifics::encrypt_favicon_images() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_favicon_images)
  return encrypt_favicon_images_;
}
void NigoriSpecifics::set_encrypt_favicon_images(bool value) {
  set_has_encrypt_favicon_images();
  encrypt_favicon_images_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_favicon_images)
}

// optional bool encrypt_favicon_tracking = 36;
bool NigoriSpecifics::has_encrypt_favicon_tracking() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_favicon_tracking() {
  _has_bits_[0] |= 0x02000000u;
}
void NigoriSpecifics::clear_has_encrypt_favicon_tracking() {
  _has_bits_[0] &= ~0x02000000u;
}
void NigoriSpecifics::clear_encrypt_favicon_tracking() {
  encrypt_favicon_tracking_ = false;
  clear_has_encrypt_favicon_tracking();
}
bool NigoriSpecifics::encrypt_favicon_tracking() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_favicon_tracking)
  return encrypt_favicon_tracking_;
}
void NigoriSpecifics::set_encrypt_favicon_tracking(bool value) {
  set_has_encrypt_favicon_tracking();
  encrypt_favicon_tracking_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_favicon_tracking)
}

// optional bool encrypt_articles = 37;
bool NigoriSpecifics::has_encrypt_articles() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_articles() {
  _has_bits_[0] |= 0x04000000u;
}
void NigoriSpecifics::clear_has_encrypt_articles() {
  _has_bits_[0] &= ~0x04000000u;
}
void NigoriSpecifics::clear_encrypt_articles() {
  encrypt_articles_ = false;
  clear_has_encrypt_articles();
}
bool NigoriSpecifics::encrypt_articles() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_articles)
  return encrypt_articles_;
}
void NigoriSpecifics::set_encrypt_articles(bool value) {
  set_has_encrypt_articles();
  encrypt_articles_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_articles)
}

// optional bool encrypt_app_list = 38;
bool NigoriSpecifics::has_encrypt_app_list() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_app_list() {
  _has_bits_[0] |= 0x08000000u;
}
void NigoriSpecifics::clear_has_encrypt_app_list() {
  _has_bits_[0] &= ~0x08000000u;
}
void NigoriSpecifics::clear_encrypt_app_list() {
  encrypt_app_list_ = false;
  clear_has_encrypt_app_list();
}
bool NigoriSpecifics::encrypt_app_list() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_app_list)
  return encrypt_app_list_;
}
void NigoriSpecifics::set_encrypt_app_list(bool value) {
  set_has_encrypt_app_list();
  encrypt_app_list_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_app_list)
}

// optional bool encrypt_autofill_wallet_metadata = 39;
bool NigoriSpecifics::has_encrypt_autofill_wallet_metadata() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_autofill_wallet_metadata() {
  _has_bits_[0] |= 0x10000000u;
}
void NigoriSpecifics::clear_has_encrypt_autofill_wallet_metadata() {
  _has_bits_[0] &= ~0x10000000u;
}
void NigoriSpecifics::clear_encrypt_autofill_wallet_metadata() {
  encrypt_autofill_wallet_metadata_ = false;
  clear_has_encrypt_autofill_wallet_metadata();
}
bool NigoriSpecifics::encrypt_autofill_wallet_metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_autofill_wallet_metadata)
  return encrypt_autofill_wallet_metadata_;
}
void NigoriSpecifics::set_encrypt_autofill_wallet_metadata(bool value) {
  set_has_encrypt_autofill_wallet_metadata();
  encrypt_autofill_wallet_metadata_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_autofill_wallet_metadata)
}

// optional bool server_only_was_missing_keystore_migration_time = 40;
bool NigoriSpecifics::has_server_only_was_missing_keystore_migration_time() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void NigoriSpecifics::set_has_server_only_was_missing_keystore_migration_time() {
  _has_bits_[0] |= 0x20000000u;
}
void NigoriSpecifics::clear_has_server_only_was_missing_keystore_migration_time() {
  _has_bits_[0] &= ~0x20000000u;
}
void NigoriSpecifics::clear_server_only_was_missing_keystore_migration_time() {
  server_only_was_missing_keystore_migration_time_ = false;
  clear_has_server_only_was_missing_keystore_migration_time();
}
bool NigoriSpecifics::server_only_was_missing_keystore_migration_time() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.server_only_was_missing_keystore_migration_time)
  return server_only_was_missing_keystore_migration_time_;
}
void NigoriSpecifics::set_server_only_was_missing_keystore_migration_time(bool value) {
  set_has_server_only_was_missing_keystore_migration_time();
  server_only_was_missing_keystore_migration_time_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.server_only_was_missing_keystore_migration_time)
}

// optional bool encrypt_arc_package = 41;
bool NigoriSpecifics::has_encrypt_arc_package() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_arc_package() {
  _has_bits_[0] |= 0x40000000u;
}
void NigoriSpecifics::clear_has_encrypt_arc_package() {
  _has_bits_[0] &= ~0x40000000u;
}
void NigoriSpecifics::clear_encrypt_arc_package() {
  encrypt_arc_package_ = false;
  clear_has_encrypt_arc_package();
}
bool NigoriSpecifics::encrypt_arc_package() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_arc_package)
  return encrypt_arc_package_;
}
void NigoriSpecifics::set_encrypt_arc_package(bool value) {
  set_has_encrypt_arc_package();
  encrypt_arc_package_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_arc_package)
}

// optional bool encrypt_printers = 42;
bool NigoriSpecifics::has_encrypt_printers() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_printers() {
  _has_bits_[0] |= 0x00100000u;
}
void NigoriSpecifics::clear_has_encrypt_printers() {
  _has_bits_[0] &= ~0x00100000u;
}
void NigoriSpecifics::clear_encrypt_printers() {
  encrypt_printers_ = false;
  clear_has_encrypt_printers();
}
bool NigoriSpecifics::encrypt_printers() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_printers)
  return encrypt_printers_;
}
void NigoriSpecifics::set_encrypt_printers(bool value) {
  set_has_encrypt_printers();
  encrypt_printers_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_printers)
}

// optional bool encrypt_reading_list = 43;
bool NigoriSpecifics::has_encrypt_reading_list() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_reading_list() {
  _has_bits_[0] |= 0x00200000u;
}
void NigoriSpecifics::clear_has_encrypt_reading_list() {
  _has_bits_[0] &= ~0x00200000u;
}
void NigoriSpecifics::clear_encrypt_reading_list() {
  encrypt_reading_list_ = false;
  clear_has_encrypt_reading_list();
}
bool NigoriSpecifics::encrypt_reading_list() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_reading_list)
  return encrypt_reading_list_;
}
void NigoriSpecifics::set_encrypt_reading_list(bool value) {
  set_has_encrypt_reading_list();
  encrypt_reading_list_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_reading_list)
}

// optional bool encrypt_mountain_shares = 44;
bool NigoriSpecifics::has_encrypt_mountain_shares() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void NigoriSpecifics::set_has_encrypt_mountain_shares() {
  _has_bits_[0] |= 0x00400000u;
}
void NigoriSpecifics::clear_has_encrypt_mountain_shares() {
  _has_bits_[0] &= ~0x00400000u;
}
void NigoriSpecifics::clear_encrypt_mountain_shares() {
  encrypt_mountain_shares_ = false;
  clear_has_encrypt_mountain_shares();
}
bool NigoriSpecifics::encrypt_mountain_shares() const {
  // @@protoc_insertion_point(field_get:sync_pb.NigoriSpecifics.encrypt_mountain_shares)
  return encrypt_mountain_shares_;
}
void NigoriSpecifics::set_encrypt_mountain_shares(bool value) {
  set_has_encrypt_mountain_shares();
  encrypt_mountain_shares_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.NigoriSpecifics.encrypt_mountain_shares)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
