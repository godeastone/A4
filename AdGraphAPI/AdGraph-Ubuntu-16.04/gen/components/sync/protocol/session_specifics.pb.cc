// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "session_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class SessionSpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionSpecifics> {
} _SessionSpecifics_default_instance_;
class SessionHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionHeader> {
} _SessionHeader_default_instance_;
class SessionWindowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionWindow> {
} _SessionWindow_default_instance_;
class SessionTabDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionTab> {
} _SessionTab_default_instance_;
class TabNavigationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TabNavigation> {
} _TabNavigation_default_instance_;
class NavigationRedirectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NavigationRedirect> {
} _NavigationRedirect_default_instance_;
class ReplacedNavigationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReplacedNavigation> {
} _ReplacedNavigation_default_instance_;

namespace protobuf_session_5fspecifics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SessionSpecifics_default_instance_.Shutdown();
  _SessionHeader_default_instance_.Shutdown();
  _SessionWindow_default_instance_.Shutdown();
  _SessionTab_default_instance_.Shutdown();
  _TabNavigation_default_instance_.Shutdown();
  _NavigationRedirect_default_instance_.Shutdown();
  _ReplacedNavigation_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sync_pb::protobuf_sync_5fenums_2eproto::InitDefaults();
  _SessionSpecifics_default_instance_.DefaultConstruct();
  _SessionHeader_default_instance_.DefaultConstruct();
  _SessionWindow_default_instance_.DefaultConstruct();
  _SessionTab_default_instance_.DefaultConstruct();
  _TabNavigation_default_instance_.DefaultConstruct();
  _NavigationRedirect_default_instance_.DefaultConstruct();
  _ReplacedNavigation_default_instance_.DefaultConstruct();
  _SessionSpecifics_default_instance_.get_mutable()->header_ = const_cast< ::sync_pb::SessionHeader*>(
      ::sync_pb::SessionHeader::internal_default_instance());
  _SessionSpecifics_default_instance_.get_mutable()->tab_ = const_cast< ::sync_pb::SessionTab*>(
      ::sync_pb::SessionTab::internal_default_instance());
  _TabNavigation_default_instance_.get_mutable()->replaced_navigation_ = const_cast< ::sync_pb::ReplacedNavigation*>(
      ::sync_pb::ReplacedNavigation::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::sync_pb::protobuf_sync_5fenums_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_session_5fspecifics_2eproto

bool SessionWindow_BrowserType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionWindow_BrowserType SessionWindow::TYPE_TABBED;
const SessionWindow_BrowserType SessionWindow::TYPE_POPUP;
const SessionWindow_BrowserType SessionWindow::TYPE_CUSTOM_TAB;
const SessionWindow_BrowserType SessionWindow::BrowserType_MIN;
const SessionWindow_BrowserType SessionWindow::BrowserType_MAX;
const int SessionWindow::BrowserType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SessionTab_FaviconType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionTab_FaviconType SessionTab::TYPE_WEB_FAVICON;
const SessionTab_FaviconType SessionTab::FaviconType_MIN;
const SessionTab_FaviconType SessionTab::FaviconType_MAX;
const int SessionTab::FaviconType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TabNavigation_BlockedState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TabNavigation_BlockedState TabNavigation::STATE_ALLOWED;
const TabNavigation_BlockedState TabNavigation::STATE_BLOCKED;
const TabNavigation_BlockedState TabNavigation::BlockedState_MIN;
const TabNavigation_BlockedState TabNavigation::BlockedState_MAX;
const int TabNavigation::BlockedState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TabNavigation_PasswordState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TabNavigation_PasswordState TabNavigation::PASSWORD_STATE_UNKNOWN;
const TabNavigation_PasswordState TabNavigation::NO_PASSWORD_FIELD;
const TabNavigation_PasswordState TabNavigation::HAS_PASSWORD_FIELD;
const TabNavigation_PasswordState TabNavigation::PasswordState_MIN;
const TabNavigation_PasswordState TabNavigation::PasswordState_MAX;
const int TabNavigation::PasswordState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionSpecifics::kSessionTagFieldNumber;
const int SessionSpecifics::kHeaderFieldNumber;
const int SessionSpecifics::kTabFieldNumber;
const int SessionSpecifics::kTabNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionSpecifics::SessionSpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SessionSpecifics)
}
SessionSpecifics::SessionSpecifics(const SessionSpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_tag()) {
    session_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_tag_);
  }
  if (from.has_header()) {
    header_ = new ::sync_pb::SessionHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_tab()) {
    tab_ = new ::sync_pb::SessionTab(*from.tab_);
  } else {
    tab_ = NULL;
  }
  tab_node_id_ = from.tab_node_id_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SessionSpecifics)
}

void SessionSpecifics::SharedCtor() {
  _cached_size_ = 0;
  session_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tab_) -
      reinterpret_cast<char*>(&header_)) + sizeof(tab_));
  tab_node_id_ = -1;
}

SessionSpecifics::~SessionSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.SessionSpecifics)
  SharedDtor();
}

void SessionSpecifics::SharedDtor() {
  session_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete tab_;
  }
}

void SessionSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionSpecifics& SessionSpecifics::default_instance() {
  protobuf_session_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionSpecifics* SessionSpecifics::New(::google::protobuf::Arena* arena) const {
  SessionSpecifics* n = new SessionSpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SessionSpecifics)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_session_tag()) {
      GOOGLE_DCHECK(!session_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*session_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::sync_pb::SessionHeader::Clear();
    }
    if (has_tab()) {
      GOOGLE_DCHECK(tab_ != NULL);
      tab_->::sync_pb::SessionTab::Clear();
    }
    tab_node_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SessionSpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SessionHeader header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SessionTab tab = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tab()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tab_node_id = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tab_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SessionSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SessionSpecifics)
  return false;
#undef DO_
}

void SessionSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SessionSpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_tag(), output);
  }

  // optional .sync_pb.SessionHeader header = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->header_, output);
  }

  // optional .sync_pb.SessionTab tab = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->tab_, output);
  }

  // optional int32 tab_node_id = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tab_node_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SessionSpecifics)
}

size_t SessionSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SessionSpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string session_tag = 1;
    if (has_session_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_tag());
    }

    // optional .sync_pb.SessionHeader header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .sync_pb.SessionTab tab = 3;
    if (has_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tab_);
    }

    // optional int32 tab_node_id = 4 [default = -1];
    if (has_tab_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_node_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionSpecifics*>(&from));
}

void SessionSpecifics::MergeFrom(const SessionSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SessionSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_session_tag();
      session_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::sync_pb::SessionHeader::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tab()->::sync_pb::SessionTab::MergeFrom(from.tab());
    }
    if (cached_has_bits & 0x00000008u) {
      tab_node_id_ = from.tab_node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionSpecifics::CopyFrom(const SessionSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SessionSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionSpecifics::IsInitialized() const {
  return true;
}

void SessionSpecifics::Swap(SessionSpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionSpecifics::InternalSwap(SessionSpecifics* other) {
  session_tag_.Swap(&other->session_tag_);
  std::swap(header_, other->header_);
  std::swap(tab_, other->tab_);
  std::swap(tab_node_id_, other->tab_node_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionSpecifics::GetTypeName() const {
  return "sync_pb.SessionSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionSpecifics

// optional string session_tag = 1;
bool SessionSpecifics::has_session_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionSpecifics::set_has_session_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionSpecifics::clear_has_session_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionSpecifics::clear_session_tag() {
  session_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_session_tag();
}
const ::std::string& SessionSpecifics::session_tag() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.session_tag)
  return session_tag_.GetNoArena();
}
void SessionSpecifics::set_session_tag(const ::std::string& value) {
  set_has_session_tag();
  session_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionSpecifics.session_tag)
}
#if LANG_CXX11
void SessionSpecifics::set_session_tag(::std::string&& value) {
  set_has_session_tag();
  session_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionSpecifics.session_tag)
}
#endif
void SessionSpecifics::set_session_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_session_tag();
  session_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionSpecifics.session_tag)
}
void SessionSpecifics::set_session_tag(const char* value, size_t size) {
  set_has_session_tag();
  session_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionSpecifics.session_tag)
}
::std::string* SessionSpecifics::mutable_session_tag() {
  set_has_session_tag();
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionSpecifics.session_tag)
  return session_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionSpecifics::release_session_tag() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionSpecifics.session_tag)
  clear_has_session_tag();
  return session_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionSpecifics::set_allocated_session_tag(::std::string* session_tag) {
  if (session_tag != NULL) {
    set_has_session_tag();
  } else {
    clear_has_session_tag();
  }
  session_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_tag);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionSpecifics.session_tag)
}

// optional .sync_pb.SessionHeader header = 2;
bool SessionSpecifics::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionSpecifics::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionSpecifics::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionSpecifics::clear_header() {
  if (header_ != NULL) header_->::sync_pb::SessionHeader::Clear();
  clear_has_header();
}
const ::sync_pb::SessionHeader& SessionSpecifics::header() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.header)
  return header_ != NULL ? *header_
                         : *::sync_pb::SessionHeader::internal_default_instance();
}
::sync_pb::SessionHeader* SessionSpecifics::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::sync_pb::SessionHeader;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionSpecifics.header)
  return header_;
}
::sync_pb::SessionHeader* SessionSpecifics::release_header() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionSpecifics.header)
  clear_has_header();
  ::sync_pb::SessionHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SessionSpecifics::set_allocated_header(::sync_pb::SessionHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionSpecifics.header)
}

// optional .sync_pb.SessionTab tab = 3;
bool SessionSpecifics::has_tab() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionSpecifics::set_has_tab() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionSpecifics::clear_has_tab() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionSpecifics::clear_tab() {
  if (tab_ != NULL) tab_->::sync_pb::SessionTab::Clear();
  clear_has_tab();
}
const ::sync_pb::SessionTab& SessionSpecifics::tab() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.tab)
  return tab_ != NULL ? *tab_
                         : *::sync_pb::SessionTab::internal_default_instance();
}
::sync_pb::SessionTab* SessionSpecifics::mutable_tab() {
  set_has_tab();
  if (tab_ == NULL) {
    tab_ = new ::sync_pb::SessionTab;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionSpecifics.tab)
  return tab_;
}
::sync_pb::SessionTab* SessionSpecifics::release_tab() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionSpecifics.tab)
  clear_has_tab();
  ::sync_pb::SessionTab* temp = tab_;
  tab_ = NULL;
  return temp;
}
void SessionSpecifics::set_allocated_tab(::sync_pb::SessionTab* tab) {
  delete tab_;
  tab_ = tab;
  if (tab) {
    set_has_tab();
  } else {
    clear_has_tab();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionSpecifics.tab)
}

// optional int32 tab_node_id = 4 [default = -1];
bool SessionSpecifics::has_tab_node_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionSpecifics::set_has_tab_node_id() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionSpecifics::clear_has_tab_node_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionSpecifics::clear_tab_node_id() {
  tab_node_id_ = -1;
  clear_has_tab_node_id();
}
::google::protobuf::int32 SessionSpecifics::tab_node_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionSpecifics.tab_node_id)
  return tab_node_id_;
}
void SessionSpecifics::set_tab_node_id(::google::protobuf::int32 value) {
  set_has_tab_node_id();
  tab_node_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionSpecifics.tab_node_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionHeader::kWindowFieldNumber;
const int SessionHeader::kClientNameFieldNumber;
const int SessionHeader::kDeviceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionHeader::SessionHeader()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SessionHeader)
}
SessionHeader::SessionHeader(const SessionHeader& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      window_(from.window_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_name()) {
    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  device_type_ = from.device_type_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.SessionHeader)
}

void SessionHeader::SharedCtor() {
  _cached_size_ = 0;
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
}

SessionHeader::~SessionHeader() {
  // @@protoc_insertion_point(destructor:sync_pb.SessionHeader)
  SharedDtor();
}

void SessionHeader::SharedDtor() {
  client_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionHeader& SessionHeader::default_instance() {
  protobuf_session_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionHeader* SessionHeader::New(::google::protobuf::Arena* arena) const {
  SessionHeader* n = new SessionHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SessionHeader)
  window_.Clear();
  if (has_client_name()) {
    GOOGLE_DCHECK(!client_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*client_name_.UnsafeRawStringPointer())->clear();
  }
  device_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SessionHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sync_pb.SessionWindow window = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::sync_pb::SyncEnums_DeviceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SessionHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SessionHeader)
  return false;
#undef DO_
}

void SessionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SessionHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sync_pb.SessionWindow window = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->window_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->window(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string client_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_name(), output);
  }

  // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->device_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SessionHeader)
}

size_t SessionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SessionHeader)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.SessionWindow window = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->window_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->window(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string client_name = 3;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional .sync_pb.SyncEnums.DeviceType device_type = 4;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionHeader*>(&from));
}

void SessionHeader::MergeFrom(const SessionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SessionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  window_.MergeFrom(from.window_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_client_name();
      client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_type_ = from.device_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionHeader::CopyFrom(const SessionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SessionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionHeader::IsInitialized() const {
  return true;
}

void SessionHeader::Swap(SessionHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionHeader::InternalSwap(SessionHeader* other) {
  window_.InternalSwap(&other->window_);
  client_name_.Swap(&other->client_name_);
  std::swap(device_type_, other->device_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionHeader::GetTypeName() const {
  return "sync_pb.SessionHeader";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionHeader

// repeated .sync_pb.SessionWindow window = 2;
int SessionHeader::window_size() const {
  return window_.size();
}
void SessionHeader::clear_window() {
  window_.Clear();
}
const ::sync_pb::SessionWindow& SessionHeader::window(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionHeader.window)
  return window_.Get(index);
}
::sync_pb::SessionWindow* SessionHeader::mutable_window(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionHeader.window)
  return window_.Mutable(index);
}
::sync_pb::SessionWindow* SessionHeader::add_window() {
  // @@protoc_insertion_point(field_add:sync_pb.SessionHeader.window)
  return window_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::SessionWindow >*
SessionHeader::mutable_window() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionHeader.window)
  return &window_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::SessionWindow >&
SessionHeader::window() const {
  // @@protoc_insertion_point(field_list:sync_pb.SessionHeader.window)
  return window_;
}

// optional string client_name = 3;
bool SessionHeader::has_client_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionHeader::set_has_client_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionHeader::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionHeader::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_name();
}
const ::std::string& SessionHeader::client_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionHeader.client_name)
  return client_name_.GetNoArena();
}
void SessionHeader::set_client_name(const ::std::string& value) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionHeader.client_name)
}
#if LANG_CXX11
void SessionHeader::set_client_name(::std::string&& value) {
  set_has_client_name();
  client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionHeader.client_name)
}
#endif
void SessionHeader::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionHeader.client_name)
}
void SessionHeader::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionHeader.client_name)
}
::std::string* SessionHeader::mutable_client_name() {
  set_has_client_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionHeader.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionHeader::release_client_name() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionHeader.client_name)
  clear_has_client_name();
  return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionHeader::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    set_has_client_name();
  } else {
    clear_has_client_name();
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionHeader.client_name)
}

// optional .sync_pb.SyncEnums.DeviceType device_type = 4;
bool SessionHeader::has_device_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionHeader::set_has_device_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionHeader::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionHeader::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
::sync_pb::SyncEnums_DeviceType SessionHeader::device_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionHeader.device_type)
  return static_cast< ::sync_pb::SyncEnums_DeviceType >(device_type_);
}
void SessionHeader::set_device_type(::sync_pb::SyncEnums_DeviceType value) {
  assert(::sync_pb::SyncEnums_DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionHeader.device_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionWindow::kWindowIdFieldNumber;
const int SessionWindow::kSelectedTabIndexFieldNumber;
const int SessionWindow::kBrowserTypeFieldNumber;
const int SessionWindow::kTabFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionWindow::SessionWindow()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SessionWindow)
}
SessionWindow::SessionWindow(const SessionWindow& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tab_(from.tab_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&window_id_, &from.window_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&browser_type_) -
    reinterpret_cast<char*>(&window_id_)) + sizeof(browser_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SessionWindow)
}

void SessionWindow::SharedCtor() {
  _cached_size_ = 0;
  window_id_ = 0;
  selected_tab_index_ = -1;
  browser_type_ = 1;
}

SessionWindow::~SessionWindow() {
  // @@protoc_insertion_point(destructor:sync_pb.SessionWindow)
  SharedDtor();
}

void SessionWindow::SharedDtor() {
}

void SessionWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionWindow& SessionWindow::default_instance() {
  protobuf_session_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionWindow* SessionWindow::New(::google::protobuf::Arena* arena) const {
  SessionWindow* n = new SessionWindow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionWindow::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SessionWindow)
  tab_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    window_id_ = 0;
    selected_tab_index_ = -1;
    browser_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SessionWindow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 window_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_window_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 selected_tab_index = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selected_tab_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_tab_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SessionWindow_BrowserType_IsValid(value)) {
            set_browser_type(static_cast< ::sync_pb::SessionWindow_BrowserType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 tab = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_tab())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tab())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SessionWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SessionWindow)
  return false;
#undef DO_
}

void SessionWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SessionWindow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 window_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_id(), output);
  }

  // optional int32 selected_tab_index = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selected_tab_index(), output);
  }

  // optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->browser_type(), output);
  }

  // repeated int32 tab = 4;
  for (int i = 0, n = this->tab_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->tab(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SessionWindow)
}

size_t SessionWindow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SessionWindow)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 tab = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->tab_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tab_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 window_id = 1;
    if (has_window_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_id());
    }

    // optional int32 selected_tab_index = 2 [default = -1];
    if (has_selected_tab_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selected_tab_index());
    }

    // optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
    if (has_browser_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->browser_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionWindow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionWindow*>(&from));
}

void SessionWindow::MergeFrom(const SessionWindow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SessionWindow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tab_.MergeFrom(from.tab_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      window_id_ = from.window_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      selected_tab_index_ = from.selected_tab_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      browser_type_ = from.browser_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionWindow::CopyFrom(const SessionWindow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SessionWindow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionWindow::IsInitialized() const {
  return true;
}

void SessionWindow::Swap(SessionWindow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionWindow::InternalSwap(SessionWindow* other) {
  tab_.InternalSwap(&other->tab_);
  std::swap(window_id_, other->window_id_);
  std::swap(selected_tab_index_, other->selected_tab_index_);
  std::swap(browser_type_, other->browser_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionWindow::GetTypeName() const {
  return "sync_pb.SessionWindow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionWindow

// optional int32 window_id = 1;
bool SessionWindow::has_window_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionWindow::set_has_window_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionWindow::clear_has_window_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionWindow::clear_window_id() {
  window_id_ = 0;
  clear_has_window_id();
}
::google::protobuf::int32 SessionWindow::window_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.window_id)
  return window_id_;
}
void SessionWindow::set_window_id(::google::protobuf::int32 value) {
  set_has_window_id();
  window_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.window_id)
}

// optional int32 selected_tab_index = 2 [default = -1];
bool SessionWindow::has_selected_tab_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionWindow::set_has_selected_tab_index() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionWindow::clear_has_selected_tab_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionWindow::clear_selected_tab_index() {
  selected_tab_index_ = -1;
  clear_has_selected_tab_index();
}
::google::protobuf::int32 SessionWindow::selected_tab_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.selected_tab_index)
  return selected_tab_index_;
}
void SessionWindow::set_selected_tab_index(::google::protobuf::int32 value) {
  set_has_selected_tab_index();
  selected_tab_index_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.selected_tab_index)
}

// optional .sync_pb.SessionWindow.BrowserType browser_type = 3 [default = TYPE_TABBED];
bool SessionWindow::has_browser_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionWindow::set_has_browser_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionWindow::clear_has_browser_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionWindow::clear_browser_type() {
  browser_type_ = 1;
  clear_has_browser_type();
}
::sync_pb::SessionWindow_BrowserType SessionWindow::browser_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.browser_type)
  return static_cast< ::sync_pb::SessionWindow_BrowserType >(browser_type_);
}
void SessionWindow::set_browser_type(::sync_pb::SessionWindow_BrowserType value) {
  assert(::sync_pb::SessionWindow_BrowserType_IsValid(value));
  set_has_browser_type();
  browser_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.browser_type)
}

// repeated int32 tab = 4;
int SessionWindow::tab_size() const {
  return tab_.size();
}
void SessionWindow::clear_tab() {
  tab_.Clear();
}
::google::protobuf::int32 SessionWindow::tab(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionWindow.tab)
  return tab_.Get(index);
}
void SessionWindow::set_tab(int index, ::google::protobuf::int32 value) {
  tab_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionWindow.tab)
}
void SessionWindow::add_tab(::google::protobuf::int32 value) {
  tab_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.SessionWindow.tab)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SessionWindow::tab() const {
  // @@protoc_insertion_point(field_list:sync_pb.SessionWindow.tab)
  return tab_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SessionWindow::mutable_tab() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionWindow.tab)
  return &tab_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionTab::kTabIdFieldNumber;
const int SessionTab::kWindowIdFieldNumber;
const int SessionTab::kTabVisualIndexFieldNumber;
const int SessionTab::kCurrentNavigationIndexFieldNumber;
const int SessionTab::kPinnedFieldNumber;
const int SessionTab::kExtensionAppIdFieldNumber;
const int SessionTab::kNavigationFieldNumber;
const int SessionTab::kFaviconFieldNumber;
const int SessionTab::kFaviconTypeFieldNumber;
const int SessionTab::kFaviconSourceFieldNumber;
const int SessionTab::kVariationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionTab::SessionTab()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.SessionTab)
}
SessionTab::SessionTab(const SessionTab& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      navigation_(from.navigation_),
      variation_id_(from.variation_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extension_app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_app_id()) {
    extension_app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_app_id_);
  }
  favicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_favicon()) {
    favicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_);
  }
  favicon_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_favicon_source()) {
    favicon_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_source_);
  }
  ::memcpy(&window_id_, &from.window_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&favicon_type_) -
    reinterpret_cast<char*>(&window_id_)) + sizeof(favicon_type_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.SessionTab)
}

void SessionTab::SharedCtor() {
  _cached_size_ = 0;
  extension_app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&window_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pinned_) -
      reinterpret_cast<char*>(&window_id_)) + sizeof(pinned_));
  tab_id_ = -1;
  tab_visual_index_ = -1;
  current_navigation_index_ = -1;
  favicon_type_ = 1;
}

SessionTab::~SessionTab() {
  // @@protoc_insertion_point(destructor:sync_pb.SessionTab)
  SharedDtor();
}

void SessionTab::SharedDtor() {
  extension_app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionTab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionTab& SessionTab::default_instance() {
  protobuf_session_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionTab* SessionTab::New(::google::protobuf::Arena* arena) const {
  SessionTab* n = new SessionTab;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionTab::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.SessionTab)
  navigation_.Clear();
  variation_id_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_extension_app_id()) {
      GOOGLE_DCHECK(!extension_app_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extension_app_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_favicon()) {
      GOOGLE_DCHECK(!favicon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*favicon_.UnsafeRawStringPointer())->clear();
    }
    if (has_favicon_source()) {
      GOOGLE_DCHECK(!favicon_source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*favicon_source_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&window_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pinned_) -
        reinterpret_cast<char*>(&window_id_)) + sizeof(pinned_));
    tab_id_ = -1;
    tab_visual_index_ = -1;
    current_navigation_index_ = -1;
  }
  favicon_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.SessionTab)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tab_id = 1 [default = -1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tab_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 window_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_window_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tab_visual_index = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tab_visual_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_visual_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_navigation_index = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_current_navigation_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_navigation_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pinned = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_pinned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pinned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extension_app_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_app_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.TabNavigation navigation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navigation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes favicon = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_favicon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SessionTab_FaviconType_IsValid(value)) {
            set_favicon_type(static_cast< ::sync_pb::SessionTab_FaviconType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string favicon_source = 11 [deprecated = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 variation_id = 12 [deprecated = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 96u, input, this->mutable_variation_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_variation_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.SessionTab)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.SessionTab)
  return false;
#undef DO_
}

void SessionTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.SessionTab)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tab_id = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tab_id(), output);
  }

  // optional int32 window_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->window_id(), output);
  }

  // optional int32 tab_visual_index = 3 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tab_visual_index(), output);
  }

  // optional int32 current_navigation_index = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_navigation_index(), output);
  }

  // optional bool pinned = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pinned(), output);
  }

  // optional string extension_app_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->extension_app_id(), output);
  }

  // repeated .sync_pb.TabNavigation navigation = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->navigation(static_cast<int>(i)), output);
  }

  // optional bytes favicon = 8 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->favicon(), output);
  }

  // optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->favicon_type(), output);
  }

  // optional string favicon_source = 11 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->favicon_source(), output);
  }

  // repeated uint64 variation_id = 12 [deprecated = true];
  for (int i = 0, n = this->variation_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      12, this->variation_id(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.SessionTab)
}

size_t SessionTab::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.SessionTab)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .sync_pb.TabNavigation navigation = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->navigation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->navigation(static_cast<int>(i)));
    }
  }

  // repeated uint64 variation_id = 12 [deprecated = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->variation_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->variation_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string extension_app_id = 6;
    if (has_extension_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension_app_id());
    }

    // optional bytes favicon = 8 [deprecated = true];
    if (has_favicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->favicon());
    }

    // optional string favicon_source = 11 [deprecated = true];
    if (has_favicon_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_source());
    }

    // optional int32 window_id = 2;
    if (has_window_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_id());
    }

    // optional bool pinned = 5 [default = false];
    if (has_pinned()) {
      total_size += 1 + 1;
    }

    // optional int32 tab_id = 1 [default = -1];
    if (has_tab_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_id());
    }

    // optional int32 tab_visual_index = 3 [default = -1];
    if (has_tab_visual_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_visual_index());
    }

    // optional int32 current_navigation_index = 4 [default = -1];
    if (has_current_navigation_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_navigation_index());
    }

  }
  // optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];
  if (has_favicon_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->favicon_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionTab::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionTab*>(&from));
}

void SessionTab::MergeFrom(const SessionTab& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.SessionTab)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  navigation_.MergeFrom(from.navigation_);
  variation_id_.MergeFrom(from.variation_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extension_app_id();
      extension_app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_app_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_favicon();
      favicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_favicon_source();
      favicon_source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_source_);
    }
    if (cached_has_bits & 0x00000008u) {
      window_id_ = from.window_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      pinned_ = from.pinned_;
    }
    if (cached_has_bits & 0x00000020u) {
      tab_id_ = from.tab_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      tab_visual_index_ = from.tab_visual_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      current_navigation_index_ = from.current_navigation_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_favicon_type(from.favicon_type());
  }
}

void SessionTab::CopyFrom(const SessionTab& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.SessionTab)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionTab::IsInitialized() const {
  return true;
}

void SessionTab::Swap(SessionTab* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionTab::InternalSwap(SessionTab* other) {
  navigation_.InternalSwap(&other->navigation_);
  variation_id_.InternalSwap(&other->variation_id_);
  extension_app_id_.Swap(&other->extension_app_id_);
  favicon_.Swap(&other->favicon_);
  favicon_source_.Swap(&other->favicon_source_);
  std::swap(window_id_, other->window_id_);
  std::swap(pinned_, other->pinned_);
  std::swap(tab_id_, other->tab_id_);
  std::swap(tab_visual_index_, other->tab_visual_index_);
  std::swap(current_navigation_index_, other->current_navigation_index_);
  std::swap(favicon_type_, other->favicon_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionTab::GetTypeName() const {
  return "sync_pb.SessionTab";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionTab

// optional int32 tab_id = 1 [default = -1];
bool SessionTab::has_tab_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SessionTab::set_has_tab_id() {
  _has_bits_[0] |= 0x00000020u;
}
void SessionTab::clear_has_tab_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void SessionTab::clear_tab_id() {
  tab_id_ = -1;
  clear_has_tab_id();
}
::google::protobuf::int32 SessionTab::tab_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.tab_id)
  return tab_id_;
}
void SessionTab::set_tab_id(::google::protobuf::int32 value) {
  set_has_tab_id();
  tab_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.tab_id)
}

// optional int32 window_id = 2;
bool SessionTab::has_window_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SessionTab::set_has_window_id() {
  _has_bits_[0] |= 0x00000008u;
}
void SessionTab::clear_has_window_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void SessionTab::clear_window_id() {
  window_id_ = 0;
  clear_has_window_id();
}
::google::protobuf::int32 SessionTab::window_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.window_id)
  return window_id_;
}
void SessionTab::set_window_id(::google::protobuf::int32 value) {
  set_has_window_id();
  window_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.window_id)
}

// optional int32 tab_visual_index = 3 [default = -1];
bool SessionTab::has_tab_visual_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SessionTab::set_has_tab_visual_index() {
  _has_bits_[0] |= 0x00000040u;
}
void SessionTab::clear_has_tab_visual_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void SessionTab::clear_tab_visual_index() {
  tab_visual_index_ = -1;
  clear_has_tab_visual_index();
}
::google::protobuf::int32 SessionTab::tab_visual_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.tab_visual_index)
  return tab_visual_index_;
}
void SessionTab::set_tab_visual_index(::google::protobuf::int32 value) {
  set_has_tab_visual_index();
  tab_visual_index_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.tab_visual_index)
}

// optional int32 current_navigation_index = 4 [default = -1];
bool SessionTab::has_current_navigation_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SessionTab::set_has_current_navigation_index() {
  _has_bits_[0] |= 0x00000080u;
}
void SessionTab::clear_has_current_navigation_index() {
  _has_bits_[0] &= ~0x00000080u;
}
void SessionTab::clear_current_navigation_index() {
  current_navigation_index_ = -1;
  clear_has_current_navigation_index();
}
::google::protobuf::int32 SessionTab::current_navigation_index() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.current_navigation_index)
  return current_navigation_index_;
}
void SessionTab::set_current_navigation_index(::google::protobuf::int32 value) {
  set_has_current_navigation_index();
  current_navigation_index_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.current_navigation_index)
}

// optional bool pinned = 5 [default = false];
bool SessionTab::has_pinned() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SessionTab::set_has_pinned() {
  _has_bits_[0] |= 0x00000010u;
}
void SessionTab::clear_has_pinned() {
  _has_bits_[0] &= ~0x00000010u;
}
void SessionTab::clear_pinned() {
  pinned_ = false;
  clear_has_pinned();
}
bool SessionTab::pinned() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.pinned)
  return pinned_;
}
void SessionTab::set_pinned(bool value) {
  set_has_pinned();
  pinned_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.pinned)
}

// optional string extension_app_id = 6;
bool SessionTab::has_extension_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SessionTab::set_has_extension_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SessionTab::clear_has_extension_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SessionTab::clear_extension_app_id() {
  extension_app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extension_app_id();
}
const ::std::string& SessionTab::extension_app_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.extension_app_id)
  return extension_app_id_.GetNoArena();
}
void SessionTab::set_extension_app_id(const ::std::string& value) {
  set_has_extension_app_id();
  extension_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.extension_app_id)
}
#if LANG_CXX11
void SessionTab::set_extension_app_id(::std::string&& value) {
  set_has_extension_app_id();
  extension_app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionTab.extension_app_id)
}
#endif
void SessionTab::set_extension_app_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extension_app_id();
  extension_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionTab.extension_app_id)
}
void SessionTab::set_extension_app_id(const char* value, size_t size) {
  set_has_extension_app_id();
  extension_app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionTab.extension_app_id)
}
::std::string* SessionTab::mutable_extension_app_id() {
  set_has_extension_app_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.extension_app_id)
  return extension_app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionTab::release_extension_app_id() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionTab.extension_app_id)
  clear_has_extension_app_id();
  return extension_app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionTab::set_allocated_extension_app_id(::std::string* extension_app_id) {
  if (extension_app_id != NULL) {
    set_has_extension_app_id();
  } else {
    clear_has_extension_app_id();
  }
  extension_app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extension_app_id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionTab.extension_app_id)
}

// repeated .sync_pb.TabNavigation navigation = 7;
int SessionTab::navigation_size() const {
  return navigation_.size();
}
void SessionTab::clear_navigation() {
  navigation_.Clear();
}
const ::sync_pb::TabNavigation& SessionTab::navigation(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.navigation)
  return navigation_.Get(index);
}
::sync_pb::TabNavigation* SessionTab::mutable_navigation(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.navigation)
  return navigation_.Mutable(index);
}
::sync_pb::TabNavigation* SessionTab::add_navigation() {
  // @@protoc_insertion_point(field_add:sync_pb.SessionTab.navigation)
  return navigation_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::TabNavigation >*
SessionTab::mutable_navigation() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionTab.navigation)
  return &navigation_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::TabNavigation >&
SessionTab::navigation() const {
  // @@protoc_insertion_point(field_list:sync_pb.SessionTab.navigation)
  return navigation_;
}

// optional bytes favicon = 8 [deprecated = true];
bool SessionTab::has_favicon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SessionTab::set_has_favicon() {
  _has_bits_[0] |= 0x00000002u;
}
void SessionTab::clear_has_favicon() {
  _has_bits_[0] &= ~0x00000002u;
}
void SessionTab::clear_favicon() {
  favicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon();
}
const ::std::string& SessionTab::favicon() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.favicon)
  return favicon_.GetNoArena();
}
void SessionTab::set_favicon(const ::std::string& value) {
  set_has_favicon();
  favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.favicon)
}
#if LANG_CXX11
void SessionTab::set_favicon(::std::string&& value) {
  set_has_favicon();
  favicon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionTab.favicon)
}
#endif
void SessionTab::set_favicon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon();
  favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionTab.favicon)
}
void SessionTab::set_favicon(const void* value, size_t size) {
  set_has_favicon();
  favicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionTab.favicon)
}
::std::string* SessionTab::mutable_favicon() {
  set_has_favicon();
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.favicon)
  return favicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionTab::release_favicon() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionTab.favicon)
  clear_has_favicon();
  return favicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionTab::set_allocated_favicon(::std::string* favicon) {
  if (favicon != NULL) {
    set_has_favicon();
  } else {
    clear_has_favicon();
  }
  favicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionTab.favicon)
}

// optional .sync_pb.SessionTab.FaviconType favicon_type = 9 [deprecated = true];
bool SessionTab::has_favicon_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SessionTab::set_has_favicon_type() {
  _has_bits_[0] |= 0x00000100u;
}
void SessionTab::clear_has_favicon_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void SessionTab::clear_favicon_type() {
  favicon_type_ = 1;
  clear_has_favicon_type();
}
::sync_pb::SessionTab_FaviconType SessionTab::favicon_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.favicon_type)
  return static_cast< ::sync_pb::SessionTab_FaviconType >(favicon_type_);
}
void SessionTab::set_favicon_type(::sync_pb::SessionTab_FaviconType value) {
  assert(::sync_pb::SessionTab_FaviconType_IsValid(value));
  set_has_favicon_type();
  favicon_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.favicon_type)
}

// optional string favicon_source = 11 [deprecated = true];
bool SessionTab::has_favicon_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SessionTab::set_has_favicon_source() {
  _has_bits_[0] |= 0x00000004u;
}
void SessionTab::clear_has_favicon_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void SessionTab::clear_favicon_source() {
  favicon_source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon_source();
}
const ::std::string& SessionTab::favicon_source() const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.favicon_source)
  return favicon_source_.GetNoArena();
}
void SessionTab::set_favicon_source(const ::std::string& value) {
  set_has_favicon_source();
  favicon_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.favicon_source)
}
#if LANG_CXX11
void SessionTab::set_favicon_source(::std::string&& value) {
  set_has_favicon_source();
  favicon_source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.SessionTab.favicon_source)
}
#endif
void SessionTab::set_favicon_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon_source();
  favicon_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.SessionTab.favicon_source)
}
void SessionTab::set_favicon_source(const char* value, size_t size) {
  set_has_favicon_source();
  favicon_source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.SessionTab.favicon_source)
}
::std::string* SessionTab::mutable_favicon_source() {
  set_has_favicon_source();
  // @@protoc_insertion_point(field_mutable:sync_pb.SessionTab.favicon_source)
  return favicon_source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionTab::release_favicon_source() {
  // @@protoc_insertion_point(field_release:sync_pb.SessionTab.favicon_source)
  clear_has_favicon_source();
  return favicon_source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionTab::set_allocated_favicon_source(::std::string* favicon_source) {
  if (favicon_source != NULL) {
    set_has_favicon_source();
  } else {
    clear_has_favicon_source();
  }
  favicon_source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_source);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.SessionTab.favicon_source)
}

// repeated uint64 variation_id = 12 [deprecated = true];
int SessionTab::variation_id_size() const {
  return variation_id_.size();
}
void SessionTab::clear_variation_id() {
  variation_id_.Clear();
}
::google::protobuf::uint64 SessionTab::variation_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.SessionTab.variation_id)
  return variation_id_.Get(index);
}
void SessionTab::set_variation_id(int index, ::google::protobuf::uint64 value) {
  variation_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.SessionTab.variation_id)
}
void SessionTab::add_variation_id(::google::protobuf::uint64 value) {
  variation_id_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.SessionTab.variation_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SessionTab::variation_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.SessionTab.variation_id)
  return variation_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SessionTab::mutable_variation_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.SessionTab.variation_id)
  return &variation_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TabNavigation::kVirtualUrlFieldNumber;
const int TabNavigation::kReferrerFieldNumber;
const int TabNavigation::kTitleFieldNumber;
const int TabNavigation::kPageTransitionFieldNumber;
const int TabNavigation::kRedirectTypeFieldNumber;
const int TabNavigation::kUniqueIdFieldNumber;
const int TabNavigation::kTimestampMsecFieldNumber;
const int TabNavigation::kNavigationForwardBackFieldNumber;
const int TabNavigation::kNavigationFromAddressBarFieldNumber;
const int TabNavigation::kNavigationHomePageFieldNumber;
const int TabNavigation::kNavigationChainStartFieldNumber;
const int TabNavigation::kNavigationChainEndFieldNumber;
const int TabNavigation::kGlobalIdFieldNumber;
const int TabNavigation::kSearchTermsFieldNumber;
const int TabNavigation::kFaviconUrlFieldNumber;
const int TabNavigation::kBlockedStateFieldNumber;
const int TabNavigation::kContentPackCategoriesFieldNumber;
const int TabNavigation::kHttpStatusCodeFieldNumber;
const int TabNavigation::kObsoleteReferrerPolicyFieldNumber;
const int TabNavigation::kIsRestoredFieldNumber;
const int TabNavigation::kNavigationRedirectFieldNumber;
const int TabNavigation::kLastNavigationRedirectUrlFieldNumber;
const int TabNavigation::kCorrectReferrerPolicyFieldNumber;
const int TabNavigation::kPasswordStateFieldNumber;
const int TabNavigation::kTaskIdFieldNumber;
const int TabNavigation::kAncestorTaskIdFieldNumber;
const int TabNavigation::kReplacedNavigationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TabNavigation::TabNavigation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.TabNavigation)
}
TabNavigation::TabNavigation(const TabNavigation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      content_pack_categories_(from.content_pack_categories_),
      navigation_redirect_(from.navigation_redirect_),
      ancestor_task_id_(from.ancestor_task_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  virtual_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_virtual_url()) {
    virtual_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_url_);
  }
  referrer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_referrer()) {
    referrer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referrer_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  search_terms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_terms()) {
    search_terms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_terms_);
  }
  favicon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_favicon_url()) {
    favicon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_url_);
  }
  last_navigation_redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_navigation_redirect_url()) {
    last_navigation_redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_navigation_redirect_url_);
  }
  if (from.has_replaced_navigation()) {
    replaced_navigation_ = new ::sync_pb::ReplacedNavigation(*from.replaced_navigation_);
  } else {
    replaced_navigation_ = NULL;
  }
  ::memcpy(&page_transition_, &from.page_transition_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocked_state_) -
    reinterpret_cast<char*>(&page_transition_)) + sizeof(blocked_state_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.TabNavigation)
}

void TabNavigation::SharedCtor() {
  _cached_size_ = 0;
  virtual_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referrer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_terms_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_navigation_redirect_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&replaced_navigation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&password_state_) -
      reinterpret_cast<char*>(&replaced_navigation_)) + sizeof(password_state_));
  correct_referrer_policy_ = 1;
  redirect_type_ = 1;
  blocked_state_ = 1;
}

TabNavigation::~TabNavigation() {
  // @@protoc_insertion_point(destructor:sync_pb.TabNavigation)
  SharedDtor();
}

void TabNavigation::SharedDtor() {
  virtual_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referrer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_terms_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  favicon_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_navigation_redirect_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete replaced_navigation_;
  }
}

void TabNavigation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TabNavigation& TabNavigation::default_instance() {
  protobuf_session_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

TabNavigation* TabNavigation::New(::google::protobuf::Arena* arena) const {
  TabNavigation* n = new TabNavigation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TabNavigation::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.TabNavigation)
  content_pack_categories_.Clear();
  navigation_redirect_.Clear();
  ancestor_task_id_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_virtual_url()) {
      GOOGLE_DCHECK(!virtual_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*virtual_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_referrer()) {
      GOOGLE_DCHECK(!referrer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*referrer_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_search_terms()) {
      GOOGLE_DCHECK(!search_terms_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*search_terms_.UnsafeRawStringPointer())->clear();
    }
    if (has_favicon_url()) {
      GOOGLE_DCHECK(!favicon_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*favicon_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_last_navigation_redirect_url()) {
      GOOGLE_DCHECK(!last_navigation_redirect_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*last_navigation_redirect_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_replaced_navigation()) {
      GOOGLE_DCHECK(replaced_navigation_ != NULL);
      replaced_navigation_->::sync_pb::ReplacedNavigation::Clear();
    }
  }
  page_transition_ = 0;
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&unique_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_restored_) -
        reinterpret_cast<char*>(&unique_id_)) + sizeof(is_restored_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&global_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&password_state_) -
        reinterpret_cast<char*>(&global_id_)) + sizeof(password_state_));
    correct_referrer_policy_ = 1;
    redirect_type_ = 1;
    blocked_state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TabNavigation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.TabNavigation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtual_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string referrer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referrer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = LINK];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_PageTransition_IsValid(value)) {
            set_page_transition(static_cast< ::sync_pb::SyncEnums_PageTransition >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_PageTransitionRedirectType_IsValid(value)) {
            set_redirect_type(static_cast< ::sync_pb::SyncEnums_PageTransitionRedirectType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unique_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_unique_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_msec = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_timestamp_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool navigation_forward_back = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_navigation_forward_back();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_forward_back_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool navigation_from_address_bar = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_navigation_from_address_bar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_from_address_bar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool navigation_home_page = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_navigation_home_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_home_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool navigation_chain_start = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_navigation_chain_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_chain_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool navigation_chain_end = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_navigation_chain_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_chain_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 global_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_global_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &global_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string search_terms = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string favicon_url = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_favicon_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::TabNavigation_BlockedState_IsValid(value)) {
            set_blocked_state(static_cast< ::sync_pb::TabNavigation_BlockedState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(144u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string content_pack_categories = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_content_pack_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 http_status_code = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_http_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obsolete_referrer_policy = 21 [deprecated = true];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_obsolete_referrer_policy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obsolete_referrer_policy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_restored = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_is_restored();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_restored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navigation_redirect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_navigation_redirect_url = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_navigation_redirect_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 correct_referrer_policy = 25 [default = 1];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_correct_referrer_policy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &correct_referrer_policy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.TabNavigation.PasswordState password_state = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::TabNavigation_PasswordState_IsValid(value)) {
            set_password_state(static_cast< ::sync_pb::TabNavigation_PasswordState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(208u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 task_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_task_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 ancestor_task_id = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 224u, input, this->mutable_ancestor_task_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(226u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ancestor_task_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.ReplacedNavigation replaced_navigation = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replaced_navigation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.TabNavigation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.TabNavigation)
  return false;
#undef DO_
}

void TabNavigation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.TabNavigation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string virtual_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->virtual_url(), output);
  }

  // optional string referrer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->referrer(), output);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = LINK];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->page_transition(), output);
  }

  // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->redirect_type(), output);
  }

  // optional int32 unique_id = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->unique_id(), output);
  }

  // optional int64 timestamp_msec = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->timestamp_msec(), output);
  }

  // optional bool navigation_forward_back = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->navigation_forward_back(), output);
  }

  // optional bool navigation_from_address_bar = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->navigation_from_address_bar(), output);
  }

  // optional bool navigation_home_page = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->navigation_home_page(), output);
  }

  // optional bool navigation_chain_start = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->navigation_chain_start(), output);
  }

  // optional bool navigation_chain_end = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->navigation_chain_end(), output);
  }

  // optional int64 global_id = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->global_id(), output);
  }

  // optional string search_terms = 16 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->search_terms(), output);
  }

  // optional string favicon_url = 17;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->favicon_url(), output);
  }

  // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->blocked_state(), output);
  }

  // repeated string content_pack_categories = 19;
  for (int i = 0, n = this->content_pack_categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->content_pack_categories(i), output);
  }

  // optional int32 http_status_code = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->http_status_code(), output);
  }

  // optional int32 obsolete_referrer_policy = 21 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->obsolete_referrer_policy(), output);
  }

  // optional bool is_restored = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_restored(), output);
  }

  // repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigation_redirect_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->navigation_redirect(static_cast<int>(i)), output);
  }

  // optional string last_navigation_redirect_url = 24;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->last_navigation_redirect_url(), output);
  }

  // optional int32 correct_referrer_policy = 25 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->correct_referrer_policy(), output);
  }

  // optional .sync_pb.TabNavigation.PasswordState password_state = 26;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->password_state(), output);
  }

  // optional int64 task_id = 27;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->task_id(), output);
  }

  // repeated int64 ancestor_task_id = 28;
  for (int i = 0, n = this->ancestor_task_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      28, this->ancestor_task_id(i), output);
  }

  // optional .sync_pb.ReplacedNavigation replaced_navigation = 29;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, *this->replaced_navigation_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.TabNavigation)
}

size_t TabNavigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.TabNavigation)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated string content_pack_categories = 19;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->content_pack_categories_size());
  for (int i = 0, n = this->content_pack_categories_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->content_pack_categories(i));
  }

  // repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->navigation_redirect_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->navigation_redirect(static_cast<int>(i)));
    }
  }

  // repeated int64 ancestor_task_id = 28;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->ancestor_task_id_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->ancestor_task_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string virtual_url = 2;
    if (has_virtual_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virtual_url());
    }

    // optional string referrer = 3;
    if (has_referrer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referrer());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string search_terms = 16 [deprecated = true];
    if (has_search_terms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_terms());
    }

    // optional string favicon_url = 17;
    if (has_favicon_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->favicon_url());
    }

    // optional string last_navigation_redirect_url = 24;
    if (has_last_navigation_redirect_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_navigation_redirect_url());
    }

    // optional .sync_pb.ReplacedNavigation replaced_navigation = 29;
    if (has_replaced_navigation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replaced_navigation_);
    }

    // optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = LINK];
    if (has_page_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->page_transition());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 unique_id = 8;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unique_id());
    }

    // optional int64 timestamp_msec = 9;
    if (has_timestamp_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_msec());
    }

    // optional bool navigation_forward_back = 10;
    if (has_navigation_forward_back()) {
      total_size += 1 + 1;
    }

    // optional bool navigation_from_address_bar = 11;
    if (has_navigation_from_address_bar()) {
      total_size += 1 + 1;
    }

    // optional bool navigation_home_page = 12;
    if (has_navigation_home_page()) {
      total_size += 1 + 1;
    }

    // optional bool navigation_chain_start = 13;
    if (has_navigation_chain_start()) {
      total_size += 1 + 1;
    }

    // optional bool navigation_chain_end = 14;
    if (has_navigation_chain_end()) {
      total_size += 1 + 1;
    }

    // optional bool is_restored = 22;
    if (has_is_restored()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int64 global_id = 15;
    if (has_global_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->global_id());
    }

    // optional int32 http_status_code = 20;
    if (has_http_status_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->http_status_code());
    }

    // optional int32 obsolete_referrer_policy = 21 [deprecated = true];
    if (has_obsolete_referrer_policy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obsolete_referrer_policy());
    }

    // optional int64 task_id = 27;
    if (has_task_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

    // optional .sync_pb.TabNavigation.PasswordState password_state = 26;
    if (has_password_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->password_state());
    }

    // optional int32 correct_referrer_policy = 25 [default = 1];
    if (has_correct_referrer_policy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->correct_referrer_policy());
    }

    // optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
    if (has_redirect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->redirect_type());
    }

    // optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
    if (has_blocked_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blocked_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TabNavigation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TabNavigation*>(&from));
}

void TabNavigation::MergeFrom(const TabNavigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.TabNavigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_pack_categories_.MergeFrom(from.content_pack_categories_);
  navigation_redirect_.MergeFrom(from.navigation_redirect_);
  ancestor_task_id_.MergeFrom(from.ancestor_task_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_virtual_url();
      virtual_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_referrer();
      referrer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referrer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_search_terms();
      search_terms_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_terms_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_favicon_url();
      favicon_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.favicon_url_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_last_navigation_redirect_url();
      last_navigation_redirect_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_navigation_redirect_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_replaced_navigation()->::sync_pb::ReplacedNavigation::MergeFrom(from.replaced_navigation());
    }
    if (cached_has_bits & 0x00000080u) {
      page_transition_ = from.page_transition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      unique_id_ = from.unique_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_msec_ = from.timestamp_msec_;
    }
    if (cached_has_bits & 0x00000400u) {
      navigation_forward_back_ = from.navigation_forward_back_;
    }
    if (cached_has_bits & 0x00000800u) {
      navigation_from_address_bar_ = from.navigation_from_address_bar_;
    }
    if (cached_has_bits & 0x00001000u) {
      navigation_home_page_ = from.navigation_home_page_;
    }
    if (cached_has_bits & 0x00002000u) {
      navigation_chain_start_ = from.navigation_chain_start_;
    }
    if (cached_has_bits & 0x00004000u) {
      navigation_chain_end_ = from.navigation_chain_end_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_restored_ = from.is_restored_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      global_id_ = from.global_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      http_status_code_ = from.http_status_code_;
    }
    if (cached_has_bits & 0x00040000u) {
      obsolete_referrer_policy_ = from.obsolete_referrer_policy_;
    }
    if (cached_has_bits & 0x00080000u) {
      task_id_ = from.task_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      password_state_ = from.password_state_;
    }
    if (cached_has_bits & 0x00200000u) {
      correct_referrer_policy_ = from.correct_referrer_policy_;
    }
    if (cached_has_bits & 0x00400000u) {
      redirect_type_ = from.redirect_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      blocked_state_ = from.blocked_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TabNavigation::CopyFrom(const TabNavigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.TabNavigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabNavigation::IsInitialized() const {
  return true;
}

void TabNavigation::Swap(TabNavigation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TabNavigation::InternalSwap(TabNavigation* other) {
  content_pack_categories_.InternalSwap(&other->content_pack_categories_);
  navigation_redirect_.InternalSwap(&other->navigation_redirect_);
  ancestor_task_id_.InternalSwap(&other->ancestor_task_id_);
  virtual_url_.Swap(&other->virtual_url_);
  referrer_.Swap(&other->referrer_);
  title_.Swap(&other->title_);
  search_terms_.Swap(&other->search_terms_);
  favicon_url_.Swap(&other->favicon_url_);
  last_navigation_redirect_url_.Swap(&other->last_navigation_redirect_url_);
  std::swap(replaced_navigation_, other->replaced_navigation_);
  std::swap(page_transition_, other->page_transition_);
  std::swap(unique_id_, other->unique_id_);
  std::swap(timestamp_msec_, other->timestamp_msec_);
  std::swap(navigation_forward_back_, other->navigation_forward_back_);
  std::swap(navigation_from_address_bar_, other->navigation_from_address_bar_);
  std::swap(navigation_home_page_, other->navigation_home_page_);
  std::swap(navigation_chain_start_, other->navigation_chain_start_);
  std::swap(navigation_chain_end_, other->navigation_chain_end_);
  std::swap(is_restored_, other->is_restored_);
  std::swap(global_id_, other->global_id_);
  std::swap(http_status_code_, other->http_status_code_);
  std::swap(obsolete_referrer_policy_, other->obsolete_referrer_policy_);
  std::swap(task_id_, other->task_id_);
  std::swap(password_state_, other->password_state_);
  std::swap(correct_referrer_policy_, other->correct_referrer_policy_);
  std::swap(redirect_type_, other->redirect_type_);
  std::swap(blocked_state_, other->blocked_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TabNavigation::GetTypeName() const {
  return "sync_pb.TabNavigation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TabNavigation

// optional string virtual_url = 2;
bool TabNavigation::has_virtual_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TabNavigation::set_has_virtual_url() {
  _has_bits_[0] |= 0x00000001u;
}
void TabNavigation::clear_has_virtual_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void TabNavigation::clear_virtual_url() {
  virtual_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_virtual_url();
}
const ::std::string& TabNavigation::virtual_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.virtual_url)
  return virtual_url_.GetNoArena();
}
void TabNavigation::set_virtual_url(const ::std::string& value) {
  set_has_virtual_url();
  virtual_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.virtual_url)
}
#if LANG_CXX11
void TabNavigation::set_virtual_url(::std::string&& value) {
  set_has_virtual_url();
  virtual_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.virtual_url)
}
#endif
void TabNavigation::set_virtual_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_virtual_url();
  virtual_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.virtual_url)
}
void TabNavigation::set_virtual_url(const char* value, size_t size) {
  set_has_virtual_url();
  virtual_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.virtual_url)
}
::std::string* TabNavigation::mutable_virtual_url() {
  set_has_virtual_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.virtual_url)
  return virtual_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TabNavigation::release_virtual_url() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.virtual_url)
  clear_has_virtual_url();
  return virtual_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TabNavigation::set_allocated_virtual_url(::std::string* virtual_url) {
  if (virtual_url != NULL) {
    set_has_virtual_url();
  } else {
    clear_has_virtual_url();
  }
  virtual_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.virtual_url)
}

// optional string referrer = 3;
bool TabNavigation::has_referrer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TabNavigation::set_has_referrer() {
  _has_bits_[0] |= 0x00000002u;
}
void TabNavigation::clear_has_referrer() {
  _has_bits_[0] &= ~0x00000002u;
}
void TabNavigation::clear_referrer() {
  referrer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referrer();
}
const ::std::string& TabNavigation::referrer() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.referrer)
  return referrer_.GetNoArena();
}
void TabNavigation::set_referrer(const ::std::string& value) {
  set_has_referrer();
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.referrer)
}
#if LANG_CXX11
void TabNavigation::set_referrer(::std::string&& value) {
  set_has_referrer();
  referrer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.referrer)
}
#endif
void TabNavigation::set_referrer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_referrer();
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.referrer)
}
void TabNavigation::set_referrer(const char* value, size_t size) {
  set_has_referrer();
  referrer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.referrer)
}
::std::string* TabNavigation::mutable_referrer() {
  set_has_referrer();
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.referrer)
  return referrer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TabNavigation::release_referrer() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.referrer)
  clear_has_referrer();
  return referrer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TabNavigation::set_allocated_referrer(::std::string* referrer) {
  if (referrer != NULL) {
    set_has_referrer();
  } else {
    clear_has_referrer();
  }
  referrer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referrer);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.referrer)
}

// optional string title = 4;
bool TabNavigation::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TabNavigation::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void TabNavigation::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void TabNavigation::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& TabNavigation::title() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.title)
  return title_.GetNoArena();
}
void TabNavigation::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.title)
}
#if LANG_CXX11
void TabNavigation::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.title)
}
#endif
void TabNavigation::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.title)
}
void TabNavigation::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.title)
}
::std::string* TabNavigation::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TabNavigation::release_title() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TabNavigation::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.title)
}

// optional .sync_pb.SyncEnums.PageTransition page_transition = 6 [default = LINK];
bool TabNavigation::has_page_transition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TabNavigation::set_has_page_transition() {
  _has_bits_[0] |= 0x00000080u;
}
void TabNavigation::clear_has_page_transition() {
  _has_bits_[0] &= ~0x00000080u;
}
void TabNavigation::clear_page_transition() {
  page_transition_ = 0;
  clear_has_page_transition();
}
::sync_pb::SyncEnums_PageTransition TabNavigation::page_transition() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.page_transition)
  return static_cast< ::sync_pb::SyncEnums_PageTransition >(page_transition_);
}
void TabNavigation::set_page_transition(::sync_pb::SyncEnums_PageTransition value) {
  assert(::sync_pb::SyncEnums_PageTransition_IsValid(value));
  set_has_page_transition();
  page_transition_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.page_transition)
}

// optional .sync_pb.SyncEnums.PageTransitionRedirectType redirect_type = 7;
bool TabNavigation::has_redirect_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void TabNavigation::set_has_redirect_type() {
  _has_bits_[0] |= 0x00400000u;
}
void TabNavigation::clear_has_redirect_type() {
  _has_bits_[0] &= ~0x00400000u;
}
void TabNavigation::clear_redirect_type() {
  redirect_type_ = 1;
  clear_has_redirect_type();
}
::sync_pb::SyncEnums_PageTransitionRedirectType TabNavigation::redirect_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.redirect_type)
  return static_cast< ::sync_pb::SyncEnums_PageTransitionRedirectType >(redirect_type_);
}
void TabNavigation::set_redirect_type(::sync_pb::SyncEnums_PageTransitionRedirectType value) {
  assert(::sync_pb::SyncEnums_PageTransitionRedirectType_IsValid(value));
  set_has_redirect_type();
  redirect_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.redirect_type)
}

// optional int32 unique_id = 8;
bool TabNavigation::has_unique_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TabNavigation::set_has_unique_id() {
  _has_bits_[0] |= 0x00000100u;
}
void TabNavigation::clear_has_unique_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void TabNavigation::clear_unique_id() {
  unique_id_ = 0;
  clear_has_unique_id();
}
::google::protobuf::int32 TabNavigation::unique_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.unique_id)
  return unique_id_;
}
void TabNavigation::set_unique_id(::google::protobuf::int32 value) {
  set_has_unique_id();
  unique_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.unique_id)
}

// optional int64 timestamp_msec = 9;
bool TabNavigation::has_timestamp_msec() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TabNavigation::set_has_timestamp_msec() {
  _has_bits_[0] |= 0x00000200u;
}
void TabNavigation::clear_has_timestamp_msec() {
  _has_bits_[0] &= ~0x00000200u;
}
void TabNavigation::clear_timestamp_msec() {
  timestamp_msec_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_msec();
}
::google::protobuf::int64 TabNavigation::timestamp_msec() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.timestamp_msec)
  return timestamp_msec_;
}
void TabNavigation::set_timestamp_msec(::google::protobuf::int64 value) {
  set_has_timestamp_msec();
  timestamp_msec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.timestamp_msec)
}

// optional bool navigation_forward_back = 10;
bool TabNavigation::has_navigation_forward_back() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TabNavigation::set_has_navigation_forward_back() {
  _has_bits_[0] |= 0x00000400u;
}
void TabNavigation::clear_has_navigation_forward_back() {
  _has_bits_[0] &= ~0x00000400u;
}
void TabNavigation::clear_navigation_forward_back() {
  navigation_forward_back_ = false;
  clear_has_navigation_forward_back();
}
bool TabNavigation::navigation_forward_back() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_forward_back)
  return navigation_forward_back_;
}
void TabNavigation::set_navigation_forward_back(bool value) {
  set_has_navigation_forward_back();
  navigation_forward_back_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_forward_back)
}

// optional bool navigation_from_address_bar = 11;
bool TabNavigation::has_navigation_from_address_bar() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TabNavigation::set_has_navigation_from_address_bar() {
  _has_bits_[0] |= 0x00000800u;
}
void TabNavigation::clear_has_navigation_from_address_bar() {
  _has_bits_[0] &= ~0x00000800u;
}
void TabNavigation::clear_navigation_from_address_bar() {
  navigation_from_address_bar_ = false;
  clear_has_navigation_from_address_bar();
}
bool TabNavigation::navigation_from_address_bar() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_from_address_bar)
  return navigation_from_address_bar_;
}
void TabNavigation::set_navigation_from_address_bar(bool value) {
  set_has_navigation_from_address_bar();
  navigation_from_address_bar_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_from_address_bar)
}

// optional bool navigation_home_page = 12;
bool TabNavigation::has_navigation_home_page() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TabNavigation::set_has_navigation_home_page() {
  _has_bits_[0] |= 0x00001000u;
}
void TabNavigation::clear_has_navigation_home_page() {
  _has_bits_[0] &= ~0x00001000u;
}
void TabNavigation::clear_navigation_home_page() {
  navigation_home_page_ = false;
  clear_has_navigation_home_page();
}
bool TabNavigation::navigation_home_page() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_home_page)
  return navigation_home_page_;
}
void TabNavigation::set_navigation_home_page(bool value) {
  set_has_navigation_home_page();
  navigation_home_page_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_home_page)
}

// optional bool navigation_chain_start = 13;
bool TabNavigation::has_navigation_chain_start() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TabNavigation::set_has_navigation_chain_start() {
  _has_bits_[0] |= 0x00002000u;
}
void TabNavigation::clear_has_navigation_chain_start() {
  _has_bits_[0] &= ~0x00002000u;
}
void TabNavigation::clear_navigation_chain_start() {
  navigation_chain_start_ = false;
  clear_has_navigation_chain_start();
}
bool TabNavigation::navigation_chain_start() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_chain_start)
  return navigation_chain_start_;
}
void TabNavigation::set_navigation_chain_start(bool value) {
  set_has_navigation_chain_start();
  navigation_chain_start_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_chain_start)
}

// optional bool navigation_chain_end = 14;
bool TabNavigation::has_navigation_chain_end() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TabNavigation::set_has_navigation_chain_end() {
  _has_bits_[0] |= 0x00004000u;
}
void TabNavigation::clear_has_navigation_chain_end() {
  _has_bits_[0] &= ~0x00004000u;
}
void TabNavigation::clear_navigation_chain_end() {
  navigation_chain_end_ = false;
  clear_has_navigation_chain_end();
}
bool TabNavigation::navigation_chain_end() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_chain_end)
  return navigation_chain_end_;
}
void TabNavigation::set_navigation_chain_end(bool value) {
  set_has_navigation_chain_end();
  navigation_chain_end_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.navigation_chain_end)
}

// optional int64 global_id = 15;
bool TabNavigation::has_global_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TabNavigation::set_has_global_id() {
  _has_bits_[0] |= 0x00010000u;
}
void TabNavigation::clear_has_global_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void TabNavigation::clear_global_id() {
  global_id_ = GOOGLE_LONGLONG(0);
  clear_has_global_id();
}
::google::protobuf::int64 TabNavigation::global_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.global_id)
  return global_id_;
}
void TabNavigation::set_global_id(::google::protobuf::int64 value) {
  set_has_global_id();
  global_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.global_id)
}

// optional string search_terms = 16 [deprecated = true];
bool TabNavigation::has_search_terms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TabNavigation::set_has_search_terms() {
  _has_bits_[0] |= 0x00000008u;
}
void TabNavigation::clear_has_search_terms() {
  _has_bits_[0] &= ~0x00000008u;
}
void TabNavigation::clear_search_terms() {
  search_terms_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_terms();
}
const ::std::string& TabNavigation::search_terms() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.search_terms)
  return search_terms_.GetNoArena();
}
void TabNavigation::set_search_terms(const ::std::string& value) {
  set_has_search_terms();
  search_terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.search_terms)
}
#if LANG_CXX11
void TabNavigation::set_search_terms(::std::string&& value) {
  set_has_search_terms();
  search_terms_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.search_terms)
}
#endif
void TabNavigation::set_search_terms(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_terms();
  search_terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.search_terms)
}
void TabNavigation::set_search_terms(const char* value, size_t size) {
  set_has_search_terms();
  search_terms_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.search_terms)
}
::std::string* TabNavigation::mutable_search_terms() {
  set_has_search_terms();
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.search_terms)
  return search_terms_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TabNavigation::release_search_terms() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.search_terms)
  clear_has_search_terms();
  return search_terms_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TabNavigation::set_allocated_search_terms(::std::string* search_terms) {
  if (search_terms != NULL) {
    set_has_search_terms();
  } else {
    clear_has_search_terms();
  }
  search_terms_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_terms);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.search_terms)
}

// optional string favicon_url = 17;
bool TabNavigation::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TabNavigation::set_has_favicon_url() {
  _has_bits_[0] |= 0x00000010u;
}
void TabNavigation::clear_has_favicon_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void TabNavigation::clear_favicon_url() {
  favicon_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_favicon_url();
}
const ::std::string& TabNavigation::favicon_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.favicon_url)
  return favicon_url_.GetNoArena();
}
void TabNavigation::set_favicon_url(const ::std::string& value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.favicon_url)
}
#if LANG_CXX11
void TabNavigation::set_favicon_url(::std::string&& value) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.favicon_url)
}
#endif
void TabNavigation::set_favicon_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.favicon_url)
}
void TabNavigation::set_favicon_url(const char* value, size_t size) {
  set_has_favicon_url();
  favicon_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.favicon_url)
}
::std::string* TabNavigation::mutable_favicon_url() {
  set_has_favicon_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.favicon_url)
  return favicon_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TabNavigation::release_favicon_url() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.favicon_url)
  clear_has_favicon_url();
  return favicon_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TabNavigation::set_allocated_favicon_url(::std::string* favicon_url) {
  if (favicon_url != NULL) {
    set_has_favicon_url();
  } else {
    clear_has_favicon_url();
  }
  favicon_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), favicon_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.favicon_url)
}

// optional .sync_pb.TabNavigation.BlockedState blocked_state = 18 [default = STATE_ALLOWED];
bool TabNavigation::has_blocked_state() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void TabNavigation::set_has_blocked_state() {
  _has_bits_[0] |= 0x00800000u;
}
void TabNavigation::clear_has_blocked_state() {
  _has_bits_[0] &= ~0x00800000u;
}
void TabNavigation::clear_blocked_state() {
  blocked_state_ = 1;
  clear_has_blocked_state();
}
::sync_pb::TabNavigation_BlockedState TabNavigation::blocked_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.blocked_state)
  return static_cast< ::sync_pb::TabNavigation_BlockedState >(blocked_state_);
}
void TabNavigation::set_blocked_state(::sync_pb::TabNavigation_BlockedState value) {
  assert(::sync_pb::TabNavigation_BlockedState_IsValid(value));
  set_has_blocked_state();
  blocked_state_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.blocked_state)
}

// repeated string content_pack_categories = 19;
int TabNavigation::content_pack_categories_size() const {
  return content_pack_categories_.size();
}
void TabNavigation::clear_content_pack_categories() {
  content_pack_categories_.Clear();
}
const ::std::string& TabNavigation::content_pack_categories(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.content_pack_categories)
  return content_pack_categories_.Get(index);
}
::std::string* TabNavigation::mutable_content_pack_categories(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.content_pack_categories)
  return content_pack_categories_.Mutable(index);
}
void TabNavigation::set_content_pack_categories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.content_pack_categories)
  content_pack_categories_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TabNavigation::set_content_pack_categories(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.content_pack_categories)
  content_pack_categories_.Mutable(index)->assign(std::move(value));
}
#endif
void TabNavigation::set_content_pack_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  content_pack_categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.content_pack_categories)
}
void TabNavigation::set_content_pack_categories(int index, const char* value, size_t size) {
  content_pack_categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.content_pack_categories)
}
::std::string* TabNavigation::add_content_pack_categories() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.TabNavigation.content_pack_categories)
  return content_pack_categories_.Add();
}
void TabNavigation::add_content_pack_categories(const ::std::string& value) {
  content_pack_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.content_pack_categories)
}
#if LANG_CXX11
void TabNavigation::add_content_pack_categories(::std::string&& value) {
  content_pack_categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.content_pack_categories)
}
#endif
void TabNavigation::add_content_pack_categories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  content_pack_categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.TabNavigation.content_pack_categories)
}
void TabNavigation::add_content_pack_categories(const char* value, size_t size) {
  content_pack_categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.TabNavigation.content_pack_categories)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TabNavigation::content_pack_categories() const {
  // @@protoc_insertion_point(field_list:sync_pb.TabNavigation.content_pack_categories)
  return content_pack_categories_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TabNavigation::mutable_content_pack_categories() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TabNavigation.content_pack_categories)
  return &content_pack_categories_;
}

// optional int32 http_status_code = 20;
bool TabNavigation::has_http_status_code() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TabNavigation::set_has_http_status_code() {
  _has_bits_[0] |= 0x00020000u;
}
void TabNavigation::clear_has_http_status_code() {
  _has_bits_[0] &= ~0x00020000u;
}
void TabNavigation::clear_http_status_code() {
  http_status_code_ = 0;
  clear_has_http_status_code();
}
::google::protobuf::int32 TabNavigation::http_status_code() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.http_status_code)
  return http_status_code_;
}
void TabNavigation::set_http_status_code(::google::protobuf::int32 value) {
  set_has_http_status_code();
  http_status_code_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.http_status_code)
}

// optional int32 obsolete_referrer_policy = 21 [deprecated = true];
bool TabNavigation::has_obsolete_referrer_policy() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TabNavigation::set_has_obsolete_referrer_policy() {
  _has_bits_[0] |= 0x00040000u;
}
void TabNavigation::clear_has_obsolete_referrer_policy() {
  _has_bits_[0] &= ~0x00040000u;
}
void TabNavigation::clear_obsolete_referrer_policy() {
  obsolete_referrer_policy_ = 0;
  clear_has_obsolete_referrer_policy();
}
::google::protobuf::int32 TabNavigation::obsolete_referrer_policy() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.obsolete_referrer_policy)
  return obsolete_referrer_policy_;
}
void TabNavigation::set_obsolete_referrer_policy(::google::protobuf::int32 value) {
  set_has_obsolete_referrer_policy();
  obsolete_referrer_policy_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.obsolete_referrer_policy)
}

// optional bool is_restored = 22;
bool TabNavigation::has_is_restored() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TabNavigation::set_has_is_restored() {
  _has_bits_[0] |= 0x00008000u;
}
void TabNavigation::clear_has_is_restored() {
  _has_bits_[0] &= ~0x00008000u;
}
void TabNavigation::clear_is_restored() {
  is_restored_ = false;
  clear_has_is_restored();
}
bool TabNavigation::is_restored() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.is_restored)
  return is_restored_;
}
void TabNavigation::set_is_restored(bool value) {
  set_has_is_restored();
  is_restored_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.is_restored)
}

// repeated .sync_pb.NavigationRedirect navigation_redirect = 23;
int TabNavigation::navigation_redirect_size() const {
  return navigation_redirect_.size();
}
void TabNavigation::clear_navigation_redirect() {
  navigation_redirect_.Clear();
}
const ::sync_pb::NavigationRedirect& TabNavigation::navigation_redirect(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.navigation_redirect)
  return navigation_redirect_.Get(index);
}
::sync_pb::NavigationRedirect* TabNavigation::mutable_navigation_redirect(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.navigation_redirect)
  return navigation_redirect_.Mutable(index);
}
::sync_pb::NavigationRedirect* TabNavigation::add_navigation_redirect() {
  // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.navigation_redirect)
  return navigation_redirect_.Add();
}
::google::protobuf::RepeatedPtrField< ::sync_pb::NavigationRedirect >*
TabNavigation::mutable_navigation_redirect() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TabNavigation.navigation_redirect)
  return &navigation_redirect_;
}
const ::google::protobuf::RepeatedPtrField< ::sync_pb::NavigationRedirect >&
TabNavigation::navigation_redirect() const {
  // @@protoc_insertion_point(field_list:sync_pb.TabNavigation.navigation_redirect)
  return navigation_redirect_;
}

// optional string last_navigation_redirect_url = 24;
bool TabNavigation::has_last_navigation_redirect_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TabNavigation::set_has_last_navigation_redirect_url() {
  _has_bits_[0] |= 0x00000020u;
}
void TabNavigation::clear_has_last_navigation_redirect_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void TabNavigation::clear_last_navigation_redirect_url() {
  last_navigation_redirect_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_navigation_redirect_url();
}
const ::std::string& TabNavigation::last_navigation_redirect_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.last_navigation_redirect_url)
  return last_navigation_redirect_url_.GetNoArena();
}
void TabNavigation::set_last_navigation_redirect_url(const ::std::string& value) {
  set_has_last_navigation_redirect_url();
  last_navigation_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.last_navigation_redirect_url)
}
#if LANG_CXX11
void TabNavigation::set_last_navigation_redirect_url(::std::string&& value) {
  set_has_last_navigation_redirect_url();
  last_navigation_redirect_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.TabNavigation.last_navigation_redirect_url)
}
#endif
void TabNavigation::set_last_navigation_redirect_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_navigation_redirect_url();
  last_navigation_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.TabNavigation.last_navigation_redirect_url)
}
void TabNavigation::set_last_navigation_redirect_url(const char* value, size_t size) {
  set_has_last_navigation_redirect_url();
  last_navigation_redirect_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.TabNavigation.last_navigation_redirect_url)
}
::std::string* TabNavigation::mutable_last_navigation_redirect_url() {
  set_has_last_navigation_redirect_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.last_navigation_redirect_url)
  return last_navigation_redirect_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TabNavigation::release_last_navigation_redirect_url() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.last_navigation_redirect_url)
  clear_has_last_navigation_redirect_url();
  return last_navigation_redirect_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TabNavigation::set_allocated_last_navigation_redirect_url(::std::string* last_navigation_redirect_url) {
  if (last_navigation_redirect_url != NULL) {
    set_has_last_navigation_redirect_url();
  } else {
    clear_has_last_navigation_redirect_url();
  }
  last_navigation_redirect_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_navigation_redirect_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.last_navigation_redirect_url)
}

// optional int32 correct_referrer_policy = 25 [default = 1];
bool TabNavigation::has_correct_referrer_policy() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void TabNavigation::set_has_correct_referrer_policy() {
  _has_bits_[0] |= 0x00200000u;
}
void TabNavigation::clear_has_correct_referrer_policy() {
  _has_bits_[0] &= ~0x00200000u;
}
void TabNavigation::clear_correct_referrer_policy() {
  correct_referrer_policy_ = 1;
  clear_has_correct_referrer_policy();
}
::google::protobuf::int32 TabNavigation::correct_referrer_policy() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.correct_referrer_policy)
  return correct_referrer_policy_;
}
void TabNavigation::set_correct_referrer_policy(::google::protobuf::int32 value) {
  set_has_correct_referrer_policy();
  correct_referrer_policy_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.correct_referrer_policy)
}

// optional .sync_pb.TabNavigation.PasswordState password_state = 26;
bool TabNavigation::has_password_state() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TabNavigation::set_has_password_state() {
  _has_bits_[0] |= 0x00100000u;
}
void TabNavigation::clear_has_password_state() {
  _has_bits_[0] &= ~0x00100000u;
}
void TabNavigation::clear_password_state() {
  password_state_ = 0;
  clear_has_password_state();
}
::sync_pb::TabNavigation_PasswordState TabNavigation::password_state() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.password_state)
  return static_cast< ::sync_pb::TabNavigation_PasswordState >(password_state_);
}
void TabNavigation::set_password_state(::sync_pb::TabNavigation_PasswordState value) {
  assert(::sync_pb::TabNavigation_PasswordState_IsValid(value));
  set_has_password_state();
  password_state_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.password_state)
}

// optional int64 task_id = 27;
bool TabNavigation::has_task_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TabNavigation::set_has_task_id() {
  _has_bits_[0] |= 0x00080000u;
}
void TabNavigation::clear_has_task_id() {
  _has_bits_[0] &= ~0x00080000u;
}
void TabNavigation::clear_task_id() {
  task_id_ = GOOGLE_LONGLONG(0);
  clear_has_task_id();
}
::google::protobuf::int64 TabNavigation::task_id() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.task_id)
  return task_id_;
}
void TabNavigation::set_task_id(::google::protobuf::int64 value) {
  set_has_task_id();
  task_id_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.task_id)
}

// repeated int64 ancestor_task_id = 28;
int TabNavigation::ancestor_task_id_size() const {
  return ancestor_task_id_.size();
}
void TabNavigation::clear_ancestor_task_id() {
  ancestor_task_id_.Clear();
}
::google::protobuf::int64 TabNavigation::ancestor_task_id(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.ancestor_task_id)
  return ancestor_task_id_.Get(index);
}
void TabNavigation::set_ancestor_task_id(int index, ::google::protobuf::int64 value) {
  ancestor_task_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:sync_pb.TabNavigation.ancestor_task_id)
}
void TabNavigation::add_ancestor_task_id(::google::protobuf::int64 value) {
  ancestor_task_id_.Add(value);
  // @@protoc_insertion_point(field_add:sync_pb.TabNavigation.ancestor_task_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TabNavigation::ancestor_task_id() const {
  // @@protoc_insertion_point(field_list:sync_pb.TabNavigation.ancestor_task_id)
  return ancestor_task_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TabNavigation::mutable_ancestor_task_id() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.TabNavigation.ancestor_task_id)
  return &ancestor_task_id_;
}

// optional .sync_pb.ReplacedNavigation replaced_navigation = 29;
bool TabNavigation::has_replaced_navigation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TabNavigation::set_has_replaced_navigation() {
  _has_bits_[0] |= 0x00000040u;
}
void TabNavigation::clear_has_replaced_navigation() {
  _has_bits_[0] &= ~0x00000040u;
}
void TabNavigation::clear_replaced_navigation() {
  if (replaced_navigation_ != NULL) replaced_navigation_->::sync_pb::ReplacedNavigation::Clear();
  clear_has_replaced_navigation();
}
const ::sync_pb::ReplacedNavigation& TabNavigation::replaced_navigation() const {
  // @@protoc_insertion_point(field_get:sync_pb.TabNavigation.replaced_navigation)
  return replaced_navigation_ != NULL ? *replaced_navigation_
                         : *::sync_pb::ReplacedNavigation::internal_default_instance();
}
::sync_pb::ReplacedNavigation* TabNavigation::mutable_replaced_navigation() {
  set_has_replaced_navigation();
  if (replaced_navigation_ == NULL) {
    replaced_navigation_ = new ::sync_pb::ReplacedNavigation;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.TabNavigation.replaced_navigation)
  return replaced_navigation_;
}
::sync_pb::ReplacedNavigation* TabNavigation::release_replaced_navigation() {
  // @@protoc_insertion_point(field_release:sync_pb.TabNavigation.replaced_navigation)
  clear_has_replaced_navigation();
  ::sync_pb::ReplacedNavigation* temp = replaced_navigation_;
  replaced_navigation_ = NULL;
  return temp;
}
void TabNavigation::set_allocated_replaced_navigation(::sync_pb::ReplacedNavigation* replaced_navigation) {
  delete replaced_navigation_;
  replaced_navigation_ = replaced_navigation;
  if (replaced_navigation) {
    set_has_replaced_navigation();
  } else {
    clear_has_replaced_navigation();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.TabNavigation.replaced_navigation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationRedirect::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationRedirect::NavigationRedirect()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.NavigationRedirect)
}
NavigationRedirect::NavigationRedirect(const NavigationRedirect& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.NavigationRedirect)
}

void NavigationRedirect::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NavigationRedirect::~NavigationRedirect() {
  // @@protoc_insertion_point(destructor:sync_pb.NavigationRedirect)
  SharedDtor();
}

void NavigationRedirect::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NavigationRedirect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NavigationRedirect& NavigationRedirect::default_instance() {
  protobuf_session_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavigationRedirect* NavigationRedirect::New(::google::protobuf::Arena* arena) const {
  NavigationRedirect* n = new NavigationRedirect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationRedirect::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.NavigationRedirect)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationRedirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.NavigationRedirect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.NavigationRedirect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.NavigationRedirect)
  return false;
#undef DO_
}

void NavigationRedirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.NavigationRedirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.NavigationRedirect)
}

size_t NavigationRedirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.NavigationRedirect)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationRedirect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NavigationRedirect*>(&from));
}

void NavigationRedirect::MergeFrom(const NavigationRedirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.NavigationRedirect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void NavigationRedirect::CopyFrom(const NavigationRedirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.NavigationRedirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationRedirect::IsInitialized() const {
  return true;
}

void NavigationRedirect::Swap(NavigationRedirect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationRedirect::InternalSwap(NavigationRedirect* other) {
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NavigationRedirect::GetTypeName() const {
  return "sync_pb.NavigationRedirect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigationRedirect

// optional string url = 1;
bool NavigationRedirect::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NavigationRedirect::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void NavigationRedirect::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void NavigationRedirect::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& NavigationRedirect::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.NavigationRedirect.url)
  return url_.GetNoArena();
}
void NavigationRedirect::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.NavigationRedirect.url)
}
#if LANG_CXX11
void NavigationRedirect::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.NavigationRedirect.url)
}
#endif
void NavigationRedirect::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.NavigationRedirect.url)
}
void NavigationRedirect::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.NavigationRedirect.url)
}
::std::string* NavigationRedirect::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.NavigationRedirect.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NavigationRedirect::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.NavigationRedirect.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NavigationRedirect::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.NavigationRedirect.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplacedNavigation::kFirstCommittedUrlFieldNumber;
const int ReplacedNavigation::kFirstTimestampMsecFieldNumber;
const int ReplacedNavigation::kFirstPageTransitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplacedNavigation::ReplacedNavigation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_session_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ReplacedNavigation)
}
ReplacedNavigation::ReplacedNavigation(const ReplacedNavigation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  first_committed_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_first_committed_url()) {
    first_committed_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_committed_url_);
  }
  ::memcpy(&first_timestamp_msec_, &from.first_timestamp_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_page_transition_) -
    reinterpret_cast<char*>(&first_timestamp_msec_)) + sizeof(first_page_transition_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.ReplacedNavigation)
}

void ReplacedNavigation::SharedCtor() {
  _cached_size_ = 0;
  first_committed_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_timestamp_msec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_page_transition_) -
      reinterpret_cast<char*>(&first_timestamp_msec_)) + sizeof(first_page_transition_));
}

ReplacedNavigation::~ReplacedNavigation() {
  // @@protoc_insertion_point(destructor:sync_pb.ReplacedNavigation)
  SharedDtor();
}

void ReplacedNavigation::SharedDtor() {
  first_committed_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReplacedNavigation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReplacedNavigation& ReplacedNavigation::default_instance() {
  protobuf_session_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplacedNavigation* ReplacedNavigation::New(::google::protobuf::Arena* arena) const {
  ReplacedNavigation* n = new ReplacedNavigation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplacedNavigation::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ReplacedNavigation)
  if (has_first_committed_url()) {
    GOOGLE_DCHECK(!first_committed_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*first_committed_url_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&first_timestamp_msec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_page_transition_) -
        reinterpret_cast<char*>(&first_timestamp_msec_)) + sizeof(first_page_transition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplacedNavigation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ReplacedNavigation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string first_committed_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_committed_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 first_timestamp_msec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_first_timestamp_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_timestamp_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.SyncEnums.PageTransition first_page_transition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sync_pb::SyncEnums_PageTransition_IsValid(value)) {
            set_first_page_transition(static_cast< ::sync_pb::SyncEnums_PageTransition >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ReplacedNavigation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ReplacedNavigation)
  return false;
#undef DO_
}

void ReplacedNavigation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ReplacedNavigation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string first_committed_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->first_committed_url(), output);
  }

  // optional int64 first_timestamp_msec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->first_timestamp_msec(), output);
  }

  // optional .sync_pb.SyncEnums.PageTransition first_page_transition = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->first_page_transition(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ReplacedNavigation)
}

size_t ReplacedNavigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ReplacedNavigation)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string first_committed_url = 1;
    if (has_first_committed_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_committed_url());
    }

    // optional int64 first_timestamp_msec = 2;
    if (has_first_timestamp_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_timestamp_msec());
    }

    // optional .sync_pb.SyncEnums.PageTransition first_page_transition = 3;
    if (has_first_page_transition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->first_page_transition());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplacedNavigation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplacedNavigation*>(&from));
}

void ReplacedNavigation::MergeFrom(const ReplacedNavigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ReplacedNavigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_first_committed_url();
      first_committed_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_committed_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      first_timestamp_msec_ = from.first_timestamp_msec_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_page_transition_ = from.first_page_transition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplacedNavigation::CopyFrom(const ReplacedNavigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ReplacedNavigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplacedNavigation::IsInitialized() const {
  return true;
}

void ReplacedNavigation::Swap(ReplacedNavigation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplacedNavigation::InternalSwap(ReplacedNavigation* other) {
  first_committed_url_.Swap(&other->first_committed_url_);
  std::swap(first_timestamp_msec_, other->first_timestamp_msec_);
  std::swap(first_page_transition_, other->first_page_transition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReplacedNavigation::GetTypeName() const {
  return "sync_pb.ReplacedNavigation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplacedNavigation

// optional string first_committed_url = 1;
bool ReplacedNavigation::has_first_committed_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplacedNavigation::set_has_first_committed_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplacedNavigation::clear_has_first_committed_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplacedNavigation::clear_first_committed_url() {
  first_committed_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_committed_url();
}
const ::std::string& ReplacedNavigation::first_committed_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReplacedNavigation.first_committed_url)
  return first_committed_url_.GetNoArena();
}
void ReplacedNavigation::set_first_committed_url(const ::std::string& value) {
  set_has_first_committed_url();
  first_committed_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ReplacedNavigation.first_committed_url)
}
#if LANG_CXX11
void ReplacedNavigation::set_first_committed_url(::std::string&& value) {
  set_has_first_committed_url();
  first_committed_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ReplacedNavigation.first_committed_url)
}
#endif
void ReplacedNavigation::set_first_committed_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_first_committed_url();
  first_committed_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ReplacedNavigation.first_committed_url)
}
void ReplacedNavigation::set_first_committed_url(const char* value, size_t size) {
  set_has_first_committed_url();
  first_committed_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ReplacedNavigation.first_committed_url)
}
::std::string* ReplacedNavigation::mutable_first_committed_url() {
  set_has_first_committed_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.ReplacedNavigation.first_committed_url)
  return first_committed_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReplacedNavigation::release_first_committed_url() {
  // @@protoc_insertion_point(field_release:sync_pb.ReplacedNavigation.first_committed_url)
  clear_has_first_committed_url();
  return first_committed_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReplacedNavigation::set_allocated_first_committed_url(::std::string* first_committed_url) {
  if (first_committed_url != NULL) {
    set_has_first_committed_url();
  } else {
    clear_has_first_committed_url();
  }
  first_committed_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_committed_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ReplacedNavigation.first_committed_url)
}

// optional int64 first_timestamp_msec = 2;
bool ReplacedNavigation::has_first_timestamp_msec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplacedNavigation::set_has_first_timestamp_msec() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplacedNavigation::clear_has_first_timestamp_msec() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplacedNavigation::clear_first_timestamp_msec() {
  first_timestamp_msec_ = GOOGLE_LONGLONG(0);
  clear_has_first_timestamp_msec();
}
::google::protobuf::int64 ReplacedNavigation::first_timestamp_msec() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReplacedNavigation.first_timestamp_msec)
  return first_timestamp_msec_;
}
void ReplacedNavigation::set_first_timestamp_msec(::google::protobuf::int64 value) {
  set_has_first_timestamp_msec();
  first_timestamp_msec_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ReplacedNavigation.first_timestamp_msec)
}

// optional .sync_pb.SyncEnums.PageTransition first_page_transition = 3;
bool ReplacedNavigation::has_first_page_transition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReplacedNavigation::set_has_first_page_transition() {
  _has_bits_[0] |= 0x00000004u;
}
void ReplacedNavigation::clear_has_first_page_transition() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReplacedNavigation::clear_first_page_transition() {
  first_page_transition_ = 0;
  clear_has_first_page_transition();
}
::sync_pb::SyncEnums_PageTransition ReplacedNavigation::first_page_transition() const {
  // @@protoc_insertion_point(field_get:sync_pb.ReplacedNavigation.first_page_transition)
  return static_cast< ::sync_pb::SyncEnums_PageTransition >(first_page_transition_);
}
void ReplacedNavigation::set_first_page_transition(::sync_pb::SyncEnums_PageTransition value) {
  assert(::sync_pb::SyncEnums_PageTransition_IsValid(value));
  set_has_first_page_transition();
  first_page_transition_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ReplacedNavigation.first_page_transition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
