// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encryption.proto

#ifndef PROTOBUF_encryption_2eproto__INCLUDED
#define PROTOBUF_encryption_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace sync_pb {
class EncryptedData;
class EncryptedDataDefaultTypeInternal;
extern EncryptedDataDefaultTypeInternal _EncryptedData_default_instance_;
}  // namespace sync_pb

namespace sync_pb {

namespace protobuf_encryption_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_encryption_2eproto

// ===================================================================

class EncryptedData : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.EncryptedData) */ {
 public:
  EncryptedData();
  virtual ~EncryptedData();

  EncryptedData(const EncryptedData& from);

  inline EncryptedData& operator=(const EncryptedData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EncryptedData& default_instance();

  static inline const EncryptedData* internal_default_instance() {
    return reinterpret_cast<const EncryptedData*>(
               &_EncryptedData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(EncryptedData* other);

  // implements Message ----------------------------------------------

  inline EncryptedData* New() const PROTOBUF_FINAL { return New(NULL); }

  EncryptedData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const EncryptedData& from);
  void MergeFrom(const EncryptedData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key_name = 1;
  bool has_key_name() const;
  void clear_key_name();
  static const int kKeyNameFieldNumber = 1;
  const ::std::string& key_name() const;
  void set_key_name(const ::std::string& value);
  #if LANG_CXX11
  void set_key_name(::std::string&& value);
  #endif
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  ::std::string* mutable_key_name();
  ::std::string* release_key_name();
  void set_allocated_key_name(::std::string* key_name);

  // optional string blob = 2;
  bool has_blob() const;
  void clear_blob();
  static const int kBlobFieldNumber = 2;
  const ::std::string& blob() const;
  void set_blob(const ::std::string& value);
  #if LANG_CXX11
  void set_blob(::std::string&& value);
  #endif
  void set_blob(const char* value);
  void set_blob(const char* value, size_t size);
  ::std::string* mutable_blob();
  ::std::string* release_blob();
  void set_allocated_blob(::std::string* blob);

  // @@protoc_insertion_point(class_scope:sync_pb.EncryptedData)
 private:
  void set_has_key_name();
  void clear_has_key_name();
  void set_has_blob();
  void clear_has_blob();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_name_;
  ::google::protobuf::internal::ArenaStringPtr blob_;
  friend struct protobuf_encryption_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EncryptedData

// optional string key_name = 1;
inline bool EncryptedData::has_key_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptedData::set_has_key_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncryptedData::clear_has_key_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncryptedData::clear_key_name() {
  key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key_name();
}
inline const ::std::string& EncryptedData::key_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.EncryptedData.key_name)
  return key_name_.GetNoArena();
}
inline void EncryptedData::set_key_name(const ::std::string& value) {
  set_has_key_name();
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.EncryptedData.key_name)
}
#if LANG_CXX11
inline void EncryptedData::set_key_name(::std::string&& value) {
  set_has_key_name();
  key_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.EncryptedData.key_name)
}
#endif
inline void EncryptedData::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key_name();
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.EncryptedData.key_name)
}
inline void EncryptedData::set_key_name(const char* value, size_t size) {
  set_has_key_name();
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.EncryptedData.key_name)
}
inline ::std::string* EncryptedData::mutable_key_name() {
  set_has_key_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.EncryptedData.key_name)
  return key_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptedData::release_key_name() {
  // @@protoc_insertion_point(field_release:sync_pb.EncryptedData.key_name)
  clear_has_key_name();
  return key_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptedData::set_allocated_key_name(::std::string* key_name) {
  if (key_name != NULL) {
    set_has_key_name();
  } else {
    clear_has_key_name();
  }
  key_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EncryptedData.key_name)
}

// optional string blob = 2;
inline bool EncryptedData::has_blob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptedData::set_has_blob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncryptedData::clear_has_blob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncryptedData::clear_blob() {
  blob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blob();
}
inline const ::std::string& EncryptedData::blob() const {
  // @@protoc_insertion_point(field_get:sync_pb.EncryptedData.blob)
  return blob_.GetNoArena();
}
inline void EncryptedData::set_blob(const ::std::string& value) {
  set_has_blob();
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.EncryptedData.blob)
}
#if LANG_CXX11
inline void EncryptedData::set_blob(::std::string&& value) {
  set_has_blob();
  blob_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.EncryptedData.blob)
}
#endif
inline void EncryptedData::set_blob(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_blob();
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.EncryptedData.blob)
}
inline void EncryptedData::set_blob(const char* value, size_t size) {
  set_has_blob();
  blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.EncryptedData.blob)
}
inline ::std::string* EncryptedData::mutable_blob() {
  set_has_blob();
  // @@protoc_insertion_point(field_mutable:sync_pb.EncryptedData.blob)
  return blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncryptedData::release_blob() {
  // @@protoc_insertion_point(field_release:sync_pb.EncryptedData.blob)
  clear_has_blob();
  return blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptedData::set_allocated_blob(::std::string* blob) {
  if (blob != NULL) {
    set_has_blob();
  } else {
    clear_has_blob();
  }
  blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blob);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.EncryptedData.blob)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_encryption_2eproto__INCLUDED
