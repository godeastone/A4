// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dictionary_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dictionary_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class DictionarySpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DictionarySpecifics> {
} _DictionarySpecifics_default_instance_;

namespace protobuf_dictionary_5fspecifics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DictionarySpecifics_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DictionarySpecifics_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_dictionary_5fspecifics_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictionarySpecifics::kWordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictionarySpecifics::DictionarySpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dictionary_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.DictionarySpecifics)
}
DictionarySpecifics::DictionarySpecifics(const DictionarySpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_word()) {
    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.DictionarySpecifics)
}

void DictionarySpecifics::SharedCtor() {
  _cached_size_ = 0;
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DictionarySpecifics::~DictionarySpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.DictionarySpecifics)
  SharedDtor();
}

void DictionarySpecifics::SharedDtor() {
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DictionarySpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DictionarySpecifics& DictionarySpecifics::default_instance() {
  protobuf_dictionary_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

DictionarySpecifics* DictionarySpecifics::New(::google::protobuf::Arena* arena) const {
  DictionarySpecifics* n = new DictionarySpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictionarySpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.DictionarySpecifics)
  if (has_word()) {
    GOOGLE_DCHECK(!word_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*word_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DictionarySpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.DictionarySpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string word = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.DictionarySpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.DictionarySpecifics)
  return false;
#undef DO_
}

void DictionarySpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.DictionarySpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string word = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.DictionarySpecifics)
}

size_t DictionarySpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.DictionarySpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string word = 1;
  if (has_word()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionarySpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DictionarySpecifics*>(&from));
}

void DictionarySpecifics::MergeFrom(const DictionarySpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.DictionarySpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_word()) {
    set_has_word();
    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
}

void DictionarySpecifics::CopyFrom(const DictionarySpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.DictionarySpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionarySpecifics::IsInitialized() const {
  return true;
}

void DictionarySpecifics::Swap(DictionarySpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictionarySpecifics::InternalSwap(DictionarySpecifics* other) {
  word_.Swap(&other->word_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DictionarySpecifics::GetTypeName() const {
  return "sync_pb.DictionarySpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictionarySpecifics

// optional string word = 1;
bool DictionarySpecifics::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DictionarySpecifics::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
void DictionarySpecifics::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
void DictionarySpecifics::clear_word() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_word();
}
const ::std::string& DictionarySpecifics::word() const {
  // @@protoc_insertion_point(field_get:sync_pb.DictionarySpecifics.word)
  return word_.GetNoArena();
}
void DictionarySpecifics::set_word(const ::std::string& value) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.DictionarySpecifics.word)
}
#if LANG_CXX11
void DictionarySpecifics::set_word(::std::string&& value) {
  set_has_word();
  word_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.DictionarySpecifics.word)
}
#endif
void DictionarySpecifics::set_word(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.DictionarySpecifics.word)
}
void DictionarySpecifics::set_word(const char* value, size_t size) {
  set_has_word();
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.DictionarySpecifics.word)
}
::std::string* DictionarySpecifics::mutable_word() {
  set_has_word();
  // @@protoc_insertion_point(field_mutable:sync_pb.DictionarySpecifics.word)
  return word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DictionarySpecifics::release_word() {
  // @@protoc_insertion_point(field_release:sync_pb.DictionarySpecifics.word)
  clear_has_word();
  return word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DictionarySpecifics::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    set_has_word();
  } else {
    clear_has_word();
  }
  word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.DictionarySpecifics.word)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
