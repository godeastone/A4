// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: managed_user_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "managed_user_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class ManagedUserSpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManagedUserSpecifics> {
} _ManagedUserSpecifics_default_instance_;

namespace protobuf_managed_5fuser_5fspecifics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ManagedUserSpecifics_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ManagedUserSpecifics_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_managed_5fuser_5fspecifics_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManagedUserSpecifics::kIdFieldNumber;
const int ManagedUserSpecifics::kNameFieldNumber;
const int ManagedUserSpecifics::kAcknowledgedFieldNumber;
const int ManagedUserSpecifics::kMasterKeyFieldNumber;
const int ManagedUserSpecifics::kChromeAvatarFieldNumber;
const int ManagedUserSpecifics::kChromeosAvatarFieldNumber;
const int ManagedUserSpecifics::kPasswordSignatureKeyFieldNumber;
const int ManagedUserSpecifics::kPasswordEncryptionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManagedUserSpecifics::ManagedUserSpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_managed_5fuser_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.ManagedUserSpecifics)
}
ManagedUserSpecifics::ManagedUserSpecifics(const ManagedUserSpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  master_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_master_key()) {
    master_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_key_);
  }
  chrome_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chrome_avatar()) {
    chrome_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_avatar_);
  }
  chromeos_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chromeos_avatar()) {
    chromeos_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chromeos_avatar_);
  }
  password_signature_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password_signature_key()) {
    password_signature_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_signature_key_);
  }
  password_encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password_encryption_key()) {
    password_encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_encryption_key_);
  }
  acknowledged_ = from.acknowledged_;
  // @@protoc_insertion_point(copy_constructor:sync_pb.ManagedUserSpecifics)
}

void ManagedUserSpecifics::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chromeos_avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_signature_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_encryption_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acknowledged_ = false;
}

ManagedUserSpecifics::~ManagedUserSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.ManagedUserSpecifics)
  SharedDtor();
}

void ManagedUserSpecifics::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chromeos_avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_signature_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_encryption_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ManagedUserSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ManagedUserSpecifics& ManagedUserSpecifics::default_instance() {
  protobuf_managed_5fuser_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManagedUserSpecifics* ManagedUserSpecifics::New(::google::protobuf::Arena* arena) const {
  ManagedUserSpecifics* n = new ManagedUserSpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManagedUserSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.ManagedUserSpecifics)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_master_key()) {
      GOOGLE_DCHECK(!master_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*master_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_chrome_avatar()) {
      GOOGLE_DCHECK(!chrome_avatar_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chrome_avatar_.UnsafeRawStringPointer())->clear();
    }
    if (has_chromeos_avatar()) {
      GOOGLE_DCHECK(!chromeos_avatar_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chromeos_avatar_.UnsafeRawStringPointer())->clear();
    }
    if (has_password_signature_key()) {
      GOOGLE_DCHECK(!password_signature_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_signature_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_password_encryption_key()) {
      GOOGLE_DCHECK(!password_encryption_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_encryption_key_.UnsafeRawStringPointer())->clear();
    }
  }
  acknowledged_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ManagedUserSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.ManagedUserSpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acknowledged = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_acknowledged();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acknowledged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string master_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chrome_avatar = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chrome_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chromeos_avatar = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chromeos_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password_signature_key = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_signature_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password_encryption_key = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_encryption_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.ManagedUserSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.ManagedUserSpecifics)
  return false;
#undef DO_
}

void ManagedUserSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.ManagedUserSpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool acknowledged = 3 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->acknowledged(), output);
  }

  // optional string master_key = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->master_key(), output);
  }

  // optional string chrome_avatar = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->chrome_avatar(), output);
  }

  // optional string chromeos_avatar = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->chromeos_avatar(), output);
  }

  // optional string password_signature_key = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->password_signature_key(), output);
  }

  // optional string password_encryption_key = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->password_encryption_key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.ManagedUserSpecifics)
}

size_t ManagedUserSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.ManagedUserSpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string master_key = 4;
    if (has_master_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_key());
    }

    // optional string chrome_avatar = 5;
    if (has_chrome_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chrome_avatar());
    }

    // optional string chromeos_avatar = 6;
    if (has_chromeos_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chromeos_avatar());
    }

    // optional string password_signature_key = 7;
    if (has_password_signature_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_signature_key());
    }

    // optional string password_encryption_key = 8;
    if (has_password_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_encryption_key());
    }

    // optional bool acknowledged = 3 [default = false];
    if (has_acknowledged()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagedUserSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ManagedUserSpecifics*>(&from));
}

void ManagedUserSpecifics::MergeFrom(const ManagedUserSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.ManagedUserSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_master_key();
      master_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_chrome_avatar();
      chrome_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_avatar_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_chromeos_avatar();
      chromeos_avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chromeos_avatar_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_password_signature_key();
      password_signature_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_signature_key_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_password_encryption_key();
      password_encryption_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_encryption_key_);
    }
    if (cached_has_bits & 0x00000080u) {
      acknowledged_ = from.acknowledged_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ManagedUserSpecifics::CopyFrom(const ManagedUserSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.ManagedUserSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagedUserSpecifics::IsInitialized() const {
  return true;
}

void ManagedUserSpecifics::Swap(ManagedUserSpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManagedUserSpecifics::InternalSwap(ManagedUserSpecifics* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  master_key_.Swap(&other->master_key_);
  chrome_avatar_.Swap(&other->chrome_avatar_);
  chromeos_avatar_.Swap(&other->chromeos_avatar_);
  password_signature_key_.Swap(&other->password_signature_key_);
  password_encryption_key_.Swap(&other->password_encryption_key_);
  std::swap(acknowledged_, other->acknowledged_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ManagedUserSpecifics::GetTypeName() const {
  return "sync_pb.ManagedUserSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManagedUserSpecifics

// optional string id = 1;
bool ManagedUserSpecifics::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ManagedUserSpecifics::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ManagedUserSpecifics::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ManagedUserSpecifics::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& ManagedUserSpecifics::id() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.id)
  return id_.GetNoArena();
}
void ManagedUserSpecifics::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.id)
}
#if LANG_CXX11
void ManagedUserSpecifics::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.id)
}
#endif
void ManagedUserSpecifics::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.id)
}
void ManagedUserSpecifics::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.id)
}
::std::string* ManagedUserSpecifics::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_id() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.id)
}

// optional string name = 2;
bool ManagedUserSpecifics::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ManagedUserSpecifics::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ManagedUserSpecifics::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ManagedUserSpecifics::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ManagedUserSpecifics::name() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.name)
  return name_.GetNoArena();
}
void ManagedUserSpecifics::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.name)
}
#if LANG_CXX11
void ManagedUserSpecifics::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.name)
}
#endif
void ManagedUserSpecifics::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.name)
}
void ManagedUserSpecifics::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.name)
}
::std::string* ManagedUserSpecifics::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_name() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.name)
}

// optional bool acknowledged = 3 [default = false];
bool ManagedUserSpecifics::has_acknowledged() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ManagedUserSpecifics::set_has_acknowledged() {
  _has_bits_[0] |= 0x00000080u;
}
void ManagedUserSpecifics::clear_has_acknowledged() {
  _has_bits_[0] &= ~0x00000080u;
}
void ManagedUserSpecifics::clear_acknowledged() {
  acknowledged_ = false;
  clear_has_acknowledged();
}
bool ManagedUserSpecifics::acknowledged() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.acknowledged)
  return acknowledged_;
}
void ManagedUserSpecifics::set_acknowledged(bool value) {
  set_has_acknowledged();
  acknowledged_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.acknowledged)
}

// optional string master_key = 4;
bool ManagedUserSpecifics::has_master_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ManagedUserSpecifics::set_has_master_key() {
  _has_bits_[0] |= 0x00000004u;
}
void ManagedUserSpecifics::clear_has_master_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void ManagedUserSpecifics::clear_master_key() {
  master_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_master_key();
}
const ::std::string& ManagedUserSpecifics::master_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.master_key)
  return master_key_.GetNoArena();
}
void ManagedUserSpecifics::set_master_key(const ::std::string& value) {
  set_has_master_key();
  master_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.master_key)
}
#if LANG_CXX11
void ManagedUserSpecifics::set_master_key(::std::string&& value) {
  set_has_master_key();
  master_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.master_key)
}
#endif
void ManagedUserSpecifics::set_master_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_master_key();
  master_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.master_key)
}
void ManagedUserSpecifics::set_master_key(const char* value, size_t size) {
  set_has_master_key();
  master_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.master_key)
}
::std::string* ManagedUserSpecifics::mutable_master_key() {
  set_has_master_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.master_key)
  return master_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_master_key() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.master_key)
  clear_has_master_key();
  return master_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_master_key(::std::string* master_key) {
  if (master_key != NULL) {
    set_has_master_key();
  } else {
    clear_has_master_key();
  }
  master_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.master_key)
}

// optional string chrome_avatar = 5;
bool ManagedUserSpecifics::has_chrome_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ManagedUserSpecifics::set_has_chrome_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
void ManagedUserSpecifics::clear_has_chrome_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
void ManagedUserSpecifics::clear_chrome_avatar() {
  chrome_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chrome_avatar();
}
const ::std::string& ManagedUserSpecifics::chrome_avatar() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.chrome_avatar)
  return chrome_avatar_.GetNoArena();
}
void ManagedUserSpecifics::set_chrome_avatar(const ::std::string& value) {
  set_has_chrome_avatar();
  chrome_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
#if LANG_CXX11
void ManagedUserSpecifics::set_chrome_avatar(::std::string&& value) {
  set_has_chrome_avatar();
  chrome_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
#endif
void ManagedUserSpecifics::set_chrome_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chrome_avatar();
  chrome_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
void ManagedUserSpecifics::set_chrome_avatar(const char* value, size_t size) {
  set_has_chrome_avatar();
  chrome_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.chrome_avatar)
}
::std::string* ManagedUserSpecifics::mutable_chrome_avatar() {
  set_has_chrome_avatar();
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.chrome_avatar)
  return chrome_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_chrome_avatar() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.chrome_avatar)
  clear_has_chrome_avatar();
  return chrome_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_chrome_avatar(::std::string* chrome_avatar) {
  if (chrome_avatar != NULL) {
    set_has_chrome_avatar();
  } else {
    clear_has_chrome_avatar();
  }
  chrome_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_avatar);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.chrome_avatar)
}

// optional string chromeos_avatar = 6;
bool ManagedUserSpecifics::has_chromeos_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ManagedUserSpecifics::set_has_chromeos_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
void ManagedUserSpecifics::clear_has_chromeos_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
void ManagedUserSpecifics::clear_chromeos_avatar() {
  chromeos_avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chromeos_avatar();
}
const ::std::string& ManagedUserSpecifics::chromeos_avatar() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.chromeos_avatar)
  return chromeos_avatar_.GetNoArena();
}
void ManagedUserSpecifics::set_chromeos_avatar(const ::std::string& value) {
  set_has_chromeos_avatar();
  chromeos_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
#if LANG_CXX11
void ManagedUserSpecifics::set_chromeos_avatar(::std::string&& value) {
  set_has_chromeos_avatar();
  chromeos_avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
#endif
void ManagedUserSpecifics::set_chromeos_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chromeos_avatar();
  chromeos_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
void ManagedUserSpecifics::set_chromeos_avatar(const char* value, size_t size) {
  set_has_chromeos_avatar();
  chromeos_avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}
::std::string* ManagedUserSpecifics::mutable_chromeos_avatar() {
  set_has_chromeos_avatar();
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.chromeos_avatar)
  return chromeos_avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_chromeos_avatar() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.chromeos_avatar)
  clear_has_chromeos_avatar();
  return chromeos_avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_chromeos_avatar(::std::string* chromeos_avatar) {
  if (chromeos_avatar != NULL) {
    set_has_chromeos_avatar();
  } else {
    clear_has_chromeos_avatar();
  }
  chromeos_avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chromeos_avatar);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.chromeos_avatar)
}

// optional string password_signature_key = 7;
bool ManagedUserSpecifics::has_password_signature_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ManagedUserSpecifics::set_has_password_signature_key() {
  _has_bits_[0] |= 0x00000020u;
}
void ManagedUserSpecifics::clear_has_password_signature_key() {
  _has_bits_[0] &= ~0x00000020u;
}
void ManagedUserSpecifics::clear_password_signature_key() {
  password_signature_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password_signature_key();
}
const ::std::string& ManagedUserSpecifics::password_signature_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.password_signature_key)
  return password_signature_key_.GetNoArena();
}
void ManagedUserSpecifics::set_password_signature_key(const ::std::string& value) {
  set_has_password_signature_key();
  password_signature_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.password_signature_key)
}
#if LANG_CXX11
void ManagedUserSpecifics::set_password_signature_key(::std::string&& value) {
  set_has_password_signature_key();
  password_signature_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.password_signature_key)
}
#endif
void ManagedUserSpecifics::set_password_signature_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password_signature_key();
  password_signature_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.password_signature_key)
}
void ManagedUserSpecifics::set_password_signature_key(const char* value, size_t size) {
  set_has_password_signature_key();
  password_signature_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.password_signature_key)
}
::std::string* ManagedUserSpecifics::mutable_password_signature_key() {
  set_has_password_signature_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.password_signature_key)
  return password_signature_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_password_signature_key() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.password_signature_key)
  clear_has_password_signature_key();
  return password_signature_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_password_signature_key(::std::string* password_signature_key) {
  if (password_signature_key != NULL) {
    set_has_password_signature_key();
  } else {
    clear_has_password_signature_key();
  }
  password_signature_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_signature_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.password_signature_key)
}

// optional string password_encryption_key = 8;
bool ManagedUserSpecifics::has_password_encryption_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ManagedUserSpecifics::set_has_password_encryption_key() {
  _has_bits_[0] |= 0x00000040u;
}
void ManagedUserSpecifics::clear_has_password_encryption_key() {
  _has_bits_[0] &= ~0x00000040u;
}
void ManagedUserSpecifics::clear_password_encryption_key() {
  password_encryption_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password_encryption_key();
}
const ::std::string& ManagedUserSpecifics::password_encryption_key() const {
  // @@protoc_insertion_point(field_get:sync_pb.ManagedUserSpecifics.password_encryption_key)
  return password_encryption_key_.GetNoArena();
}
void ManagedUserSpecifics::set_password_encryption_key(const ::std::string& value) {
  set_has_password_encryption_key();
  password_encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
#if LANG_CXX11
void ManagedUserSpecifics::set_password_encryption_key(::std::string&& value) {
  set_has_password_encryption_key();
  password_encryption_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
#endif
void ManagedUserSpecifics::set_password_encryption_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password_encryption_key();
  password_encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
void ManagedUserSpecifics::set_password_encryption_key(const char* value, size_t size) {
  set_has_password_encryption_key();
  password_encryption_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.ManagedUserSpecifics.password_encryption_key)
}
::std::string* ManagedUserSpecifics::mutable_password_encryption_key() {
  set_has_password_encryption_key();
  // @@protoc_insertion_point(field_mutable:sync_pb.ManagedUserSpecifics.password_encryption_key)
  return password_encryption_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ManagedUserSpecifics::release_password_encryption_key() {
  // @@protoc_insertion_point(field_release:sync_pb.ManagedUserSpecifics.password_encryption_key)
  clear_has_password_encryption_key();
  return password_encryption_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ManagedUserSpecifics::set_allocated_password_encryption_key(::std::string* password_encryption_key) {
  if (password_encryption_key != NULL) {
    set_has_password_encryption_key();
  } else {
    clear_has_password_encryption_key();
  }
  password_encryption_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_encryption_key);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.ManagedUserSpecifics.password_encryption_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
