// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_specifics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "password_specifics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace sync_pb {
class PasswordSpecificsDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PasswordSpecificsData> {
} _PasswordSpecificsData_default_instance_;
class PasswordSpecificsMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PasswordSpecificsMetadata> {
} _PasswordSpecificsMetadata_default_instance_;
class PasswordSpecificsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PasswordSpecifics> {
} _PasswordSpecifics_default_instance_;

namespace protobuf_password_5fspecifics_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _PasswordSpecificsData_default_instance_.Shutdown();
  _PasswordSpecificsMetadata_default_instance_.Shutdown();
  _PasswordSpecifics_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sync_pb::protobuf_encryption_2eproto::InitDefaults();
  _PasswordSpecificsData_default_instance_.DefaultConstruct();
  _PasswordSpecificsMetadata_default_instance_.DefaultConstruct();
  _PasswordSpecifics_default_instance_.DefaultConstruct();
  _PasswordSpecifics_default_instance_.get_mutable()->encrypted_ = const_cast< ::sync_pb::EncryptedData*>(
      ::sync_pb::EncryptedData::internal_default_instance());
  _PasswordSpecifics_default_instance_.get_mutable()->client_only_encrypted_data_ = const_cast< ::sync_pb::PasswordSpecificsData*>(
      ::sync_pb::PasswordSpecificsData::internal_default_instance());
  _PasswordSpecifics_default_instance_.get_mutable()->unencrypted_metadata_ = const_cast< ::sync_pb::PasswordSpecificsMetadata*>(
      ::sync_pb::PasswordSpecificsMetadata::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::sync_pb::protobuf_encryption_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_password_5fspecifics_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PasswordSpecificsData::kSchemeFieldNumber;
const int PasswordSpecificsData::kSignonRealmFieldNumber;
const int PasswordSpecificsData::kOriginFieldNumber;
const int PasswordSpecificsData::kActionFieldNumber;
const int PasswordSpecificsData::kUsernameElementFieldNumber;
const int PasswordSpecificsData::kUsernameValueFieldNumber;
const int PasswordSpecificsData::kPasswordElementFieldNumber;
const int PasswordSpecificsData::kPasswordValueFieldNumber;
const int PasswordSpecificsData::kSslValidFieldNumber;
const int PasswordSpecificsData::kPreferredFieldNumber;
const int PasswordSpecificsData::kDateCreatedFieldNumber;
const int PasswordSpecificsData::kBlacklistedFieldNumber;
const int PasswordSpecificsData::kTypeFieldNumber;
const int PasswordSpecificsData::kTimesUsedFieldNumber;
const int PasswordSpecificsData::kDisplayNameFieldNumber;
const int PasswordSpecificsData::kAvatarUrlFieldNumber;
const int PasswordSpecificsData::kFederationUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PasswordSpecificsData::PasswordSpecificsData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_password_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.PasswordSpecificsData)
}
PasswordSpecificsData::PasswordSpecificsData(const PasswordSpecificsData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signon_realm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signon_realm()) {
    signon_realm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signon_realm_);
  }
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_origin()) {
    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action()) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  username_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username_element()) {
    username_element_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_element_);
  }
  username_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username_value()) {
    username_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_value_);
  }
  password_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password_element()) {
    password_element_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_element_);
  }
  password_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password_value()) {
    password_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_value_);
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatar_url()) {
    avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
  }
  federation_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_federation_url()) {
    federation_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.federation_url_);
  }
  ::memcpy(&scheme_, &from.scheme_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_used_) -
    reinterpret_cast<char*>(&scheme_)) + sizeof(times_used_));
  // @@protoc_insertion_point(copy_constructor:sync_pb.PasswordSpecificsData)
}

void PasswordSpecificsData::SharedCtor() {
  _cached_size_ = 0;
  signon_realm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_element_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  federation_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scheme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_used_) -
      reinterpret_cast<char*>(&scheme_)) + sizeof(times_used_));
}

PasswordSpecificsData::~PasswordSpecificsData() {
  // @@protoc_insertion_point(destructor:sync_pb.PasswordSpecificsData)
  SharedDtor();
}

void PasswordSpecificsData::SharedDtor() {
  signon_realm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_element_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  federation_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PasswordSpecificsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PasswordSpecificsData& PasswordSpecificsData::default_instance() {
  protobuf_password_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

PasswordSpecificsData* PasswordSpecificsData::New(::google::protobuf::Arena* arena) const {
  PasswordSpecificsData* n = new PasswordSpecificsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PasswordSpecificsData::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.PasswordSpecificsData)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_signon_realm()) {
      GOOGLE_DCHECK(!signon_realm_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signon_realm_.UnsafeRawStringPointer())->clear();
    }
    if (has_origin()) {
      GOOGLE_DCHECK(!origin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*origin_.UnsafeRawStringPointer())->clear();
    }
    if (has_action()) {
      GOOGLE_DCHECK(!action_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*action_.UnsafeRawStringPointer())->clear();
    }
    if (has_username_element()) {
      GOOGLE_DCHECK(!username_element_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_element_.UnsafeRawStringPointer())->clear();
    }
    if (has_username_value()) {
      GOOGLE_DCHECK(!username_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_value_.UnsafeRawStringPointer())->clear();
    }
    if (has_password_element()) {
      GOOGLE_DCHECK(!password_element_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_element_.UnsafeRawStringPointer())->clear();
    }
    if (has_password_value()) {
      GOOGLE_DCHECK(!password_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_value_.UnsafeRawStringPointer())->clear();
    }
    if (has_display_name()) {
      GOOGLE_DCHECK(!display_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*display_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_avatar_url()) {
      GOOGLE_DCHECK(!avatar_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*avatar_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_federation_url()) {
      GOOGLE_DCHECK(!federation_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*federation_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 64512u) {
    ::memset(&scheme_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&scheme_)) + sizeof(type_));
  }
  times_used_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PasswordSpecificsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.PasswordSpecificsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scheme = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_scheme();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scheme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string signon_realm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signon_realm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string origin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string action = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username_element = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password_element = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ssl_valid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_ssl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ssl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preferred = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_preferred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 date_created = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_date_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blacklisted = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_blacklisted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blacklisted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 times_used = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_times_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display_name = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string avatar_url = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string federation_url = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_federation_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.PasswordSpecificsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.PasswordSpecificsData)
  return false;
#undef DO_
}

void PasswordSpecificsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.PasswordSpecificsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 scheme = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scheme(), output);
  }

  // optional string signon_realm = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signon_realm(), output);
  }

  // optional string origin = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->origin(), output);
  }

  // optional string action = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->action(), output);
  }

  // optional string username_element = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->username_element(), output);
  }

  // optional string username_value = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->username_value(), output);
  }

  // optional string password_element = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->password_element(), output);
  }

  // optional string password_value = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->password_value(), output);
  }

  // optional bool ssl_valid = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ssl_valid(), output);
  }

  // optional bool preferred = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preferred(), output);
  }

  // optional int64 date_created = 11;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->date_created(), output);
  }

  // optional bool blacklisted = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->blacklisted(), output);
  }

  // optional int32 type = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->type(), output);
  }

  // optional int32 times_used = 14;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->times_used(), output);
  }

  // optional string display_name = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->display_name(), output);
  }

  // optional string avatar_url = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->avatar_url(), output);
  }

  // optional string federation_url = 17;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->federation_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.PasswordSpecificsData)
}

size_t PasswordSpecificsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.PasswordSpecificsData)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string signon_realm = 2;
    if (has_signon_realm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signon_realm());
    }

    // optional string origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional string action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional string username_element = 5;
    if (has_username_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username_element());
    }

    // optional string username_value = 6;
    if (has_username_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username_value());
    }

    // optional string password_element = 7;
    if (has_password_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_element());
    }

    // optional string password_value = 8;
    if (has_password_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_value());
    }

    // optional string display_name = 15;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string avatar_url = 16;
    if (has_avatar_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // optional string federation_url = 17;
    if (has_federation_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->federation_url());
    }

    // optional int32 scheme = 1;
    if (has_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scheme());
    }

    // optional bool ssl_valid = 9;
    if (has_ssl_valid()) {
      total_size += 1 + 1;
    }

    // optional bool preferred = 10;
    if (has_preferred()) {
      total_size += 1 + 1;
    }

    // optional bool blacklisted = 12;
    if (has_blacklisted()) {
      total_size += 1 + 1;
    }

    // optional int64 date_created = 11;
    if (has_date_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date_created());
    }

    // optional int32 type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // optional int32 times_used = 14;
  if (has_times_used()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times_used());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasswordSpecificsData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PasswordSpecificsData*>(&from));
}

void PasswordSpecificsData::MergeFrom(const PasswordSpecificsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PasswordSpecificsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signon_realm();
      signon_realm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signon_realm_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_origin();
      origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_action();
      action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_username_element();
      username_element_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_element_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_username_value();
      username_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_value_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_password_element();
      password_element_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_element_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_password_value();
      password_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_value_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_display_name();
      display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_avatar_url();
      avatar_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_url_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_federation_url();
      federation_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.federation_url_);
    }
    if (cached_has_bits & 0x00000400u) {
      scheme_ = from.scheme_;
    }
    if (cached_has_bits & 0x00000800u) {
      ssl_valid_ = from.ssl_valid_;
    }
    if (cached_has_bits & 0x00001000u) {
      preferred_ = from.preferred_;
    }
    if (cached_has_bits & 0x00002000u) {
      blacklisted_ = from.blacklisted_;
    }
    if (cached_has_bits & 0x00004000u) {
      date_created_ = from.date_created_;
    }
    if (cached_has_bits & 0x00008000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_times_used(from.times_used());
  }
}

void PasswordSpecificsData::CopyFrom(const PasswordSpecificsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PasswordSpecificsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordSpecificsData::IsInitialized() const {
  return true;
}

void PasswordSpecificsData::Swap(PasswordSpecificsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PasswordSpecificsData::InternalSwap(PasswordSpecificsData* other) {
  signon_realm_.Swap(&other->signon_realm_);
  origin_.Swap(&other->origin_);
  action_.Swap(&other->action_);
  username_element_.Swap(&other->username_element_);
  username_value_.Swap(&other->username_value_);
  password_element_.Swap(&other->password_element_);
  password_value_.Swap(&other->password_value_);
  display_name_.Swap(&other->display_name_);
  avatar_url_.Swap(&other->avatar_url_);
  federation_url_.Swap(&other->federation_url_);
  std::swap(scheme_, other->scheme_);
  std::swap(ssl_valid_, other->ssl_valid_);
  std::swap(preferred_, other->preferred_);
  std::swap(blacklisted_, other->blacklisted_);
  std::swap(date_created_, other->date_created_);
  std::swap(type_, other->type_);
  std::swap(times_used_, other->times_used_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PasswordSpecificsData::GetTypeName() const {
  return "sync_pb.PasswordSpecificsData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PasswordSpecificsData

// optional int32 scheme = 1;
bool PasswordSpecificsData::has_scheme() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PasswordSpecificsData::set_has_scheme() {
  _has_bits_[0] |= 0x00000400u;
}
void PasswordSpecificsData::clear_has_scheme() {
  _has_bits_[0] &= ~0x00000400u;
}
void PasswordSpecificsData::clear_scheme() {
  scheme_ = 0;
  clear_has_scheme();
}
::google::protobuf::int32 PasswordSpecificsData::scheme() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.scheme)
  return scheme_;
}
void PasswordSpecificsData::set_scheme(::google::protobuf::int32 value) {
  set_has_scheme();
  scheme_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.scheme)
}

// optional string signon_realm = 2;
bool PasswordSpecificsData::has_signon_realm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PasswordSpecificsData::set_has_signon_realm() {
  _has_bits_[0] |= 0x00000001u;
}
void PasswordSpecificsData::clear_has_signon_realm() {
  _has_bits_[0] &= ~0x00000001u;
}
void PasswordSpecificsData::clear_signon_realm() {
  signon_realm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signon_realm();
}
const ::std::string& PasswordSpecificsData::signon_realm() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.signon_realm)
  return signon_realm_.GetNoArena();
}
void PasswordSpecificsData::set_signon_realm(const ::std::string& value) {
  set_has_signon_realm();
  signon_realm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.signon_realm)
}
#if LANG_CXX11
void PasswordSpecificsData::set_signon_realm(::std::string&& value) {
  set_has_signon_realm();
  signon_realm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.signon_realm)
}
#endif
void PasswordSpecificsData::set_signon_realm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signon_realm();
  signon_realm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.signon_realm)
}
void PasswordSpecificsData::set_signon_realm(const char* value, size_t size) {
  set_has_signon_realm();
  signon_realm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.signon_realm)
}
::std::string* PasswordSpecificsData::mutable_signon_realm() {
  set_has_signon_realm();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.signon_realm)
  return signon_realm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_signon_realm() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.signon_realm)
  clear_has_signon_realm();
  return signon_realm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_signon_realm(::std::string* signon_realm) {
  if (signon_realm != NULL) {
    set_has_signon_realm();
  } else {
    clear_has_signon_realm();
  }
  signon_realm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signon_realm);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.signon_realm)
}

// optional string origin = 3;
bool PasswordSpecificsData::has_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PasswordSpecificsData::set_has_origin() {
  _has_bits_[0] |= 0x00000002u;
}
void PasswordSpecificsData::clear_has_origin() {
  _has_bits_[0] &= ~0x00000002u;
}
void PasswordSpecificsData::clear_origin() {
  origin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin();
}
const ::std::string& PasswordSpecificsData::origin() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.origin)
  return origin_.GetNoArena();
}
void PasswordSpecificsData::set_origin(const ::std::string& value) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.origin)
}
#if LANG_CXX11
void PasswordSpecificsData::set_origin(::std::string&& value) {
  set_has_origin();
  origin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.origin)
}
#endif
void PasswordSpecificsData::set_origin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.origin)
}
void PasswordSpecificsData::set_origin(const char* value, size_t size) {
  set_has_origin();
  origin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.origin)
}
::std::string* PasswordSpecificsData::mutable_origin() {
  set_has_origin();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.origin)
  return origin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_origin() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.origin)
  clear_has_origin();
  return origin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_origin(::std::string* origin) {
  if (origin != NULL) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  origin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.origin)
}

// optional string action = 4;
bool PasswordSpecificsData::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PasswordSpecificsData::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void PasswordSpecificsData::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void PasswordSpecificsData::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}
const ::std::string& PasswordSpecificsData::action() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.action)
  return action_.GetNoArena();
}
void PasswordSpecificsData::set_action(const ::std::string& value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.action)
}
#if LANG_CXX11
void PasswordSpecificsData::set_action(::std::string&& value) {
  set_has_action();
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.action)
}
#endif
void PasswordSpecificsData::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.action)
}
void PasswordSpecificsData::set_action(const char* value, size_t size) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.action)
}
::std::string* PasswordSpecificsData::mutable_action() {
  set_has_action();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_action() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.action)
  clear_has_action();
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    set_has_action();
  } else {
    clear_has_action();
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.action)
}

// optional string username_element = 5;
bool PasswordSpecificsData::has_username_element() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PasswordSpecificsData::set_has_username_element() {
  _has_bits_[0] |= 0x00000008u;
}
void PasswordSpecificsData::clear_has_username_element() {
  _has_bits_[0] &= ~0x00000008u;
}
void PasswordSpecificsData::clear_username_element() {
  username_element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username_element();
}
const ::std::string& PasswordSpecificsData::username_element() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_element)
  return username_element_.GetNoArena();
}
void PasswordSpecificsData::set_username_element(const ::std::string& value) {
  set_has_username_element();
  username_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_element)
}
#if LANG_CXX11
void PasswordSpecificsData::set_username_element(::std::string&& value) {
  set_has_username_element();
  username_element_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.username_element)
}
#endif
void PasswordSpecificsData::set_username_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username_element();
  username_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.username_element)
}
void PasswordSpecificsData::set_username_element(const char* value, size_t size) {
  set_has_username_element();
  username_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.username_element)
}
::std::string* PasswordSpecificsData::mutable_username_element() {
  set_has_username_element();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_element)
  return username_element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_username_element() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_element)
  clear_has_username_element();
  return username_element_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_username_element(::std::string* username_element) {
  if (username_element != NULL) {
    set_has_username_element();
  } else {
    clear_has_username_element();
  }
  username_element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username_element);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_element)
}

// optional string username_value = 6;
bool PasswordSpecificsData::has_username_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PasswordSpecificsData::set_has_username_value() {
  _has_bits_[0] |= 0x00000010u;
}
void PasswordSpecificsData::clear_has_username_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void PasswordSpecificsData::clear_username_value() {
  username_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username_value();
}
const ::std::string& PasswordSpecificsData::username_value() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.username_value)
  return username_value_.GetNoArena();
}
void PasswordSpecificsData::set_username_value(const ::std::string& value) {
  set_has_username_value();
  username_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.username_value)
}
#if LANG_CXX11
void PasswordSpecificsData::set_username_value(::std::string&& value) {
  set_has_username_value();
  username_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.username_value)
}
#endif
void PasswordSpecificsData::set_username_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username_value();
  username_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.username_value)
}
void PasswordSpecificsData::set_username_value(const char* value, size_t size) {
  set_has_username_value();
  username_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.username_value)
}
::std::string* PasswordSpecificsData::mutable_username_value() {
  set_has_username_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.username_value)
  return username_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_username_value() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.username_value)
  clear_has_username_value();
  return username_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_username_value(::std::string* username_value) {
  if (username_value != NULL) {
    set_has_username_value();
  } else {
    clear_has_username_value();
  }
  username_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username_value);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.username_value)
}

// optional string password_element = 7;
bool PasswordSpecificsData::has_password_element() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PasswordSpecificsData::set_has_password_element() {
  _has_bits_[0] |= 0x00000020u;
}
void PasswordSpecificsData::clear_has_password_element() {
  _has_bits_[0] &= ~0x00000020u;
}
void PasswordSpecificsData::clear_password_element() {
  password_element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password_element();
}
const ::std::string& PasswordSpecificsData::password_element() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_element)
  return password_element_.GetNoArena();
}
void PasswordSpecificsData::set_password_element(const ::std::string& value) {
  set_has_password_element();
  password_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_element)
}
#if LANG_CXX11
void PasswordSpecificsData::set_password_element(::std::string&& value) {
  set_has_password_element();
  password_element_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.password_element)
}
#endif
void PasswordSpecificsData::set_password_element(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password_element();
  password_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.password_element)
}
void PasswordSpecificsData::set_password_element(const char* value, size_t size) {
  set_has_password_element();
  password_element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.password_element)
}
::std::string* PasswordSpecificsData::mutable_password_element() {
  set_has_password_element();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_element)
  return password_element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_password_element() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_element)
  clear_has_password_element();
  return password_element_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_password_element(::std::string* password_element) {
  if (password_element != NULL) {
    set_has_password_element();
  } else {
    clear_has_password_element();
  }
  password_element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_element);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_element)
}

// optional string password_value = 8;
bool PasswordSpecificsData::has_password_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PasswordSpecificsData::set_has_password_value() {
  _has_bits_[0] |= 0x00000040u;
}
void PasswordSpecificsData::clear_has_password_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void PasswordSpecificsData::clear_password_value() {
  password_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password_value();
}
const ::std::string& PasswordSpecificsData::password_value() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.password_value)
  return password_value_.GetNoArena();
}
void PasswordSpecificsData::set_password_value(const ::std::string& value) {
  set_has_password_value();
  password_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.password_value)
}
#if LANG_CXX11
void PasswordSpecificsData::set_password_value(::std::string&& value) {
  set_has_password_value();
  password_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.password_value)
}
#endif
void PasswordSpecificsData::set_password_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password_value();
  password_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.password_value)
}
void PasswordSpecificsData::set_password_value(const char* value, size_t size) {
  set_has_password_value();
  password_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.password_value)
}
::std::string* PasswordSpecificsData::mutable_password_value() {
  set_has_password_value();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.password_value)
  return password_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_password_value() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.password_value)
  clear_has_password_value();
  return password_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_password_value(::std::string* password_value) {
  if (password_value != NULL) {
    set_has_password_value();
  } else {
    clear_has_password_value();
  }
  password_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password_value);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.password_value)
}

// optional bool ssl_valid = 9;
bool PasswordSpecificsData::has_ssl_valid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PasswordSpecificsData::set_has_ssl_valid() {
  _has_bits_[0] |= 0x00000800u;
}
void PasswordSpecificsData::clear_has_ssl_valid() {
  _has_bits_[0] &= ~0x00000800u;
}
void PasswordSpecificsData::clear_ssl_valid() {
  ssl_valid_ = false;
  clear_has_ssl_valid();
}
bool PasswordSpecificsData::ssl_valid() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.ssl_valid)
  return ssl_valid_;
}
void PasswordSpecificsData::set_ssl_valid(bool value) {
  set_has_ssl_valid();
  ssl_valid_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.ssl_valid)
}

// optional bool preferred = 10;
bool PasswordSpecificsData::has_preferred() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PasswordSpecificsData::set_has_preferred() {
  _has_bits_[0] |= 0x00001000u;
}
void PasswordSpecificsData::clear_has_preferred() {
  _has_bits_[0] &= ~0x00001000u;
}
void PasswordSpecificsData::clear_preferred() {
  preferred_ = false;
  clear_has_preferred();
}
bool PasswordSpecificsData::preferred() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.preferred)
  return preferred_;
}
void PasswordSpecificsData::set_preferred(bool value) {
  set_has_preferred();
  preferred_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.preferred)
}

// optional int64 date_created = 11;
bool PasswordSpecificsData::has_date_created() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PasswordSpecificsData::set_has_date_created() {
  _has_bits_[0] |= 0x00004000u;
}
void PasswordSpecificsData::clear_has_date_created() {
  _has_bits_[0] &= ~0x00004000u;
}
void PasswordSpecificsData::clear_date_created() {
  date_created_ = GOOGLE_LONGLONG(0);
  clear_has_date_created();
}
::google::protobuf::int64 PasswordSpecificsData::date_created() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.date_created)
  return date_created_;
}
void PasswordSpecificsData::set_date_created(::google::protobuf::int64 value) {
  set_has_date_created();
  date_created_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.date_created)
}

// optional bool blacklisted = 12;
bool PasswordSpecificsData::has_blacklisted() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PasswordSpecificsData::set_has_blacklisted() {
  _has_bits_[0] |= 0x00002000u;
}
void PasswordSpecificsData::clear_has_blacklisted() {
  _has_bits_[0] &= ~0x00002000u;
}
void PasswordSpecificsData::clear_blacklisted() {
  blacklisted_ = false;
  clear_has_blacklisted();
}
bool PasswordSpecificsData::blacklisted() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.blacklisted)
  return blacklisted_;
}
void PasswordSpecificsData::set_blacklisted(bool value) {
  set_has_blacklisted();
  blacklisted_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.blacklisted)
}

// optional int32 type = 13;
bool PasswordSpecificsData::has_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PasswordSpecificsData::set_has_type() {
  _has_bits_[0] |= 0x00008000u;
}
void PasswordSpecificsData::clear_has_type() {
  _has_bits_[0] &= ~0x00008000u;
}
void PasswordSpecificsData::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 PasswordSpecificsData::type() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.type)
  return type_;
}
void PasswordSpecificsData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.type)
}

// optional int32 times_used = 14;
bool PasswordSpecificsData::has_times_used() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PasswordSpecificsData::set_has_times_used() {
  _has_bits_[0] |= 0x00010000u;
}
void PasswordSpecificsData::clear_has_times_used() {
  _has_bits_[0] &= ~0x00010000u;
}
void PasswordSpecificsData::clear_times_used() {
  times_used_ = 0;
  clear_has_times_used();
}
::google::protobuf::int32 PasswordSpecificsData::times_used() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.times_used)
  return times_used_;
}
void PasswordSpecificsData::set_times_used(::google::protobuf::int32 value) {
  set_has_times_used();
  times_used_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.times_used)
}

// optional string display_name = 15;
bool PasswordSpecificsData::has_display_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PasswordSpecificsData::set_has_display_name() {
  _has_bits_[0] |= 0x00000080u;
}
void PasswordSpecificsData::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000080u;
}
void PasswordSpecificsData::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
const ::std::string& PasswordSpecificsData::display_name() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.display_name)
  return display_name_.GetNoArena();
}
void PasswordSpecificsData::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.display_name)
}
#if LANG_CXX11
void PasswordSpecificsData::set_display_name(::std::string&& value) {
  set_has_display_name();
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.display_name)
}
#endif
void PasswordSpecificsData::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.display_name)
}
void PasswordSpecificsData::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.display_name)
}
::std::string* PasswordSpecificsData::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_display_name() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.display_name)
}

// optional string avatar_url = 16;
bool PasswordSpecificsData::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PasswordSpecificsData::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000100u;
}
void PasswordSpecificsData::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000100u;
}
void PasswordSpecificsData::clear_avatar_url() {
  avatar_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar_url();
}
const ::std::string& PasswordSpecificsData::avatar_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.avatar_url)
  return avatar_url_.GetNoArena();
}
void PasswordSpecificsData::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.avatar_url)
}
#if LANG_CXX11
void PasswordSpecificsData::set_avatar_url(::std::string&& value) {
  set_has_avatar_url();
  avatar_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.avatar_url)
}
#endif
void PasswordSpecificsData::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_avatar_url();
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.avatar_url)
}
void PasswordSpecificsData::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  avatar_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.avatar_url)
}
::std::string* PasswordSpecificsData::mutable_avatar_url() {
  set_has_avatar_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.avatar_url)
  return avatar_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_avatar_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.avatar_url)
  clear_has_avatar_url();
  return avatar_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url != NULL) {
    set_has_avatar_url();
  } else {
    clear_has_avatar_url();
  }
  avatar_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.avatar_url)
}

// optional string federation_url = 17;
bool PasswordSpecificsData::has_federation_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PasswordSpecificsData::set_has_federation_url() {
  _has_bits_[0] |= 0x00000200u;
}
void PasswordSpecificsData::clear_has_federation_url() {
  _has_bits_[0] &= ~0x00000200u;
}
void PasswordSpecificsData::clear_federation_url() {
  federation_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_federation_url();
}
const ::std::string& PasswordSpecificsData::federation_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsData.federation_url)
  return federation_url_.GetNoArena();
}
void PasswordSpecificsData::set_federation_url(const ::std::string& value) {
  set_has_federation_url();
  federation_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsData.federation_url)
}
#if LANG_CXX11
void PasswordSpecificsData::set_federation_url(::std::string&& value) {
  set_has_federation_url();
  federation_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsData.federation_url)
}
#endif
void PasswordSpecificsData::set_federation_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_federation_url();
  federation_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsData.federation_url)
}
void PasswordSpecificsData::set_federation_url(const char* value, size_t size) {
  set_has_federation_url();
  federation_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsData.federation_url)
}
::std::string* PasswordSpecificsData::mutable_federation_url() {
  set_has_federation_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsData.federation_url)
  return federation_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsData::release_federation_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsData.federation_url)
  clear_has_federation_url();
  return federation_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsData::set_allocated_federation_url(::std::string* federation_url) {
  if (federation_url != NULL) {
    set_has_federation_url();
  } else {
    clear_has_federation_url();
  }
  federation_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), federation_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsData.federation_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PasswordSpecificsMetadata::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PasswordSpecificsMetadata::PasswordSpecificsMetadata()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_password_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.PasswordSpecificsMetadata)
}
PasswordSpecificsMetadata::PasswordSpecificsMetadata(const PasswordSpecificsMetadata& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.PasswordSpecificsMetadata)
}

void PasswordSpecificsMetadata::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PasswordSpecificsMetadata::~PasswordSpecificsMetadata() {
  // @@protoc_insertion_point(destructor:sync_pb.PasswordSpecificsMetadata)
  SharedDtor();
}

void PasswordSpecificsMetadata::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PasswordSpecificsMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PasswordSpecificsMetadata& PasswordSpecificsMetadata::default_instance() {
  protobuf_password_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

PasswordSpecificsMetadata* PasswordSpecificsMetadata::New(::google::protobuf::Arena* arena) const {
  PasswordSpecificsMetadata* n = new PasswordSpecificsMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PasswordSpecificsMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.PasswordSpecificsMetadata)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PasswordSpecificsMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.PasswordSpecificsMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.PasswordSpecificsMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.PasswordSpecificsMetadata)
  return false;
#undef DO_
}

void PasswordSpecificsMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.PasswordSpecificsMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.PasswordSpecificsMetadata)
}

size_t PasswordSpecificsMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.PasswordSpecificsMetadata)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional string url = 1;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasswordSpecificsMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PasswordSpecificsMetadata*>(&from));
}

void PasswordSpecificsMetadata::MergeFrom(const PasswordSpecificsMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PasswordSpecificsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_has_url();
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void PasswordSpecificsMetadata::CopyFrom(const PasswordSpecificsMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PasswordSpecificsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordSpecificsMetadata::IsInitialized() const {
  return true;
}

void PasswordSpecificsMetadata::Swap(PasswordSpecificsMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PasswordSpecificsMetadata::InternalSwap(PasswordSpecificsMetadata* other) {
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PasswordSpecificsMetadata::GetTypeName() const {
  return "sync_pb.PasswordSpecificsMetadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PasswordSpecificsMetadata

// optional string url = 1;
bool PasswordSpecificsMetadata::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PasswordSpecificsMetadata::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void PasswordSpecificsMetadata::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void PasswordSpecificsMetadata::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& PasswordSpecificsMetadata::url() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecificsMetadata.url)
  return url_.GetNoArena();
}
void PasswordSpecificsMetadata::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.PasswordSpecificsMetadata.url)
}
#if LANG_CXX11
void PasswordSpecificsMetadata::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.PasswordSpecificsMetadata.url)
}
#endif
void PasswordSpecificsMetadata::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.PasswordSpecificsMetadata.url)
}
void PasswordSpecificsMetadata::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.PasswordSpecificsMetadata.url)
}
::std::string* PasswordSpecificsMetadata::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecificsMetadata.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PasswordSpecificsMetadata::release_url() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecificsMetadata.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PasswordSpecificsMetadata::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecificsMetadata.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PasswordSpecifics::kEncryptedFieldNumber;
const int PasswordSpecifics::kClientOnlyEncryptedDataFieldNumber;
const int PasswordSpecifics::kUnencryptedMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PasswordSpecifics::PasswordSpecifics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_password_5fspecifics_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sync_pb.PasswordSpecifics)
}
PasswordSpecifics::PasswordSpecifics(const PasswordSpecifics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_encrypted()) {
    encrypted_ = new ::sync_pb::EncryptedData(*from.encrypted_);
  } else {
    encrypted_ = NULL;
  }
  if (from.has_client_only_encrypted_data()) {
    client_only_encrypted_data_ = new ::sync_pb::PasswordSpecificsData(*from.client_only_encrypted_data_);
  } else {
    client_only_encrypted_data_ = NULL;
  }
  if (from.has_unencrypted_metadata()) {
    unencrypted_metadata_ = new ::sync_pb::PasswordSpecificsMetadata(*from.unencrypted_metadata_);
  } else {
    unencrypted_metadata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sync_pb.PasswordSpecifics)
}

void PasswordSpecifics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&encrypted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unencrypted_metadata_) -
      reinterpret_cast<char*>(&encrypted_)) + sizeof(unencrypted_metadata_));
}

PasswordSpecifics::~PasswordSpecifics() {
  // @@protoc_insertion_point(destructor:sync_pb.PasswordSpecifics)
  SharedDtor();
}

void PasswordSpecifics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete encrypted_;
  }
  if (this != internal_default_instance()) {
    delete client_only_encrypted_data_;
  }
  if (this != internal_default_instance()) {
    delete unencrypted_metadata_;
  }
}

void PasswordSpecifics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PasswordSpecifics& PasswordSpecifics::default_instance() {
  protobuf_password_5fspecifics_2eproto::InitDefaults();
  return *internal_default_instance();
}

PasswordSpecifics* PasswordSpecifics::New(::google::protobuf::Arena* arena) const {
  PasswordSpecifics* n = new PasswordSpecifics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PasswordSpecifics::Clear() {
// @@protoc_insertion_point(message_clear_start:sync_pb.PasswordSpecifics)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_encrypted()) {
      GOOGLE_DCHECK(encrypted_ != NULL);
      encrypted_->::sync_pb::EncryptedData::Clear();
    }
    if (has_client_only_encrypted_data()) {
      GOOGLE_DCHECK(client_only_encrypted_data_ != NULL);
      client_only_encrypted_data_->::sync_pb::PasswordSpecificsData::Clear();
    }
    if (has_unencrypted_metadata()) {
      GOOGLE_DCHECK(unencrypted_metadata_ != NULL);
      unencrypted_metadata_->::sync_pb::PasswordSpecificsMetadata::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PasswordSpecifics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:sync_pb.PasswordSpecifics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .sync_pb.EncryptedData encrypted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encrypted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_only_encrypted_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unencrypted_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sync_pb.PasswordSpecifics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sync_pb.PasswordSpecifics)
  return false;
#undef DO_
}

void PasswordSpecifics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sync_pb.PasswordSpecifics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.EncryptedData encrypted = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->encrypted_, output);
  }

  // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->client_only_encrypted_data_, output);
  }

  // optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->unencrypted_metadata_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:sync_pb.PasswordSpecifics)
}

size_t PasswordSpecifics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sync_pb.PasswordSpecifics)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .sync_pb.EncryptedData encrypted = 1;
    if (has_encrypted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->encrypted_);
    }

    // optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
    if (has_client_only_encrypted_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->client_only_encrypted_data_);
    }

    // optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
    if (has_unencrypted_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unencrypted_metadata_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PasswordSpecifics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PasswordSpecifics*>(&from));
}

void PasswordSpecifics::MergeFrom(const PasswordSpecifics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sync_pb.PasswordSpecifics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_encrypted()->::sync_pb::EncryptedData::MergeFrom(from.encrypted());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_client_only_encrypted_data()->::sync_pb::PasswordSpecificsData::MergeFrom(from.client_only_encrypted_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_unencrypted_metadata()->::sync_pb::PasswordSpecificsMetadata::MergeFrom(from.unencrypted_metadata());
    }
  }
}

void PasswordSpecifics::CopyFrom(const PasswordSpecifics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sync_pb.PasswordSpecifics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordSpecifics::IsInitialized() const {
  return true;
}

void PasswordSpecifics::Swap(PasswordSpecifics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PasswordSpecifics::InternalSwap(PasswordSpecifics* other) {
  std::swap(encrypted_, other->encrypted_);
  std::swap(client_only_encrypted_data_, other->client_only_encrypted_data_);
  std::swap(unencrypted_metadata_, other->unencrypted_metadata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PasswordSpecifics::GetTypeName() const {
  return "sync_pb.PasswordSpecifics";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PasswordSpecifics

// optional .sync_pb.EncryptedData encrypted = 1;
bool PasswordSpecifics::has_encrypted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PasswordSpecifics::set_has_encrypted() {
  _has_bits_[0] |= 0x00000001u;
}
void PasswordSpecifics::clear_has_encrypted() {
  _has_bits_[0] &= ~0x00000001u;
}
void PasswordSpecifics::clear_encrypted() {
  if (encrypted_ != NULL) encrypted_->::sync_pb::EncryptedData::Clear();
  clear_has_encrypted();
}
const ::sync_pb::EncryptedData& PasswordSpecifics::encrypted() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.encrypted)
  return encrypted_ != NULL ? *encrypted_
                         : *::sync_pb::EncryptedData::internal_default_instance();
}
::sync_pb::EncryptedData* PasswordSpecifics::mutable_encrypted() {
  set_has_encrypted();
  if (encrypted_ == NULL) {
    encrypted_ = new ::sync_pb::EncryptedData;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.encrypted)
  return encrypted_;
}
::sync_pb::EncryptedData* PasswordSpecifics::release_encrypted() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.encrypted)
  clear_has_encrypted();
  ::sync_pb::EncryptedData* temp = encrypted_;
  encrypted_ = NULL;
  return temp;
}
void PasswordSpecifics::set_allocated_encrypted(::sync_pb::EncryptedData* encrypted) {
  delete encrypted_;
  encrypted_ = encrypted;
  if (encrypted) {
    set_has_encrypted();
  } else {
    clear_has_encrypted();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.encrypted)
}

// optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;
bool PasswordSpecifics::has_client_only_encrypted_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PasswordSpecifics::set_has_client_only_encrypted_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PasswordSpecifics::clear_has_client_only_encrypted_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PasswordSpecifics::clear_client_only_encrypted_data() {
  if (client_only_encrypted_data_ != NULL) client_only_encrypted_data_->::sync_pb::PasswordSpecificsData::Clear();
  clear_has_client_only_encrypted_data();
}
const ::sync_pb::PasswordSpecificsData& PasswordSpecifics::client_only_encrypted_data() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.client_only_encrypted_data)
  return client_only_encrypted_data_ != NULL ? *client_only_encrypted_data_
                         : *::sync_pb::PasswordSpecificsData::internal_default_instance();
}
::sync_pb::PasswordSpecificsData* PasswordSpecifics::mutable_client_only_encrypted_data() {
  set_has_client_only_encrypted_data();
  if (client_only_encrypted_data_ == NULL) {
    client_only_encrypted_data_ = new ::sync_pb::PasswordSpecificsData;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.client_only_encrypted_data)
  return client_only_encrypted_data_;
}
::sync_pb::PasswordSpecificsData* PasswordSpecifics::release_client_only_encrypted_data() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.client_only_encrypted_data)
  clear_has_client_only_encrypted_data();
  ::sync_pb::PasswordSpecificsData* temp = client_only_encrypted_data_;
  client_only_encrypted_data_ = NULL;
  return temp;
}
void PasswordSpecifics::set_allocated_client_only_encrypted_data(::sync_pb::PasswordSpecificsData* client_only_encrypted_data) {
  delete client_only_encrypted_data_;
  client_only_encrypted_data_ = client_only_encrypted_data;
  if (client_only_encrypted_data) {
    set_has_client_only_encrypted_data();
  } else {
    clear_has_client_only_encrypted_data();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.client_only_encrypted_data)
}

// optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;
bool PasswordSpecifics::has_unencrypted_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PasswordSpecifics::set_has_unencrypted_metadata() {
  _has_bits_[0] |= 0x00000004u;
}
void PasswordSpecifics::clear_has_unencrypted_metadata() {
  _has_bits_[0] &= ~0x00000004u;
}
void PasswordSpecifics::clear_unencrypted_metadata() {
  if (unencrypted_metadata_ != NULL) unencrypted_metadata_->::sync_pb::PasswordSpecificsMetadata::Clear();
  clear_has_unencrypted_metadata();
}
const ::sync_pb::PasswordSpecificsMetadata& PasswordSpecifics::unencrypted_metadata() const {
  // @@protoc_insertion_point(field_get:sync_pb.PasswordSpecifics.unencrypted_metadata)
  return unencrypted_metadata_ != NULL ? *unencrypted_metadata_
                         : *::sync_pb::PasswordSpecificsMetadata::internal_default_instance();
}
::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::mutable_unencrypted_metadata() {
  set_has_unencrypted_metadata();
  if (unencrypted_metadata_ == NULL) {
    unencrypted_metadata_ = new ::sync_pb::PasswordSpecificsMetadata;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.PasswordSpecifics.unencrypted_metadata)
  return unencrypted_metadata_;
}
::sync_pb::PasswordSpecificsMetadata* PasswordSpecifics::release_unencrypted_metadata() {
  // @@protoc_insertion_point(field_release:sync_pb.PasswordSpecifics.unencrypted_metadata)
  clear_has_unencrypted_metadata();
  ::sync_pb::PasswordSpecificsMetadata* temp = unencrypted_metadata_;
  unencrypted_metadata_ = NULL;
  return temp;
}
void PasswordSpecifics::set_allocated_unencrypted_metadata(::sync_pb::PasswordSpecificsMetadata* unencrypted_metadata) {
  delete unencrypted_metadata_;
  unencrypted_metadata_ = unencrypted_metadata;
  if (unencrypted_metadata) {
    set_has_unencrypted_metadata();
  } else {
    clear_has_unencrypted_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:sync_pb.PasswordSpecifics.unencrypted_metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

// @@protoc_insertion_point(global_scope)
