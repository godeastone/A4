// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace protodb {
class EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Entry> {
} _Entry_default_instance_;

namespace protobuf_entry_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Entry_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protodb::protobuf_request_2eproto::InitDefaults();
  ::protodb::protobuf_scheduling_2eproto::InitDefaults();
  _Entry_default_instance_.DefaultConstruct();
  _Entry_default_instance_.get_mutable()->scheduling_params_ = const_cast< ::protodb::SchedulingParams*>(
      ::protodb::SchedulingParams::internal_default_instance());
  _Entry_default_instance_.get_mutable()->request_params_ = const_cast< ::protodb::RequestParams*>(
      ::protodb::RequestParams::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::protodb::protobuf_request_2eproto::AddDescriptors();
  ::protodb::protobuf_scheduling_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_entry_2eproto

bool Entry_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Entry_State Entry::NEW;
const Entry_State Entry::AVAILABLE;
const Entry_State Entry::ACTIVE;
const Entry_State Entry::PAUSED;
const Entry_State Entry::COMPLETE;
const Entry_State Entry::State_MIN;
const Entry_State Entry::State_MAX;
const int Entry::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool DownloadClient_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kNameSpaceFieldNumber;
const int Entry::kGuidFieldNumber;
const int Entry::kSchedulingParamsFieldNumber;
const int Entry::kRequestParamsFieldNumber;
const int Entry::kStateFieldNumber;
const int Entry::kTargetFilePathFieldNumber;
const int Entry::kCreateTimeFieldNumber;
const int Entry::kCompletionTimeFieldNumber;
const int Entry::kAttemptCountFieldNumber;
const int Entry::kTrafficAnnotationFieldNumber;
const int Entry::kBytesDownloadedFieldNumber;
const int Entry::kLastCleanupCheckTimeFieldNumber;
const int Entry::kCleanupAttemptCountFieldNumber;
const int Entry::kResumptionCountFieldNumber;
const int Entry::kHasUploadDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_entry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protodb.Entry)
}
Entry::Entry(const Entry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  target_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_file_path()) {
    target_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_file_path_);
  }
  if (from.has_scheduling_params()) {
    scheduling_params_ = new ::protodb::SchedulingParams(*from.scheduling_params_);
  } else {
    scheduling_params_ = NULL;
  }
  if (from.has_request_params()) {
    request_params_ = new ::protodb::RequestParams(*from.request_params_);
  } else {
    request_params_ = NULL;
  }
  ::memcpy(&name_space_, &from.name_space_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_upload_data_) -
    reinterpret_cast<char*>(&name_space_)) + sizeof(has_upload_data_));
  // @@protoc_insertion_point(copy_constructor:protodb.Entry)
}

void Entry::SharedCtor() {
  _cached_size_ = 0;
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scheduling_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_upload_data_) -
      reinterpret_cast<char*>(&scheduling_params_)) + sizeof(has_upload_data_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:protodb.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete scheduling_params_;
  }
  if (this != internal_default_instance()) {
    delete request_params_;
  }
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Entry& Entry::default_instance() {
  protobuf_entry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Entry* Entry::New(::google::protobuf::Arena* arena) const {
  Entry* n = new Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:protodb.Entry)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_guid()) {
      GOOGLE_DCHECK(!guid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guid_.UnsafeRawStringPointer())->clear();
    }
    if (has_target_file_path()) {
      GOOGLE_DCHECK(!target_file_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_file_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_scheduling_params()) {
      GOOGLE_DCHECK(scheduling_params_ != NULL);
      scheduling_params_->::protodb::SchedulingParams::Clear();
    }
    if (has_request_params()) {
      GOOGLE_DCHECK(request_params_ != NULL);
      request_params_->::protodb::RequestParams::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&name_space_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completion_time_) -
        reinterpret_cast<char*>(&name_space_)) + sizeof(completion_time_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&attempt_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_upload_data_) -
        reinterpret_cast<char*>(&attempt_count_)) + sizeof(has_upload_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:protodb.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protodb.DownloadClient name_space = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::DownloadClient_IsValid(value)) {
            set_name_space(static_cast< ::protodb::DownloadClient >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.SchedulingParams scheduling_params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scheduling_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.RequestParams request_params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.Entry.State state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::Entry_State_IsValid(value)) {
            set_state(static_cast< ::protodb::Entry_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_file_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_file_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 create_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_create_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 completion_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_completion_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &completion_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attempt_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_attempt_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 traffic_annotation = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_traffic_annotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traffic_annotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_downloaded = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_bytes_downloaded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_downloaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_cleanup_check_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_last_cleanup_check_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_cleanup_check_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cleanup_attempt_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_cleanup_attempt_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cleanup_attempt_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resumption_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_resumption_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resumption_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_upload_data = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_has_upload_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_upload_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protodb.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protodb.Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protodb.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protodb.DownloadClient name_space = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name_space(), output);
  }

  // optional string guid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guid(), output);
  }

  // optional .protodb.SchedulingParams scheduling_params = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->scheduling_params_, output);
  }

  // optional .protodb.RequestParams request_params = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->request_params_, output);
  }

  // optional .protodb.Entry.State state = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional string target_file_path = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->target_file_path(), output);
  }

  // optional int64 create_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->create_time(), output);
  }

  // optional int64 completion_time = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->completion_time(), output);
  }

  // optional uint32 attempt_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->attempt_count(), output);
  }

  // optional int32 traffic_annotation = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->traffic_annotation(), output);
  }

  // optional uint64 bytes_downloaded = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->bytes_downloaded(), output);
  }

  // optional int64 last_cleanup_check_time = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->last_cleanup_check_time(), output);
  }

  // optional uint32 cleanup_attempt_count = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cleanup_attempt_count(), output);
  }

  // optional uint32 resumption_count = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->resumption_count(), output);
  }

  // optional bool has_upload_data = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->has_upload_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:protodb.Entry)
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protodb.Entry)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string target_file_path = 6;
    if (has_target_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_file_path());
    }

    // optional .protodb.SchedulingParams scheduling_params = 3;
    if (has_scheduling_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scheduling_params_);
    }

    // optional .protodb.RequestParams request_params = 4;
    if (has_request_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_params_);
    }

    // optional .protodb.DownloadClient name_space = 1;
    if (has_name_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name_space());
    }

    // optional .protodb.Entry.State state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional int64 completion_time = 8;
    if (has_completion_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->completion_time());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional uint32 attempt_count = 9;
    if (has_attempt_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_count());
    }

    // optional int32 traffic_annotation = 10;
    if (has_traffic_annotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traffic_annotation());
    }

    // optional uint64 bytes_downloaded = 11;
    if (has_bytes_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_downloaded());
    }

    // optional int64 last_cleanup_check_time = 12;
    if (has_last_cleanup_check_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_cleanup_check_time());
    }

    // optional uint32 cleanup_attempt_count = 13;
    if (has_cleanup_attempt_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cleanup_attempt_count());
    }

    // optional uint32 resumption_count = 14;
    if (has_resumption_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resumption_count());
    }

    // optional bool has_upload_data = 15;
    if (has_has_upload_data()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Entry*>(&from));
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protodb.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_guid();
      guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_target_file_path();
      target_file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_file_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_scheduling_params()->::protodb::SchedulingParams::MergeFrom(from.scheduling_params());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_request_params()->::protodb::RequestParams::MergeFrom(from.request_params());
    }
    if (cached_has_bits & 0x00000010u) {
      name_space_ = from.name_space_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      create_time_ = from.create_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      completion_time_ = from.completion_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      attempt_count_ = from.attempt_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      traffic_annotation_ = from.traffic_annotation_;
    }
    if (cached_has_bits & 0x00000400u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    if (cached_has_bits & 0x00000800u) {
      last_cleanup_check_time_ = from.last_cleanup_check_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      cleanup_attempt_count_ = from.cleanup_attempt_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      resumption_count_ = from.resumption_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      has_upload_data_ = from.has_upload_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protodb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  guid_.Swap(&other->guid_);
  target_file_path_.Swap(&other->target_file_path_);
  std::swap(scheduling_params_, other->scheduling_params_);
  std::swap(request_params_, other->request_params_);
  std::swap(name_space_, other->name_space_);
  std::swap(state_, other->state_);
  std::swap(create_time_, other->create_time_);
  std::swap(completion_time_, other->completion_time_);
  std::swap(attempt_count_, other->attempt_count_);
  std::swap(traffic_annotation_, other->traffic_annotation_);
  std::swap(bytes_downloaded_, other->bytes_downloaded_);
  std::swap(last_cleanup_check_time_, other->last_cleanup_check_time_);
  std::swap(cleanup_attempt_count_, other->cleanup_attempt_count_);
  std::swap(resumption_count_, other->resumption_count_);
  std::swap(has_upload_data_, other->has_upload_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Entry::GetTypeName() const {
  return "protodb.Entry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entry

// optional .protodb.DownloadClient name_space = 1;
bool Entry::has_name_space() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Entry::set_has_name_space() {
  _has_bits_[0] |= 0x00000010u;
}
void Entry::clear_has_name_space() {
  _has_bits_[0] &= ~0x00000010u;
}
void Entry::clear_name_space() {
  name_space_ = 0;
  clear_has_name_space();
}
::protodb::DownloadClient Entry::name_space() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.name_space)
  return static_cast< ::protodb::DownloadClient >(name_space_);
}
void Entry::set_name_space(::protodb::DownloadClient value) {
  assert(::protodb::DownloadClient_IsValid(value));
  set_has_name_space();
  name_space_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.name_space)
}

// optional string guid = 2;
bool Entry::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entry::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void Entry::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entry::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guid();
}
const ::std::string& Entry::guid() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.guid)
  return guid_.GetNoArena();
}
void Entry::set_guid(const ::std::string& value) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protodb.Entry.guid)
}
#if LANG_CXX11
void Entry::set_guid(::std::string&& value) {
  set_has_guid();
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protodb.Entry.guid)
}
#endif
void Entry::set_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protodb.Entry.guid)
}
void Entry::set_guid(const char* value, size_t size) {
  set_has_guid();
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protodb.Entry.guid)
}
::std::string* Entry::mutable_guid() {
  set_has_guid();
  // @@protoc_insertion_point(field_mutable:protodb.Entry.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Entry::release_guid() {
  // @@protoc_insertion_point(field_release:protodb.Entry.guid)
  clear_has_guid();
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entry::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    set_has_guid();
  } else {
    clear_has_guid();
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:protodb.Entry.guid)
}

// optional .protodb.SchedulingParams scheduling_params = 3;
bool Entry::has_scheduling_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Entry::set_has_scheduling_params() {
  _has_bits_[0] |= 0x00000004u;
}
void Entry::clear_has_scheduling_params() {
  _has_bits_[0] &= ~0x00000004u;
}
void Entry::clear_scheduling_params() {
  if (scheduling_params_ != NULL) scheduling_params_->::protodb::SchedulingParams::Clear();
  clear_has_scheduling_params();
}
const ::protodb::SchedulingParams& Entry::scheduling_params() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.scheduling_params)
  return scheduling_params_ != NULL ? *scheduling_params_
                         : *::protodb::SchedulingParams::internal_default_instance();
}
::protodb::SchedulingParams* Entry::mutable_scheduling_params() {
  set_has_scheduling_params();
  if (scheduling_params_ == NULL) {
    scheduling_params_ = new ::protodb::SchedulingParams;
  }
  // @@protoc_insertion_point(field_mutable:protodb.Entry.scheduling_params)
  return scheduling_params_;
}
::protodb::SchedulingParams* Entry::release_scheduling_params() {
  // @@protoc_insertion_point(field_release:protodb.Entry.scheduling_params)
  clear_has_scheduling_params();
  ::protodb::SchedulingParams* temp = scheduling_params_;
  scheduling_params_ = NULL;
  return temp;
}
void Entry::set_allocated_scheduling_params(::protodb::SchedulingParams* scheduling_params) {
  delete scheduling_params_;
  scheduling_params_ = scheduling_params;
  if (scheduling_params) {
    set_has_scheduling_params();
  } else {
    clear_has_scheduling_params();
  }
  // @@protoc_insertion_point(field_set_allocated:protodb.Entry.scheduling_params)
}

// optional .protodb.RequestParams request_params = 4;
bool Entry::has_request_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Entry::set_has_request_params() {
  _has_bits_[0] |= 0x00000008u;
}
void Entry::clear_has_request_params() {
  _has_bits_[0] &= ~0x00000008u;
}
void Entry::clear_request_params() {
  if (request_params_ != NULL) request_params_->::protodb::RequestParams::Clear();
  clear_has_request_params();
}
const ::protodb::RequestParams& Entry::request_params() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.request_params)
  return request_params_ != NULL ? *request_params_
                         : *::protodb::RequestParams::internal_default_instance();
}
::protodb::RequestParams* Entry::mutable_request_params() {
  set_has_request_params();
  if (request_params_ == NULL) {
    request_params_ = new ::protodb::RequestParams;
  }
  // @@protoc_insertion_point(field_mutable:protodb.Entry.request_params)
  return request_params_;
}
::protodb::RequestParams* Entry::release_request_params() {
  // @@protoc_insertion_point(field_release:protodb.Entry.request_params)
  clear_has_request_params();
  ::protodb::RequestParams* temp = request_params_;
  request_params_ = NULL;
  return temp;
}
void Entry::set_allocated_request_params(::protodb::RequestParams* request_params) {
  delete request_params_;
  request_params_ = request_params;
  if (request_params) {
    set_has_request_params();
  } else {
    clear_has_request_params();
  }
  // @@protoc_insertion_point(field_set_allocated:protodb.Entry.request_params)
}

// optional .protodb.Entry.State state = 5;
bool Entry::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Entry::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
void Entry::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void Entry::clear_state() {
  state_ = 0;
  clear_has_state();
}
::protodb::Entry_State Entry::state() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.state)
  return static_cast< ::protodb::Entry_State >(state_);
}
void Entry::set_state(::protodb::Entry_State value) {
  assert(::protodb::Entry_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.state)
}

// optional string target_file_path = 6;
bool Entry::has_target_file_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Entry::set_has_target_file_path() {
  _has_bits_[0] |= 0x00000002u;
}
void Entry::clear_has_target_file_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void Entry::clear_target_file_path() {
  target_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_file_path();
}
const ::std::string& Entry::target_file_path() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.target_file_path)
  return target_file_path_.GetNoArena();
}
void Entry::set_target_file_path(const ::std::string& value) {
  set_has_target_file_path();
  target_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protodb.Entry.target_file_path)
}
#if LANG_CXX11
void Entry::set_target_file_path(::std::string&& value) {
  set_has_target_file_path();
  target_file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protodb.Entry.target_file_path)
}
#endif
void Entry::set_target_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_file_path();
  target_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protodb.Entry.target_file_path)
}
void Entry::set_target_file_path(const char* value, size_t size) {
  set_has_target_file_path();
  target_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protodb.Entry.target_file_path)
}
::std::string* Entry::mutable_target_file_path() {
  set_has_target_file_path();
  // @@protoc_insertion_point(field_mutable:protodb.Entry.target_file_path)
  return target_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Entry::release_target_file_path() {
  // @@protoc_insertion_point(field_release:protodb.Entry.target_file_path)
  clear_has_target_file_path();
  return target_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Entry::set_allocated_target_file_path(::std::string* target_file_path) {
  if (target_file_path != NULL) {
    set_has_target_file_path();
  } else {
    clear_has_target_file_path();
  }
  target_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_file_path);
  // @@protoc_insertion_point(field_set_allocated:protodb.Entry.target_file_path)
}

// optional int64 create_time = 7;
bool Entry::has_create_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Entry::set_has_create_time() {
  _has_bits_[0] |= 0x00000040u;
}
void Entry::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void Entry::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
  clear_has_create_time();
}
::google::protobuf::int64 Entry::create_time() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.create_time)
  return create_time_;
}
void Entry::set_create_time(::google::protobuf::int64 value) {
  set_has_create_time();
  create_time_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.create_time)
}

// optional int64 completion_time = 8;
bool Entry::has_completion_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Entry::set_has_completion_time() {
  _has_bits_[0] |= 0x00000080u;
}
void Entry::clear_has_completion_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void Entry::clear_completion_time() {
  completion_time_ = GOOGLE_LONGLONG(0);
  clear_has_completion_time();
}
::google::protobuf::int64 Entry::completion_time() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.completion_time)
  return completion_time_;
}
void Entry::set_completion_time(::google::protobuf::int64 value) {
  set_has_completion_time();
  completion_time_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.completion_time)
}

// optional uint32 attempt_count = 9;
bool Entry::has_attempt_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Entry::set_has_attempt_count() {
  _has_bits_[0] |= 0x00000100u;
}
void Entry::clear_has_attempt_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void Entry::clear_attempt_count() {
  attempt_count_ = 0u;
  clear_has_attempt_count();
}
::google::protobuf::uint32 Entry::attempt_count() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.attempt_count)
  return attempt_count_;
}
void Entry::set_attempt_count(::google::protobuf::uint32 value) {
  set_has_attempt_count();
  attempt_count_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.attempt_count)
}

// optional int32 traffic_annotation = 10;
bool Entry::has_traffic_annotation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Entry::set_has_traffic_annotation() {
  _has_bits_[0] |= 0x00000200u;
}
void Entry::clear_has_traffic_annotation() {
  _has_bits_[0] &= ~0x00000200u;
}
void Entry::clear_traffic_annotation() {
  traffic_annotation_ = 0;
  clear_has_traffic_annotation();
}
::google::protobuf::int32 Entry::traffic_annotation() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.traffic_annotation)
  return traffic_annotation_;
}
void Entry::set_traffic_annotation(::google::protobuf::int32 value) {
  set_has_traffic_annotation();
  traffic_annotation_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.traffic_annotation)
}

// optional uint64 bytes_downloaded = 11;
bool Entry::has_bytes_downloaded() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Entry::set_has_bytes_downloaded() {
  _has_bits_[0] |= 0x00000400u;
}
void Entry::clear_has_bytes_downloaded() {
  _has_bits_[0] &= ~0x00000400u;
}
void Entry::clear_bytes_downloaded() {
  bytes_downloaded_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_downloaded();
}
::google::protobuf::uint64 Entry::bytes_downloaded() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.bytes_downloaded)
  return bytes_downloaded_;
}
void Entry::set_bytes_downloaded(::google::protobuf::uint64 value) {
  set_has_bytes_downloaded();
  bytes_downloaded_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.bytes_downloaded)
}

// optional int64 last_cleanup_check_time = 12;
bool Entry::has_last_cleanup_check_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Entry::set_has_last_cleanup_check_time() {
  _has_bits_[0] |= 0x00000800u;
}
void Entry::clear_has_last_cleanup_check_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void Entry::clear_last_cleanup_check_time() {
  last_cleanup_check_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_cleanup_check_time();
}
::google::protobuf::int64 Entry::last_cleanup_check_time() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.last_cleanup_check_time)
  return last_cleanup_check_time_;
}
void Entry::set_last_cleanup_check_time(::google::protobuf::int64 value) {
  set_has_last_cleanup_check_time();
  last_cleanup_check_time_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.last_cleanup_check_time)
}

// optional uint32 cleanup_attempt_count = 13;
bool Entry::has_cleanup_attempt_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Entry::set_has_cleanup_attempt_count() {
  _has_bits_[0] |= 0x00001000u;
}
void Entry::clear_has_cleanup_attempt_count() {
  _has_bits_[0] &= ~0x00001000u;
}
void Entry::clear_cleanup_attempt_count() {
  cleanup_attempt_count_ = 0u;
  clear_has_cleanup_attempt_count();
}
::google::protobuf::uint32 Entry::cleanup_attempt_count() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.cleanup_attempt_count)
  return cleanup_attempt_count_;
}
void Entry::set_cleanup_attempt_count(::google::protobuf::uint32 value) {
  set_has_cleanup_attempt_count();
  cleanup_attempt_count_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.cleanup_attempt_count)
}

// optional uint32 resumption_count = 14;
bool Entry::has_resumption_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Entry::set_has_resumption_count() {
  _has_bits_[0] |= 0x00002000u;
}
void Entry::clear_has_resumption_count() {
  _has_bits_[0] &= ~0x00002000u;
}
void Entry::clear_resumption_count() {
  resumption_count_ = 0u;
  clear_has_resumption_count();
}
::google::protobuf::uint32 Entry::resumption_count() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.resumption_count)
  return resumption_count_;
}
void Entry::set_resumption_count(::google::protobuf::uint32 value) {
  set_has_resumption_count();
  resumption_count_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.resumption_count)
}

// optional bool has_upload_data = 15;
bool Entry::has_has_upload_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Entry::set_has_has_upload_data() {
  _has_bits_[0] |= 0x00004000u;
}
void Entry::clear_has_has_upload_data() {
  _has_bits_[0] &= ~0x00004000u;
}
void Entry::clear_has_upload_data() {
  has_upload_data_ = false;
  clear_has_has_upload_data();
}
bool Entry::has_upload_data() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.has_upload_data)
  return has_upload_data_;
}
void Entry::set_has_upload_data(bool value) {
  set_has_has_upload_data();
  has_upload_data_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.has_upload_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protodb

// @@protoc_insertion_point(global_scope)
