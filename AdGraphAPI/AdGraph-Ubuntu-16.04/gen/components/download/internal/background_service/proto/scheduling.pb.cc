// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduling.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scheduling.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace protodb {
class SchedulingParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SchedulingParams> {
} _SchedulingParams_default_instance_;

namespace protobuf_scheduling_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SchedulingParams_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SchedulingParams_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_scheduling_2eproto

bool SchedulingParams_NetworkRequirements_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SchedulingParams_NetworkRequirements SchedulingParams::NONE;
const SchedulingParams_NetworkRequirements SchedulingParams::OPTIMISTIC;
const SchedulingParams_NetworkRequirements SchedulingParams::UNMETERED;
const SchedulingParams_NetworkRequirements SchedulingParams::NetworkRequirements_MIN;
const SchedulingParams_NetworkRequirements SchedulingParams::NetworkRequirements_MAX;
const int SchedulingParams::NetworkRequirements_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SchedulingParams_BatteryRequirements_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SchedulingParams_BatteryRequirements SchedulingParams::BATTERY_INSENSITIVE;
const SchedulingParams_BatteryRequirements SchedulingParams::BATTERY_SENSITIVE;
const SchedulingParams_BatteryRequirements SchedulingParams::BATTERY_CHARGING;
const SchedulingParams_BatteryRequirements SchedulingParams::BatteryRequirements_MIN;
const SchedulingParams_BatteryRequirements SchedulingParams::BatteryRequirements_MAX;
const int SchedulingParams::BatteryRequirements_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SchedulingParams_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SchedulingParams_Priority SchedulingParams::LOW;
const SchedulingParams_Priority SchedulingParams::NORMAL;
const SchedulingParams_Priority SchedulingParams::HIGH;
const SchedulingParams_Priority SchedulingParams::UI;
const SchedulingParams_Priority SchedulingParams::Priority_MIN;
const SchedulingParams_Priority SchedulingParams::Priority_MAX;
const int SchedulingParams::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchedulingParams::kCancelTimeFieldNumber;
const int SchedulingParams::kPriorityFieldNumber;
const int SchedulingParams::kNetworkRequirementsFieldNumber;
const int SchedulingParams::kBatteryRequirementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchedulingParams::SchedulingParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_scheduling_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protodb.SchedulingParams)
}
SchedulingParams::SchedulingParams(const SchedulingParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cancel_time_, &from.cancel_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&battery_requirements_) -
    reinterpret_cast<char*>(&cancel_time_)) + sizeof(battery_requirements_));
  // @@protoc_insertion_point(copy_constructor:protodb.SchedulingParams)
}

void SchedulingParams::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cancel_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_requirements_) -
      reinterpret_cast<char*>(&cancel_time_)) + sizeof(battery_requirements_));
}

SchedulingParams::~SchedulingParams() {
  // @@protoc_insertion_point(destructor:protodb.SchedulingParams)
  SharedDtor();
}

void SchedulingParams::SharedDtor() {
}

void SchedulingParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SchedulingParams& SchedulingParams::default_instance() {
  protobuf_scheduling_2eproto::InitDefaults();
  return *internal_default_instance();
}

SchedulingParams* SchedulingParams::New(::google::protobuf::Arena* arena) const {
  SchedulingParams* n = new SchedulingParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SchedulingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:protodb.SchedulingParams)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&cancel_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&battery_requirements_) -
        reinterpret_cast<char*>(&cancel_time_)) + sizeof(battery_requirements_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SchedulingParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:protodb.SchedulingParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cancel_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cancel_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cancel_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.SchedulingParams.Priority priority = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::SchedulingParams_Priority_IsValid(value)) {
            set_priority(static_cast< ::protodb::SchedulingParams_Priority >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::SchedulingParams_NetworkRequirements_IsValid(value)) {
            set_network_requirements(static_cast< ::protodb::SchedulingParams_NetworkRequirements >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::SchedulingParams_BatteryRequirements_IsValid(value)) {
            set_battery_requirements(static_cast< ::protodb::SchedulingParams_BatteryRequirements >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protodb.SchedulingParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protodb.SchedulingParams)
  return false;
#undef DO_
}

void SchedulingParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protodb.SchedulingParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 cancel_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cancel_time(), output);
  }

  // optional .protodb.SchedulingParams.Priority priority = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->priority(), output);
  }

  // optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->network_requirements(), output);
  }

  // optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->battery_requirements(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:protodb.SchedulingParams)
}

size_t SchedulingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protodb.SchedulingParams)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 cancel_time = 2;
    if (has_cancel_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cancel_time());
    }

    // optional .protodb.SchedulingParams.Priority priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

    // optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
    if (has_network_requirements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_requirements());
    }

    // optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
    if (has_battery_requirements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battery_requirements());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SchedulingParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SchedulingParams*>(&from));
}

void SchedulingParams::MergeFrom(const SchedulingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protodb.SchedulingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      cancel_time_ = from.cancel_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_requirements_ = from.network_requirements_;
    }
    if (cached_has_bits & 0x00000008u) {
      battery_requirements_ = from.battery_requirements_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchedulingParams::CopyFrom(const SchedulingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protodb.SchedulingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulingParams::IsInitialized() const {
  return true;
}

void SchedulingParams::Swap(SchedulingParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchedulingParams::InternalSwap(SchedulingParams* other) {
  std::swap(cancel_time_, other->cancel_time_);
  std::swap(priority_, other->priority_);
  std::swap(network_requirements_, other->network_requirements_);
  std::swap(battery_requirements_, other->battery_requirements_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SchedulingParams::GetTypeName() const {
  return "protodb.SchedulingParams";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SchedulingParams

// optional int64 cancel_time = 2;
bool SchedulingParams::has_cancel_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SchedulingParams::set_has_cancel_time() {
  _has_bits_[0] |= 0x00000001u;
}
void SchedulingParams::clear_has_cancel_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void SchedulingParams::clear_cancel_time() {
  cancel_time_ = GOOGLE_LONGLONG(0);
  clear_has_cancel_time();
}
::google::protobuf::int64 SchedulingParams::cancel_time() const {
  // @@protoc_insertion_point(field_get:protodb.SchedulingParams.cancel_time)
  return cancel_time_;
}
void SchedulingParams::set_cancel_time(::google::protobuf::int64 value) {
  set_has_cancel_time();
  cancel_time_ = value;
  // @@protoc_insertion_point(field_set:protodb.SchedulingParams.cancel_time)
}

// optional .protodb.SchedulingParams.Priority priority = 3;
bool SchedulingParams::has_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SchedulingParams::set_has_priority() {
  _has_bits_[0] |= 0x00000002u;
}
void SchedulingParams::clear_has_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
void SchedulingParams::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
::protodb::SchedulingParams_Priority SchedulingParams::priority() const {
  // @@protoc_insertion_point(field_get:protodb.SchedulingParams.priority)
  return static_cast< ::protodb::SchedulingParams_Priority >(priority_);
}
void SchedulingParams::set_priority(::protodb::SchedulingParams_Priority value) {
  assert(::protodb::SchedulingParams_Priority_IsValid(value));
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:protodb.SchedulingParams.priority)
}

// optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
bool SchedulingParams::has_network_requirements() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SchedulingParams::set_has_network_requirements() {
  _has_bits_[0] |= 0x00000004u;
}
void SchedulingParams::clear_has_network_requirements() {
  _has_bits_[0] &= ~0x00000004u;
}
void SchedulingParams::clear_network_requirements() {
  network_requirements_ = 0;
  clear_has_network_requirements();
}
::protodb::SchedulingParams_NetworkRequirements SchedulingParams::network_requirements() const {
  // @@protoc_insertion_point(field_get:protodb.SchedulingParams.network_requirements)
  return static_cast< ::protodb::SchedulingParams_NetworkRequirements >(network_requirements_);
}
void SchedulingParams::set_network_requirements(::protodb::SchedulingParams_NetworkRequirements value) {
  assert(::protodb::SchedulingParams_NetworkRequirements_IsValid(value));
  set_has_network_requirements();
  network_requirements_ = value;
  // @@protoc_insertion_point(field_set:protodb.SchedulingParams.network_requirements)
}

// optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
bool SchedulingParams::has_battery_requirements() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SchedulingParams::set_has_battery_requirements() {
  _has_bits_[0] |= 0x00000008u;
}
void SchedulingParams::clear_has_battery_requirements() {
  _has_bits_[0] &= ~0x00000008u;
}
void SchedulingParams::clear_battery_requirements() {
  battery_requirements_ = 0;
  clear_has_battery_requirements();
}
::protodb::SchedulingParams_BatteryRequirements SchedulingParams::battery_requirements() const {
  // @@protoc_insertion_point(field_get:protodb.SchedulingParams.battery_requirements)
  return static_cast< ::protodb::SchedulingParams_BatteryRequirements >(battery_requirements_);
}
void SchedulingParams::set_battery_requirements(::protodb::SchedulingParams_BatteryRequirements value) {
  assert(::protodb::SchedulingParams_BatteryRequirements_IsValid(value));
  set_has_battery_requirements();
  battery_requirements_ = value;
  // @@protoc_insertion_point(field_set:protodb.SchedulingParams.battery_requirements)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protodb

// @@protoc_insertion_point(global_scope)
