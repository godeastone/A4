// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_channel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cast_channel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cast_channel {
class CastMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CastMessage> {
} _CastMessage_default_instance_;
class AuthChallengeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthChallenge> {
} _AuthChallenge_default_instance_;
class AuthResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthResponse> {
} _AuthResponse_default_instance_;
class AuthErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthError> {
} _AuthError_default_instance_;
class DeviceAuthMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DeviceAuthMessage> {
} _DeviceAuthMessage_default_instance_;

namespace protobuf_cast_5fchannel_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CastMessage_default_instance_.Shutdown();
  _AuthChallenge_default_instance_.Shutdown();
  _AuthResponse_default_instance_.Shutdown();
  _AuthError_default_instance_.Shutdown();
  _DeviceAuthMessage_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CastMessage_default_instance_.DefaultConstruct();
  _AuthChallenge_default_instance_.DefaultConstruct();
  _AuthResponse_default_instance_.DefaultConstruct();
  _AuthError_default_instance_.DefaultConstruct();
  _DeviceAuthMessage_default_instance_.DefaultConstruct();
  _DeviceAuthMessage_default_instance_.get_mutable()->challenge_ = const_cast< ::cast_channel::AuthChallenge*>(
      ::cast_channel::AuthChallenge::internal_default_instance());
  _DeviceAuthMessage_default_instance_.get_mutable()->response_ = const_cast< ::cast_channel::AuthResponse*>(
      ::cast_channel::AuthResponse::internal_default_instance());
  _DeviceAuthMessage_default_instance_.get_mutable()->error_ = const_cast< ::cast_channel::AuthError*>(
      ::cast_channel::AuthError::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_cast_5fchannel_2eproto

bool CastMessage_ProtocolVersion_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastMessage_ProtocolVersion CastMessage::CASTV2_1_0;
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MIN;
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MAX;
const int CastMessage::ProtocolVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastMessage_PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastMessage_PayloadType CastMessage::STRING;
const CastMessage_PayloadType CastMessage::BINARY;
const CastMessage_PayloadType CastMessage::PayloadType_MIN;
const CastMessage_PayloadType CastMessage::PayloadType_MAX;
const int CastMessage::PayloadType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AuthError_ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AuthError_ErrorType AuthError::INTERNAL_ERROR;
const AuthError_ErrorType AuthError::NO_TLS;
const AuthError_ErrorType AuthError::SIGNATURE_ALGORITHM_UNAVAILABLE;
const AuthError_ErrorType AuthError::ErrorType_MIN;
const AuthError_ErrorType AuthError::ErrorType_MAX;
const int AuthError::ErrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SignatureAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool HashAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastMessage::kProtocolVersionFieldNumber;
const int CastMessage::kSourceIdFieldNumber;
const int CastMessage::kDestinationIdFieldNumber;
const int CastMessage::kNamespaceFieldNumber;
const int CastMessage::kPayloadTypeFieldNumber;
const int CastMessage::kPayloadUtf8FieldNumber;
const int CastMessage::kPayloadBinaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastMessage::CastMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5fchannel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_channel.CastMessage)
}
CastMessage::CastMessage(const CastMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_id()) {
    source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  destination_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination_id()) {
    destination_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_id_);
  }
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_namespace_()) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  payload_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_utf8()) {
    payload_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_utf8_);
  }
  payload_binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_binary()) {
    payload_binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_binary_);
  }
  ::memcpy(&protocol_version_, &from.protocol_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&payload_type_) -
    reinterpret_cast<char*>(&protocol_version_)) + sizeof(payload_type_));
  // @@protoc_insertion_point(copy_constructor:cast_channel.CastMessage)
}

void CastMessage::SharedCtor() {
  _cached_size_ = 0;
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payload_type_) -
      reinterpret_cast<char*>(&protocol_version_)) + sizeof(payload_type_));
}

CastMessage::~CastMessage() {
  // @@protoc_insertion_point(destructor:cast_channel.CastMessage)
  SharedDtor();
}

void CastMessage::SharedDtor() {
  source_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_utf8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastMessage& CastMessage::default_instance() {
  protobuf_cast_5fchannel_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastMessage* CastMessage::New(::google::protobuf::Arena* arena) const {
  CastMessage* n = new CastMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_channel.CastMessage)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_source_id()) {
      GOOGLE_DCHECK(!source_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_destination_id()) {
      GOOGLE_DCHECK(!destination_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*destination_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_namespace_()) {
      GOOGLE_DCHECK(!namespace__.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*namespace__.UnsafeRawStringPointer())->clear();
    }
    if (has_payload_utf8()) {
      GOOGLE_DCHECK(!payload_utf8_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*payload_utf8_.UnsafeRawStringPointer())->clear();
    }
    if (has_payload_binary()) {
      GOOGLE_DCHECK(!payload_binary_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*payload_binary_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 96u) {
    ::memset(&protocol_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&payload_type_) -
        reinterpret_cast<char*>(&protocol_version_)) + sizeof(payload_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_channel.CastMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cast_channel::CastMessage_ProtocolVersion_IsValid(value)) {
            set_protocol_version(static_cast< ::cast_channel::CastMessage_ProtocolVersion >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string destination_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string namespace = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .cast_channel.CastMessage.PayloadType payload_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cast_channel::CastMessage_PayloadType_IsValid(value)) {
            set_payload_type(static_cast< ::cast_channel::CastMessage_PayloadType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string payload_utf8 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload_utf8()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_binary = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_binary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_channel.CastMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_channel.CastMessage)
  return false;
#undef DO_
}

void CastMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_channel.CastMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocol_version(), output);
  }

  // required string source_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_id(), output);
  }

  // required string destination_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->destination_id(), output);
  }

  // required string namespace = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->namespace_(), output);
  }

  // required .cast_channel.CastMessage.PayloadType payload_type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->payload_type(), output);
  }

  // optional string payload_utf8 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->payload_utf8(), output);
  }

  // optional bytes payload_binary = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->payload_binary(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_channel.CastMessage)
}

size_t CastMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cast_channel.CastMessage)
  size_t total_size = 0;

  if (has_source_id()) {
    // required string source_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_id());
  }

  if (has_destination_id()) {
    // required string destination_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_id());
  }

  if (has_namespace_()) {
    // required string namespace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  if (has_protocol_version()) {
    // required .cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_version());
  }

  if (has_payload_type()) {
    // required .cast_channel.CastMessage.PayloadType payload_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->payload_type());
  }

  return total_size;
}
size_t CastMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast_channel.CastMessage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000067) ^ 0x00000067) == 0) {  // All required fields are present.
    // required string source_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_id());

    // required string destination_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_id());

    // required string namespace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());

    // required .cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_version());

    // required .cast_channel.CastMessage.PayloadType payload_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->payload_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional string payload_utf8 = 6;
    if (has_payload_utf8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload_utf8());
    }

    // optional bytes payload_binary = 7;
    if (has_payload_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_binary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastMessage*>(&from));
}

void CastMessage::MergeFrom(const CastMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_channel.CastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_id();
      source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_destination_id();
      destination_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_namespace_();
      namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_payload_utf8();
      payload_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_utf8_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_payload_binary();
      payload_binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_binary_);
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      payload_type_ = from.payload_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastMessage::CopyFrom(const CastMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_channel.CastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;
  return true;
}

void CastMessage::Swap(CastMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastMessage::InternalSwap(CastMessage* other) {
  source_id_.Swap(&other->source_id_);
  destination_id_.Swap(&other->destination_id_);
  namespace__.Swap(&other->namespace__);
  payload_utf8_.Swap(&other->payload_utf8_);
  payload_binary_.Swap(&other->payload_binary_);
  std::swap(protocol_version_, other->protocol_version_);
  std::swap(payload_type_, other->payload_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CastMessage::GetTypeName() const {
  return "cast_channel.CastMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastMessage

// required .cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
bool CastMessage::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastMessage::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000020u;
}
void CastMessage::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastMessage::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
::cast_channel::CastMessage_ProtocolVersion CastMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:cast_channel.CastMessage.protocol_version)
  return static_cast< ::cast_channel::CastMessage_ProtocolVersion >(protocol_version_);
}
void CastMessage::set_protocol_version(::cast_channel::CastMessage_ProtocolVersion value) {
  assert(::cast_channel::CastMessage_ProtocolVersion_IsValid(value));
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:cast_channel.CastMessage.protocol_version)
}

// required string source_id = 2;
bool CastMessage::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastMessage::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CastMessage::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastMessage::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_id();
}
const ::std::string& CastMessage::source_id() const {
  // @@protoc_insertion_point(field_get:cast_channel.CastMessage.source_id)
  return source_id_.GetNoArena();
}
void CastMessage::set_source_id(const ::std::string& value) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.CastMessage.source_id)
}
#if LANG_CXX11
void CastMessage::set_source_id(::std::string&& value) {
  set_has_source_id();
  source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.CastMessage.source_id)
}
#endif
void CastMessage::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.CastMessage.source_id)
}
void CastMessage::set_source_id(const char* value, size_t size) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.CastMessage.source_id)
}
::std::string* CastMessage::mutable_source_id() {
  set_has_source_id();
  // @@protoc_insertion_point(field_mutable:cast_channel.CastMessage.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_source_id() {
  // @@protoc_insertion_point(field_release:cast_channel.CastMessage.source_id)
  clear_has_source_id();
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    set_has_source_id();
  } else {
    clear_has_source_id();
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.CastMessage.source_id)
}

// required string destination_id = 3;
bool CastMessage::has_destination_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastMessage::set_has_destination_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CastMessage::clear_has_destination_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastMessage::clear_destination_id() {
  destination_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_id();
}
const ::std::string& CastMessage::destination_id() const {
  // @@protoc_insertion_point(field_get:cast_channel.CastMessage.destination_id)
  return destination_id_.GetNoArena();
}
void CastMessage::set_destination_id(const ::std::string& value) {
  set_has_destination_id();
  destination_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.CastMessage.destination_id)
}
#if LANG_CXX11
void CastMessage::set_destination_id(::std::string&& value) {
  set_has_destination_id();
  destination_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.CastMessage.destination_id)
}
#endif
void CastMessage::set_destination_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_destination_id();
  destination_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.CastMessage.destination_id)
}
void CastMessage::set_destination_id(const char* value, size_t size) {
  set_has_destination_id();
  destination_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.CastMessage.destination_id)
}
::std::string* CastMessage::mutable_destination_id() {
  set_has_destination_id();
  // @@protoc_insertion_point(field_mutable:cast_channel.CastMessage.destination_id)
  return destination_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_destination_id() {
  // @@protoc_insertion_point(field_release:cast_channel.CastMessage.destination_id)
  clear_has_destination_id();
  return destination_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_destination_id(::std::string* destination_id) {
  if (destination_id != NULL) {
    set_has_destination_id();
  } else {
    clear_has_destination_id();
  }
  destination_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_id);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.CastMessage.destination_id)
}

// required string namespace = 4;
bool CastMessage::has_namespace_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastMessage::set_has_namespace_() {
  _has_bits_[0] |= 0x00000004u;
}
void CastMessage::clear_has_namespace_() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastMessage::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_namespace_();
}
const ::std::string& CastMessage::namespace_() const {
  // @@protoc_insertion_point(field_get:cast_channel.CastMessage.namespace)
  return namespace__.GetNoArena();
}
void CastMessage::set_namespace_(const ::std::string& value) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.CastMessage.namespace)
}
#if LANG_CXX11
void CastMessage::set_namespace_(::std::string&& value) {
  set_has_namespace_();
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.CastMessage.namespace)
}
#endif
void CastMessage::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.CastMessage.namespace)
}
void CastMessage::set_namespace_(const char* value, size_t size) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.CastMessage.namespace)
}
::std::string* CastMessage::mutable_namespace_() {
  set_has_namespace_();
  // @@protoc_insertion_point(field_mutable:cast_channel.CastMessage.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_namespace_() {
  // @@protoc_insertion_point(field_release:cast_channel.CastMessage.namespace)
  clear_has_namespace_();
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    set_has_namespace_();
  } else {
    clear_has_namespace_();
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.CastMessage.namespace)
}

// required .cast_channel.CastMessage.PayloadType payload_type = 5;
bool CastMessage::has_payload_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CastMessage::set_has_payload_type() {
  _has_bits_[0] |= 0x00000040u;
}
void CastMessage::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void CastMessage::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
::cast_channel::CastMessage_PayloadType CastMessage::payload_type() const {
  // @@protoc_insertion_point(field_get:cast_channel.CastMessage.payload_type)
  return static_cast< ::cast_channel::CastMessage_PayloadType >(payload_type_);
}
void CastMessage::set_payload_type(::cast_channel::CastMessage_PayloadType value) {
  assert(::cast_channel::CastMessage_PayloadType_IsValid(value));
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:cast_channel.CastMessage.payload_type)
}

// optional string payload_utf8 = 6;
bool CastMessage::has_payload_utf8() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastMessage::set_has_payload_utf8() {
  _has_bits_[0] |= 0x00000008u;
}
void CastMessage::clear_has_payload_utf8() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastMessage::clear_payload_utf8() {
  payload_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_utf8();
}
const ::std::string& CastMessage::payload_utf8() const {
  // @@protoc_insertion_point(field_get:cast_channel.CastMessage.payload_utf8)
  return payload_utf8_.GetNoArena();
}
void CastMessage::set_payload_utf8(const ::std::string& value) {
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.CastMessage.payload_utf8)
}
#if LANG_CXX11
void CastMessage::set_payload_utf8(::std::string&& value) {
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.CastMessage.payload_utf8)
}
#endif
void CastMessage::set_payload_utf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.CastMessage.payload_utf8)
}
void CastMessage::set_payload_utf8(const char* value, size_t size) {
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.CastMessage.payload_utf8)
}
::std::string* CastMessage::mutable_payload_utf8() {
  set_has_payload_utf8();
  // @@protoc_insertion_point(field_mutable:cast_channel.CastMessage.payload_utf8)
  return payload_utf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_payload_utf8() {
  // @@protoc_insertion_point(field_release:cast_channel.CastMessage.payload_utf8)
  clear_has_payload_utf8();
  return payload_utf8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_payload_utf8(::std::string* payload_utf8) {
  if (payload_utf8 != NULL) {
    set_has_payload_utf8();
  } else {
    clear_has_payload_utf8();
  }
  payload_utf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_utf8);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.CastMessage.payload_utf8)
}

// optional bytes payload_binary = 7;
bool CastMessage::has_payload_binary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastMessage::set_has_payload_binary() {
  _has_bits_[0] |= 0x00000010u;
}
void CastMessage::clear_has_payload_binary() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastMessage::clear_payload_binary() {
  payload_binary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_binary();
}
const ::std::string& CastMessage::payload_binary() const {
  // @@protoc_insertion_point(field_get:cast_channel.CastMessage.payload_binary)
  return payload_binary_.GetNoArena();
}
void CastMessage::set_payload_binary(const ::std::string& value) {
  set_has_payload_binary();
  payload_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.CastMessage.payload_binary)
}
#if LANG_CXX11
void CastMessage::set_payload_binary(::std::string&& value) {
  set_has_payload_binary();
  payload_binary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.CastMessage.payload_binary)
}
#endif
void CastMessage::set_payload_binary(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_binary();
  payload_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.CastMessage.payload_binary)
}
void CastMessage::set_payload_binary(const void* value, size_t size) {
  set_has_payload_binary();
  payload_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.CastMessage.payload_binary)
}
::std::string* CastMessage::mutable_payload_binary() {
  set_has_payload_binary();
  // @@protoc_insertion_point(field_mutable:cast_channel.CastMessage.payload_binary)
  return payload_binary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastMessage::release_payload_binary() {
  // @@protoc_insertion_point(field_release:cast_channel.CastMessage.payload_binary)
  clear_has_payload_binary();
  return payload_binary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastMessage::set_allocated_payload_binary(::std::string* payload_binary) {
  if (payload_binary != NULL) {
    set_has_payload_binary();
  } else {
    clear_has_payload_binary();
  }
  payload_binary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_binary);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.CastMessage.payload_binary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthChallenge::kSignatureAlgorithmFieldNumber;
const int AuthChallenge::kSenderNonceFieldNumber;
const int AuthChallenge::kHashAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthChallenge::AuthChallenge()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5fchannel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_channel.AuthChallenge)
}
AuthChallenge::AuthChallenge(const AuthChallenge& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_nonce()) {
    sender_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_nonce_);
  }
  ::memcpy(&hash_algorithm_, &from.hash_algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&signature_algorithm_) -
    reinterpret_cast<char*>(&hash_algorithm_)) + sizeof(signature_algorithm_));
  // @@protoc_insertion_point(copy_constructor:cast_channel.AuthChallenge)
}

void AuthChallenge::SharedCtor() {
  _cached_size_ = 0;
  sender_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_algorithm_ = 0;
  signature_algorithm_ = 1;
}

AuthChallenge::~AuthChallenge() {
  // @@protoc_insertion_point(destructor:cast_channel.AuthChallenge)
  SharedDtor();
}

void AuthChallenge::SharedDtor() {
  sender_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthChallenge& AuthChallenge::default_instance() {
  protobuf_cast_5fchannel_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthChallenge* AuthChallenge::New(::google::protobuf::Arena* arena) const {
  AuthChallenge* n = new AuthChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_channel.AuthChallenge)
  if (has_sender_nonce()) {
    GOOGLE_DCHECK(!sender_nonce_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sender_nonce_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    hash_algorithm_ = 0;
    signature_algorithm_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_channel.AuthChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cast_channel::SignatureAlgorithm_IsValid(value)) {
            set_signature_algorithm(static_cast< ::cast_channel::SignatureAlgorithm >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sender_nonce = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cast_channel.HashAlgorithm hash_algorithm = 3 [default = SHA1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cast_channel::HashAlgorithm_IsValid(value)) {
            set_hash_algorithm(static_cast< ::cast_channel::HashAlgorithm >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_channel.AuthChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_channel.AuthChallenge)
  return false;
#undef DO_
}

void AuthChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_channel.AuthChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->signature_algorithm(), output);
  }

  // optional bytes sender_nonce = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sender_nonce(), output);
  }

  // optional .cast_channel.HashAlgorithm hash_algorithm = 3 [default = SHA1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->hash_algorithm(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_channel.AuthChallenge)
}

size_t AuthChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast_channel.AuthChallenge)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes sender_nonce = 2;
    if (has_sender_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sender_nonce());
    }

    // optional .cast_channel.HashAlgorithm hash_algorithm = 3 [default = SHA1];
    if (has_hash_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hash_algorithm());
    }

    // optional .cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
    if (has_signature_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signature_algorithm());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthChallenge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthChallenge*>(&from));
}

void AuthChallenge::MergeFrom(const AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_channel.AuthChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sender_nonce();
      sender_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_nonce_);
    }
    if (cached_has_bits & 0x00000002u) {
      hash_algorithm_ = from.hash_algorithm_;
    }
    if (cached_has_bits & 0x00000004u) {
      signature_algorithm_ = from.signature_algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthChallenge::CopyFrom(const AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_channel.AuthChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthChallenge::IsInitialized() const {
  return true;
}

void AuthChallenge::Swap(AuthChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthChallenge::InternalSwap(AuthChallenge* other) {
  sender_nonce_.Swap(&other->sender_nonce_);
  std::swap(hash_algorithm_, other->hash_algorithm_);
  std::swap(signature_algorithm_, other->signature_algorithm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthChallenge::GetTypeName() const {
  return "cast_channel.AuthChallenge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthChallenge

// optional .cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
bool AuthChallenge::has_signature_algorithm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AuthChallenge::set_has_signature_algorithm() {
  _has_bits_[0] |= 0x00000004u;
}
void AuthChallenge::clear_has_signature_algorithm() {
  _has_bits_[0] &= ~0x00000004u;
}
void AuthChallenge::clear_signature_algorithm() {
  signature_algorithm_ = 1;
  clear_has_signature_algorithm();
}
::cast_channel::SignatureAlgorithm AuthChallenge::signature_algorithm() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthChallenge.signature_algorithm)
  return static_cast< ::cast_channel::SignatureAlgorithm >(signature_algorithm_);
}
void AuthChallenge::set_signature_algorithm(::cast_channel::SignatureAlgorithm value) {
  assert(::cast_channel::SignatureAlgorithm_IsValid(value));
  set_has_signature_algorithm();
  signature_algorithm_ = value;
  // @@protoc_insertion_point(field_set:cast_channel.AuthChallenge.signature_algorithm)
}

// optional bytes sender_nonce = 2;
bool AuthChallenge::has_sender_nonce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthChallenge::set_has_sender_nonce() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthChallenge::clear_has_sender_nonce() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthChallenge::clear_sender_nonce() {
  sender_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_nonce();
}
const ::std::string& AuthChallenge::sender_nonce() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthChallenge.sender_nonce)
  return sender_nonce_.GetNoArena();
}
void AuthChallenge::set_sender_nonce(const ::std::string& value) {
  set_has_sender_nonce();
  sender_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.AuthChallenge.sender_nonce)
}
#if LANG_CXX11
void AuthChallenge::set_sender_nonce(::std::string&& value) {
  set_has_sender_nonce();
  sender_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.AuthChallenge.sender_nonce)
}
#endif
void AuthChallenge::set_sender_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_nonce();
  sender_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.AuthChallenge.sender_nonce)
}
void AuthChallenge::set_sender_nonce(const void* value, size_t size) {
  set_has_sender_nonce();
  sender_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.AuthChallenge.sender_nonce)
}
::std::string* AuthChallenge::mutable_sender_nonce() {
  set_has_sender_nonce();
  // @@protoc_insertion_point(field_mutable:cast_channel.AuthChallenge.sender_nonce)
  return sender_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthChallenge::release_sender_nonce() {
  // @@protoc_insertion_point(field_release:cast_channel.AuthChallenge.sender_nonce)
  clear_has_sender_nonce();
  return sender_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthChallenge::set_allocated_sender_nonce(::std::string* sender_nonce) {
  if (sender_nonce != NULL) {
    set_has_sender_nonce();
  } else {
    clear_has_sender_nonce();
  }
  sender_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_nonce);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.AuthChallenge.sender_nonce)
}

// optional .cast_channel.HashAlgorithm hash_algorithm = 3 [default = SHA1];
bool AuthChallenge::has_hash_algorithm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AuthChallenge::set_has_hash_algorithm() {
  _has_bits_[0] |= 0x00000002u;
}
void AuthChallenge::clear_has_hash_algorithm() {
  _has_bits_[0] &= ~0x00000002u;
}
void AuthChallenge::clear_hash_algorithm() {
  hash_algorithm_ = 0;
  clear_has_hash_algorithm();
}
::cast_channel::HashAlgorithm AuthChallenge::hash_algorithm() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthChallenge.hash_algorithm)
  return static_cast< ::cast_channel::HashAlgorithm >(hash_algorithm_);
}
void AuthChallenge::set_hash_algorithm(::cast_channel::HashAlgorithm value) {
  assert(::cast_channel::HashAlgorithm_IsValid(value));
  set_has_hash_algorithm();
  hash_algorithm_ = value;
  // @@protoc_insertion_point(field_set:cast_channel.AuthChallenge.hash_algorithm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthResponse::kSignatureFieldNumber;
const int AuthResponse::kClientAuthCertificateFieldNumber;
const int AuthResponse::kIntermediateCertificateFieldNumber;
const int AuthResponse::kSignatureAlgorithmFieldNumber;
const int AuthResponse::kSenderNonceFieldNumber;
const int AuthResponse::kHashAlgorithmFieldNumber;
const int AuthResponse::kCrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthResponse::AuthResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5fchannel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_channel.AuthResponse)
}
AuthResponse::AuthResponse(const AuthResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      intermediate_certificate_(from.intermediate_certificate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  client_auth_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_auth_certificate()) {
    client_auth_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_auth_certificate_);
  }
  sender_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_nonce()) {
    sender_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_nonce_);
  }
  crl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_crl()) {
    crl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crl_);
  }
  ::memcpy(&hash_algorithm_, &from.hash_algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&signature_algorithm_) -
    reinterpret_cast<char*>(&hash_algorithm_)) + sizeof(signature_algorithm_));
  // @@protoc_insertion_point(copy_constructor:cast_channel.AuthResponse)
}

void AuthResponse::SharedCtor() {
  _cached_size_ = 0;
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_auth_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_algorithm_ = 0;
  signature_algorithm_ = 1;
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:cast_channel.AuthResponse)
  SharedDtor();
}

void AuthResponse::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_auth_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthResponse& AuthResponse::default_instance() {
  protobuf_cast_5fchannel_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthResponse* AuthResponse::New(::google::protobuf::Arena* arena) const {
  AuthResponse* n = new AuthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_channel.AuthResponse)
  intermediate_certificate_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_signature()) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_client_auth_certificate()) {
      GOOGLE_DCHECK(!client_auth_certificate_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_auth_certificate_.UnsafeRawStringPointer())->clear();
    }
    if (has_sender_nonce()) {
      GOOGLE_DCHECK(!sender_nonce_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sender_nonce_.UnsafeRawStringPointer())->clear();
    }
    if (has_crl()) {
      GOOGLE_DCHECK(!crl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*crl_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    hash_algorithm_ = 0;
    signature_algorithm_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_channel.AuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes client_auth_certificate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_auth_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes intermediate_certificate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_intermediate_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cast_channel::SignatureAlgorithm_IsValid(value)) {
            set_signature_algorithm(static_cast< ::cast_channel::SignatureAlgorithm >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sender_nonce = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_nonce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cast_channel.HashAlgorithm hash_algorithm = 6 [default = SHA1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cast_channel::HashAlgorithm_IsValid(value)) {
            set_hash_algorithm(static_cast< ::cast_channel::HashAlgorithm >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes crl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_channel.AuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_channel.AuthResponse)
  return false;
#undef DO_
}

void AuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_channel.AuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // required bytes client_auth_certificate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->client_auth_certificate(), output);
  }

  // repeated bytes intermediate_certificate = 3;
  for (int i = 0, n = this->intermediate_certificate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->intermediate_certificate(i), output);
  }

  // optional .cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->signature_algorithm(), output);
  }

  // optional bytes sender_nonce = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sender_nonce(), output);
  }

  // optional .cast_channel.HashAlgorithm hash_algorithm = 6 [default = SHA1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->hash_algorithm(), output);
  }

  // optional bytes crl = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->crl(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_channel.AuthResponse)
}

size_t AuthResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cast_channel.AuthResponse)
  size_t total_size = 0;

  if (has_signature()) {
    // required bytes signature = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  if (has_client_auth_certificate()) {
    // required bytes client_auth_certificate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_auth_certificate());
  }

  return total_size;
}
size_t AuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast_channel.AuthResponse)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes signature = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());

    // required bytes client_auth_certificate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_auth_certificate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated bytes intermediate_certificate = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->intermediate_certificate_size());
  for (int i = 0, n = this->intermediate_certificate_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->intermediate_certificate(i));
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional bytes sender_nonce = 5;
    if (has_sender_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sender_nonce());
    }

    // optional bytes crl = 7;
    if (has_crl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crl());
    }

    // optional .cast_channel.HashAlgorithm hash_algorithm = 6 [default = SHA1];
    if (has_hash_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hash_algorithm());
    }

    // optional .cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
    if (has_signature_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signature_algorithm());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthResponse*>(&from));
}

void AuthResponse::MergeFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_channel.AuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intermediate_certificate_.MergeFrom(from.intermediate_certificate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_client_auth_certificate();
      client_auth_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_auth_certificate_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sender_nonce();
      sender_nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_nonce_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_crl();
      crl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crl_);
    }
    if (cached_has_bits & 0x00000010u) {
      hash_algorithm_ = from.hash_algorithm_;
    }
    if (cached_has_bits & 0x00000020u) {
      signature_algorithm_ = from.signature_algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_channel.AuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AuthResponse::Swap(AuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthResponse::InternalSwap(AuthResponse* other) {
  intermediate_certificate_.InternalSwap(&other->intermediate_certificate_);
  signature_.Swap(&other->signature_);
  client_auth_certificate_.Swap(&other->client_auth_certificate_);
  sender_nonce_.Swap(&other->sender_nonce_);
  crl_.Swap(&other->crl_);
  std::swap(hash_algorithm_, other->hash_algorithm_);
  std::swap(signature_algorithm_, other->signature_algorithm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthResponse::GetTypeName() const {
  return "cast_channel.AuthResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthResponse

// required bytes signature = 1;
bool AuthResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& AuthResponse::signature() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthResponse.signature)
  return signature_.GetNoArena();
}
void AuthResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.AuthResponse.signature)
}
#if LANG_CXX11
void AuthResponse::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.AuthResponse.signature)
}
#endif
void AuthResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.AuthResponse.signature)
}
void AuthResponse::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.AuthResponse.signature)
}
::std::string* AuthResponse::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:cast_channel.AuthResponse.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthResponse::release_signature() {
  // @@protoc_insertion_point(field_release:cast_channel.AuthResponse.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.AuthResponse.signature)
}

// required bytes client_auth_certificate = 2;
bool AuthResponse::has_client_auth_certificate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AuthResponse::set_has_client_auth_certificate() {
  _has_bits_[0] |= 0x00000002u;
}
void AuthResponse::clear_has_client_auth_certificate() {
  _has_bits_[0] &= ~0x00000002u;
}
void AuthResponse::clear_client_auth_certificate() {
  client_auth_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_auth_certificate();
}
const ::std::string& AuthResponse::client_auth_certificate() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthResponse.client_auth_certificate)
  return client_auth_certificate_.GetNoArena();
}
void AuthResponse::set_client_auth_certificate(const ::std::string& value) {
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.AuthResponse.client_auth_certificate)
}
#if LANG_CXX11
void AuthResponse::set_client_auth_certificate(::std::string&& value) {
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.AuthResponse.client_auth_certificate)
}
#endif
void AuthResponse::set_client_auth_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.AuthResponse.client_auth_certificate)
}
void AuthResponse::set_client_auth_certificate(const void* value, size_t size) {
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.AuthResponse.client_auth_certificate)
}
::std::string* AuthResponse::mutable_client_auth_certificate() {
  set_has_client_auth_certificate();
  // @@protoc_insertion_point(field_mutable:cast_channel.AuthResponse.client_auth_certificate)
  return client_auth_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthResponse::release_client_auth_certificate() {
  // @@protoc_insertion_point(field_release:cast_channel.AuthResponse.client_auth_certificate)
  clear_has_client_auth_certificate();
  return client_auth_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthResponse::set_allocated_client_auth_certificate(::std::string* client_auth_certificate) {
  if (client_auth_certificate != NULL) {
    set_has_client_auth_certificate();
  } else {
    clear_has_client_auth_certificate();
  }
  client_auth_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_auth_certificate);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.AuthResponse.client_auth_certificate)
}

// repeated bytes intermediate_certificate = 3;
int AuthResponse::intermediate_certificate_size() const {
  return intermediate_certificate_.size();
}
void AuthResponse::clear_intermediate_certificate() {
  intermediate_certificate_.Clear();
}
const ::std::string& AuthResponse::intermediate_certificate(int index) const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthResponse.intermediate_certificate)
  return intermediate_certificate_.Get(index);
}
::std::string* AuthResponse::mutable_intermediate_certificate(int index) {
  // @@protoc_insertion_point(field_mutable:cast_channel.AuthResponse.intermediate_certificate)
  return intermediate_certificate_.Mutable(index);
}
void AuthResponse::set_intermediate_certificate(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cast_channel.AuthResponse.intermediate_certificate)
  intermediate_certificate_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void AuthResponse::set_intermediate_certificate(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:cast_channel.AuthResponse.intermediate_certificate)
  intermediate_certificate_.Mutable(index)->assign(std::move(value));
}
#endif
void AuthResponse::set_intermediate_certificate(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  intermediate_certificate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cast_channel.AuthResponse.intermediate_certificate)
}
void AuthResponse::set_intermediate_certificate(int index, const void* value, size_t size) {
  intermediate_certificate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cast_channel.AuthResponse.intermediate_certificate)
}
::std::string* AuthResponse::add_intermediate_certificate() {
  // @@protoc_insertion_point(field_add_mutable:cast_channel.AuthResponse.intermediate_certificate)
  return intermediate_certificate_.Add();
}
void AuthResponse::add_intermediate_certificate(const ::std::string& value) {
  intermediate_certificate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cast_channel.AuthResponse.intermediate_certificate)
}
#if LANG_CXX11
void AuthResponse::add_intermediate_certificate(::std::string&& value) {
  intermediate_certificate_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cast_channel.AuthResponse.intermediate_certificate)
}
#endif
void AuthResponse::add_intermediate_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  intermediate_certificate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cast_channel.AuthResponse.intermediate_certificate)
}
void AuthResponse::add_intermediate_certificate(const void* value, size_t size) {
  intermediate_certificate_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cast_channel.AuthResponse.intermediate_certificate)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AuthResponse::intermediate_certificate() const {
  // @@protoc_insertion_point(field_list:cast_channel.AuthResponse.intermediate_certificate)
  return intermediate_certificate_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AuthResponse::mutable_intermediate_certificate() {
  // @@protoc_insertion_point(field_mutable_list:cast_channel.AuthResponse.intermediate_certificate)
  return &intermediate_certificate_;
}

// optional .cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
bool AuthResponse::has_signature_algorithm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AuthResponse::set_has_signature_algorithm() {
  _has_bits_[0] |= 0x00000020u;
}
void AuthResponse::clear_has_signature_algorithm() {
  _has_bits_[0] &= ~0x00000020u;
}
void AuthResponse::clear_signature_algorithm() {
  signature_algorithm_ = 1;
  clear_has_signature_algorithm();
}
::cast_channel::SignatureAlgorithm AuthResponse::signature_algorithm() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthResponse.signature_algorithm)
  return static_cast< ::cast_channel::SignatureAlgorithm >(signature_algorithm_);
}
void AuthResponse::set_signature_algorithm(::cast_channel::SignatureAlgorithm value) {
  assert(::cast_channel::SignatureAlgorithm_IsValid(value));
  set_has_signature_algorithm();
  signature_algorithm_ = value;
  // @@protoc_insertion_point(field_set:cast_channel.AuthResponse.signature_algorithm)
}

// optional bytes sender_nonce = 5;
bool AuthResponse::has_sender_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AuthResponse::set_has_sender_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
void AuthResponse::clear_has_sender_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
void AuthResponse::clear_sender_nonce() {
  sender_nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_nonce();
}
const ::std::string& AuthResponse::sender_nonce() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthResponse.sender_nonce)
  return sender_nonce_.GetNoArena();
}
void AuthResponse::set_sender_nonce(const ::std::string& value) {
  set_has_sender_nonce();
  sender_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.AuthResponse.sender_nonce)
}
#if LANG_CXX11
void AuthResponse::set_sender_nonce(::std::string&& value) {
  set_has_sender_nonce();
  sender_nonce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.AuthResponse.sender_nonce)
}
#endif
void AuthResponse::set_sender_nonce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_nonce();
  sender_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.AuthResponse.sender_nonce)
}
void AuthResponse::set_sender_nonce(const void* value, size_t size) {
  set_has_sender_nonce();
  sender_nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.AuthResponse.sender_nonce)
}
::std::string* AuthResponse::mutable_sender_nonce() {
  set_has_sender_nonce();
  // @@protoc_insertion_point(field_mutable:cast_channel.AuthResponse.sender_nonce)
  return sender_nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthResponse::release_sender_nonce() {
  // @@protoc_insertion_point(field_release:cast_channel.AuthResponse.sender_nonce)
  clear_has_sender_nonce();
  return sender_nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthResponse::set_allocated_sender_nonce(::std::string* sender_nonce) {
  if (sender_nonce != NULL) {
    set_has_sender_nonce();
  } else {
    clear_has_sender_nonce();
  }
  sender_nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_nonce);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.AuthResponse.sender_nonce)
}

// optional .cast_channel.HashAlgorithm hash_algorithm = 6 [default = SHA1];
bool AuthResponse::has_hash_algorithm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AuthResponse::set_has_hash_algorithm() {
  _has_bits_[0] |= 0x00000010u;
}
void AuthResponse::clear_has_hash_algorithm() {
  _has_bits_[0] &= ~0x00000010u;
}
void AuthResponse::clear_hash_algorithm() {
  hash_algorithm_ = 0;
  clear_has_hash_algorithm();
}
::cast_channel::HashAlgorithm AuthResponse::hash_algorithm() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthResponse.hash_algorithm)
  return static_cast< ::cast_channel::HashAlgorithm >(hash_algorithm_);
}
void AuthResponse::set_hash_algorithm(::cast_channel::HashAlgorithm value) {
  assert(::cast_channel::HashAlgorithm_IsValid(value));
  set_has_hash_algorithm();
  hash_algorithm_ = value;
  // @@protoc_insertion_point(field_set:cast_channel.AuthResponse.hash_algorithm)
}

// optional bytes crl = 7;
bool AuthResponse::has_crl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AuthResponse::set_has_crl() {
  _has_bits_[0] |= 0x00000008u;
}
void AuthResponse::clear_has_crl() {
  _has_bits_[0] &= ~0x00000008u;
}
void AuthResponse::clear_crl() {
  crl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_crl();
}
const ::std::string& AuthResponse::crl() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthResponse.crl)
  return crl_.GetNoArena();
}
void AuthResponse::set_crl(const ::std::string& value) {
  set_has_crl();
  crl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.AuthResponse.crl)
}
#if LANG_CXX11
void AuthResponse::set_crl(::std::string&& value) {
  set_has_crl();
  crl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.AuthResponse.crl)
}
#endif
void AuthResponse::set_crl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_crl();
  crl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.AuthResponse.crl)
}
void AuthResponse::set_crl(const void* value, size_t size) {
  set_has_crl();
  crl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.AuthResponse.crl)
}
::std::string* AuthResponse::mutable_crl() {
  set_has_crl();
  // @@protoc_insertion_point(field_mutable:cast_channel.AuthResponse.crl)
  return crl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthResponse::release_crl() {
  // @@protoc_insertion_point(field_release:cast_channel.AuthResponse.crl)
  clear_has_crl();
  return crl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthResponse::set_allocated_crl(::std::string* crl) {
  if (crl != NULL) {
    set_has_crl();
  } else {
    clear_has_crl();
  }
  crl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crl);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.AuthResponse.crl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthError::kErrorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthError::AuthError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5fchannel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_channel.AuthError)
}
AuthError::AuthError(const AuthError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_type_ = from.error_type_;
  // @@protoc_insertion_point(copy_constructor:cast_channel.AuthError)
}

void AuthError::SharedCtor() {
  _cached_size_ = 0;
  error_type_ = 0;
}

AuthError::~AuthError() {
  // @@protoc_insertion_point(destructor:cast_channel.AuthError)
  SharedDtor();
}

void AuthError::SharedDtor() {
}

void AuthError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthError& AuthError::default_instance() {
  protobuf_cast_5fchannel_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthError* AuthError::New(::google::protobuf::Arena* arena) const {
  AuthError* n = new AuthError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthError::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_channel.AuthError)
  error_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_channel.AuthError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cast_channel.AuthError.ErrorType error_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cast_channel::AuthError_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::cast_channel::AuthError_ErrorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_channel.AuthError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_channel.AuthError)
  return false;
#undef DO_
}

void AuthError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_channel.AuthError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cast_channel.AuthError.ErrorType error_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_channel.AuthError)
}

size_t AuthError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast_channel.AuthError)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required .cast_channel.AuthError.ErrorType error_type = 1;
  if (has_error_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthError*>(&from));
}

void AuthError::MergeFrom(const AuthError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_channel.AuthError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error_type()) {
    set_error_type(from.error_type());
  }
}

void AuthError::CopyFrom(const AuthError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_channel.AuthError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthError::Swap(AuthError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthError::InternalSwap(AuthError* other) {
  std::swap(error_type_, other->error_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthError::GetTypeName() const {
  return "cast_channel.AuthError";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthError

// required .cast_channel.AuthError.ErrorType error_type = 1;
bool AuthError::has_error_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthError::set_has_error_type() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthError::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthError::clear_error_type() {
  error_type_ = 0;
  clear_has_error_type();
}
::cast_channel::AuthError_ErrorType AuthError::error_type() const {
  // @@protoc_insertion_point(field_get:cast_channel.AuthError.error_type)
  return static_cast< ::cast_channel::AuthError_ErrorType >(error_type_);
}
void AuthError::set_error_type(::cast_channel::AuthError_ErrorType value) {
  assert(::cast_channel::AuthError_ErrorType_IsValid(value));
  set_has_error_type();
  error_type_ = value;
  // @@protoc_insertion_point(field_set:cast_channel.AuthError.error_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAuthMessage::kChallengeFieldNumber;
const int DeviceAuthMessage::kResponseFieldNumber;
const int DeviceAuthMessage::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAuthMessage::DeviceAuthMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5fchannel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_channel.DeviceAuthMessage)
}
DeviceAuthMessage::DeviceAuthMessage(const DeviceAuthMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_challenge()) {
    challenge_ = new ::cast_channel::AuthChallenge(*from.challenge_);
  } else {
    challenge_ = NULL;
  }
  if (from.has_response()) {
    response_ = new ::cast_channel::AuthResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::cast_channel::AuthError(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cast_channel.DeviceAuthMessage)
}

void DeviceAuthMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&challenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&challenge_)) + sizeof(error_));
}

DeviceAuthMessage::~DeviceAuthMessage() {
  // @@protoc_insertion_point(destructor:cast_channel.DeviceAuthMessage)
  SharedDtor();
}

void DeviceAuthMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete challenge_;
  }
  if (this != internal_default_instance()) {
    delete response_;
  }
  if (this != internal_default_instance()) {
    delete error_;
  }
}

void DeviceAuthMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAuthMessage& DeviceAuthMessage::default_instance() {
  protobuf_cast_5fchannel_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceAuthMessage* DeviceAuthMessage::New(::google::protobuf::Arena* arena) const {
  DeviceAuthMessage* n = new DeviceAuthMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceAuthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_channel.DeviceAuthMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_challenge()) {
      GOOGLE_DCHECK(challenge_ != NULL);
      challenge_->::cast_channel::AuthChallenge::Clear();
    }
    if (has_response()) {
      GOOGLE_DCHECK(response_ != NULL);
      response_->::cast_channel::AuthResponse::Clear();
    }
    if (has_error()) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->::cast_channel::AuthError::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceAuthMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_channel.DeviceAuthMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cast_channel.AuthChallenge challenge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cast_channel.AuthResponse response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cast_channel.AuthError error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_channel.DeviceAuthMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_channel.DeviceAuthMessage)
  return false;
#undef DO_
}

void DeviceAuthMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_channel.DeviceAuthMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cast_channel.AuthChallenge challenge = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->challenge_, output);
  }

  // optional .cast_channel.AuthResponse response = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->response_, output);
  }

  // optional .cast_channel.AuthError error = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->error_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_channel.DeviceAuthMessage)
}

size_t DeviceAuthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast_channel.DeviceAuthMessage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .cast_channel.AuthChallenge challenge = 1;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->challenge_);
    }

    // optional .cast_channel.AuthResponse response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_);
    }

    // optional .cast_channel.AuthError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAuthMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAuthMessage*>(&from));
}

void DeviceAuthMessage::MergeFrom(const DeviceAuthMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_channel.DeviceAuthMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_challenge()->::cast_channel::AuthChallenge::MergeFrom(from.challenge());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_response()->::cast_channel::AuthResponse::MergeFrom(from.response());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_error()->::cast_channel::AuthError::MergeFrom(from.error());
    }
  }
}

void DeviceAuthMessage::CopyFrom(const DeviceAuthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_channel.DeviceAuthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAuthMessage::IsInitialized() const {
  if (has_response()) {
    if (!this->response_->IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void DeviceAuthMessage::Swap(DeviceAuthMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceAuthMessage::InternalSwap(DeviceAuthMessage* other) {
  std::swap(challenge_, other->challenge_);
  std::swap(response_, other->response_);
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceAuthMessage::GetTypeName() const {
  return "cast_channel.DeviceAuthMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceAuthMessage

// optional .cast_channel.AuthChallenge challenge = 1;
bool DeviceAuthMessage::has_challenge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceAuthMessage::set_has_challenge() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceAuthMessage::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceAuthMessage::clear_challenge() {
  if (challenge_ != NULL) challenge_->::cast_channel::AuthChallenge::Clear();
  clear_has_challenge();
}
const ::cast_channel::AuthChallenge& DeviceAuthMessage::challenge() const {
  // @@protoc_insertion_point(field_get:cast_channel.DeviceAuthMessage.challenge)
  return challenge_ != NULL ? *challenge_
                         : *::cast_channel::AuthChallenge::internal_default_instance();
}
::cast_channel::AuthChallenge* DeviceAuthMessage::mutable_challenge() {
  set_has_challenge();
  if (challenge_ == NULL) {
    challenge_ = new ::cast_channel::AuthChallenge;
  }
  // @@protoc_insertion_point(field_mutable:cast_channel.DeviceAuthMessage.challenge)
  return challenge_;
}
::cast_channel::AuthChallenge* DeviceAuthMessage::release_challenge() {
  // @@protoc_insertion_point(field_release:cast_channel.DeviceAuthMessage.challenge)
  clear_has_challenge();
  ::cast_channel::AuthChallenge* temp = challenge_;
  challenge_ = NULL;
  return temp;
}
void DeviceAuthMessage::set_allocated_challenge(::cast_channel::AuthChallenge* challenge) {
  delete challenge_;
  challenge_ = challenge;
  if (challenge) {
    set_has_challenge();
  } else {
    clear_has_challenge();
  }
  // @@protoc_insertion_point(field_set_allocated:cast_channel.DeviceAuthMessage.challenge)
}

// optional .cast_channel.AuthResponse response = 2;
bool DeviceAuthMessage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceAuthMessage::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceAuthMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceAuthMessage::clear_response() {
  if (response_ != NULL) response_->::cast_channel::AuthResponse::Clear();
  clear_has_response();
}
const ::cast_channel::AuthResponse& DeviceAuthMessage::response() const {
  // @@protoc_insertion_point(field_get:cast_channel.DeviceAuthMessage.response)
  return response_ != NULL ? *response_
                         : *::cast_channel::AuthResponse::internal_default_instance();
}
::cast_channel::AuthResponse* DeviceAuthMessage::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::cast_channel::AuthResponse;
  }
  // @@protoc_insertion_point(field_mutable:cast_channel.DeviceAuthMessage.response)
  return response_;
}
::cast_channel::AuthResponse* DeviceAuthMessage::release_response() {
  // @@protoc_insertion_point(field_release:cast_channel.DeviceAuthMessage.response)
  clear_has_response();
  ::cast_channel::AuthResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void DeviceAuthMessage::set_allocated_response(::cast_channel::AuthResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:cast_channel.DeviceAuthMessage.response)
}

// optional .cast_channel.AuthError error = 3;
bool DeviceAuthMessage::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceAuthMessage::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceAuthMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceAuthMessage::clear_error() {
  if (error_ != NULL) error_->::cast_channel::AuthError::Clear();
  clear_has_error();
}
const ::cast_channel::AuthError& DeviceAuthMessage::error() const {
  // @@protoc_insertion_point(field_get:cast_channel.DeviceAuthMessage.error)
  return error_ != NULL ? *error_
                         : *::cast_channel::AuthError::internal_default_instance();
}
::cast_channel::AuthError* DeviceAuthMessage::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::cast_channel::AuthError;
  }
  // @@protoc_insertion_point(field_mutable:cast_channel.DeviceAuthMessage.error)
  return error_;
}
::cast_channel::AuthError* DeviceAuthMessage::release_error() {
  // @@protoc_insertion_point(field_release:cast_channel.DeviceAuthMessage.error)
  clear_has_error();
  ::cast_channel::AuthError* temp = error_;
  error_ = NULL;
  return temp;
}
void DeviceAuthMessage::set_allocated_error(::cast_channel::AuthError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:cast_channel.DeviceAuthMessage.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cast_channel

// @@protoc_insertion_point(global_scope)
