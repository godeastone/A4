// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authority_keys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "authority_keys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cast_channel {
namespace proto {
class AuthorityKeys_KeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthorityKeys_Key> {
} _AuthorityKeys_Key_default_instance_;
class AuthorityKeysDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthorityKeys> {
} _AuthorityKeys_default_instance_;

namespace protobuf_authority_5fkeys_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _AuthorityKeys_Key_default_instance_.Shutdown();
  _AuthorityKeys_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AuthorityKeys_Key_default_instance_.DefaultConstruct();
  _AuthorityKeys_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_authority_5fkeys_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthorityKeys_Key::kFingerprintFieldNumber;
const int AuthorityKeys_Key::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthorityKeys_Key::AuthorityKeys_Key()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_authority_5fkeys_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_channel.proto.AuthorityKeys.Key)
}
AuthorityKeys_Key::AuthorityKeys_Key(const AuthorityKeys_Key& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fingerprint()) {
    fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fingerprint_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:cast_channel.proto.AuthorityKeys.Key)
}

void AuthorityKeys_Key::SharedCtor() {
  _cached_size_ = 0;
  fingerprint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthorityKeys_Key::~AuthorityKeys_Key() {
  // @@protoc_insertion_point(destructor:cast_channel.proto.AuthorityKeys.Key)
  SharedDtor();
}

void AuthorityKeys_Key::SharedDtor() {
  fingerprint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthorityKeys_Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthorityKeys_Key& AuthorityKeys_Key::default_instance() {
  protobuf_authority_5fkeys_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthorityKeys_Key* AuthorityKeys_Key::New(::google::protobuf::Arena* arena) const {
  AuthorityKeys_Key* n = new AuthorityKeys_Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthorityKeys_Key::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_channel.proto.AuthorityKeys.Key)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fingerprint()) {
      GOOGLE_DCHECK(!fingerprint_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fingerprint_.UnsafeRawStringPointer())->clear();
    }
    if (has_public_key()) {
      GOOGLE_DCHECK(!public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_key_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthorityKeys_Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_channel.proto.AuthorityKeys.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fingerprint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes public_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_channel.proto.AuthorityKeys.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_channel.proto.AuthorityKeys.Key)
  return false;
#undef DO_
}

void AuthorityKeys_Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_channel.proto.AuthorityKeys.Key)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes fingerprint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fingerprint(), output);
  }

  // required bytes public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_channel.proto.AuthorityKeys.Key)
}

size_t AuthorityKeys_Key::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cast_channel.proto.AuthorityKeys.Key)
  size_t total_size = 0;

  if (has_fingerprint()) {
    // required bytes fingerprint = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fingerprint());
  }

  if (has_public_key()) {
    // required bytes public_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  return total_size;
}
size_t AuthorityKeys_Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast_channel.proto.AuthorityKeys.Key)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes fingerprint = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fingerprint());

    // required bytes public_key = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorityKeys_Key::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthorityKeys_Key*>(&from));
}

void AuthorityKeys_Key::MergeFrom(const AuthorityKeys_Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_channel.proto.AuthorityKeys.Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fingerprint();
      fingerprint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fingerprint_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
  }
}

void AuthorityKeys_Key::CopyFrom(const AuthorityKeys_Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_channel.proto.AuthorityKeys.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorityKeys_Key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AuthorityKeys_Key::Swap(AuthorityKeys_Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthorityKeys_Key::InternalSwap(AuthorityKeys_Key* other) {
  fingerprint_.Swap(&other->fingerprint_);
  public_key_.Swap(&other->public_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthorityKeys_Key::GetTypeName() const {
  return "cast_channel.proto.AuthorityKeys.Key";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthorityKeys_Key

// required bytes fingerprint = 1;
bool AuthorityKeys_Key::has_fingerprint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AuthorityKeys_Key::set_has_fingerprint() {
  _has_bits_[0] |= 0x00000001u;
}
void AuthorityKeys_Key::clear_has_fingerprint() {
  _has_bits_[0] &= ~0x00000001u;
}
void AuthorityKeys_Key::clear_fingerprint() {
  fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fingerprint();
}
const ::std::string& AuthorityKeys_Key::fingerprint() const {
  // @@protoc_insertion_point(field_get:cast_channel.proto.AuthorityKeys.Key.fingerprint)
  return fingerprint_.GetNoArena();
}
void AuthorityKeys_Key::set_fingerprint(const ::std::string& value) {
  set_has_fingerprint();
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.proto.AuthorityKeys.Key.fingerprint)
}
#if LANG_CXX11
void AuthorityKeys_Key::set_fingerprint(::std::string&& value) {
  set_has_fingerprint();
  fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.proto.AuthorityKeys.Key.fingerprint)
}
#endif
void AuthorityKeys_Key::set_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fingerprint();
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.proto.AuthorityKeys.Key.fingerprint)
}
void AuthorityKeys_Key::set_fingerprint(const void* value, size_t size) {
  set_has_fingerprint();
  fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.proto.AuthorityKeys.Key.fingerprint)
}
::std::string* AuthorityKeys_Key::mutable_fingerprint() {
  set_has_fingerprint();
  // @@protoc_insertion_point(field_mutable:cast_channel.proto.AuthorityKeys.Key.fingerprint)
  return fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthorityKeys_Key::release_fingerprint() {
  // @@protoc_insertion_point(field_release:cast_channel.proto.AuthorityKeys.Key.fingerprint)
  clear_has_fingerprint();
  return fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthorityKeys_Key::set_allocated_fingerprint(::std::string* fingerprint) {
  if (fingerprint != NULL) {
    set_has_fingerprint();
  } else {
    clear_has_fingerprint();
  }
  fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fingerprint);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.proto.AuthorityKeys.Key.fingerprint)
}

// required bytes public_key = 2;
bool AuthorityKeys_Key::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AuthorityKeys_Key::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
void AuthorityKeys_Key::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void AuthorityKeys_Key::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
const ::std::string& AuthorityKeys_Key::public_key() const {
  // @@protoc_insertion_point(field_get:cast_channel.proto.AuthorityKeys.Key.public_key)
  return public_key_.GetNoArena();
}
void AuthorityKeys_Key::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cast_channel.proto.AuthorityKeys.Key.public_key)
}
#if LANG_CXX11
void AuthorityKeys_Key::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cast_channel.proto.AuthorityKeys.Key.public_key)
}
#endif
void AuthorityKeys_Key::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cast_channel.proto.AuthorityKeys.Key.public_key)
}
void AuthorityKeys_Key::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cast_channel.proto.AuthorityKeys.Key.public_key)
}
::std::string* AuthorityKeys_Key::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:cast_channel.proto.AuthorityKeys.Key.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AuthorityKeys_Key::release_public_key() {
  // @@protoc_insertion_point(field_release:cast_channel.proto.AuthorityKeys.Key.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AuthorityKeys_Key::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:cast_channel.proto.AuthorityKeys.Key.public_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthorityKeys::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthorityKeys::AuthorityKeys()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_authority_5fkeys_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cast_channel.proto.AuthorityKeys)
}
AuthorityKeys::AuthorityKeys(const AuthorityKeys& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cast_channel.proto.AuthorityKeys)
}

void AuthorityKeys::SharedCtor() {
  _cached_size_ = 0;
}

AuthorityKeys::~AuthorityKeys() {
  // @@protoc_insertion_point(destructor:cast_channel.proto.AuthorityKeys)
  SharedDtor();
}

void AuthorityKeys::SharedDtor() {
}

void AuthorityKeys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthorityKeys& AuthorityKeys::default_instance() {
  protobuf_authority_5fkeys_2eproto::InitDefaults();
  return *internal_default_instance();
}

AuthorityKeys* AuthorityKeys::New(::google::protobuf::Arena* arena) const {
  AuthorityKeys* n = new AuthorityKeys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthorityKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:cast_channel.proto.AuthorityKeys)
  keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthorityKeys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cast_channel.proto.AuthorityKeys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cast_channel.proto.AuthorityKeys.Key keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cast_channel.proto.AuthorityKeys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cast_channel.proto.AuthorityKeys)
  return false;
#undef DO_
}

void AuthorityKeys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cast_channel.proto.AuthorityKeys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cast_channel.proto.AuthorityKeys.Key keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->keys(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cast_channel.proto.AuthorityKeys)
}

size_t AuthorityKeys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cast_channel.proto.AuthorityKeys)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .cast_channel.proto.AuthorityKeys.Key keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorityKeys::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthorityKeys*>(&from));
}

void AuthorityKeys::MergeFrom(const AuthorityKeys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cast_channel.proto.AuthorityKeys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void AuthorityKeys::CopyFrom(const AuthorityKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cast_channel.proto.AuthorityKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorityKeys::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->keys())) return false;
  return true;
}

void AuthorityKeys::Swap(AuthorityKeys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthorityKeys::InternalSwap(AuthorityKeys* other) {
  keys_.InternalSwap(&other->keys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthorityKeys::GetTypeName() const {
  return "cast_channel.proto.AuthorityKeys";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthorityKeys

// repeated .cast_channel.proto.AuthorityKeys.Key keys = 1;
int AuthorityKeys::keys_size() const {
  return keys_.size();
}
void AuthorityKeys::clear_keys() {
  keys_.Clear();
}
const ::cast_channel::proto::AuthorityKeys_Key& AuthorityKeys::keys(int index) const {
  // @@protoc_insertion_point(field_get:cast_channel.proto.AuthorityKeys.keys)
  return keys_.Get(index);
}
::cast_channel::proto::AuthorityKeys_Key* AuthorityKeys::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:cast_channel.proto.AuthorityKeys.keys)
  return keys_.Mutable(index);
}
::cast_channel::proto::AuthorityKeys_Key* AuthorityKeys::add_keys() {
  // @@protoc_insertion_point(field_add:cast_channel.proto.AuthorityKeys.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::cast_channel::proto::AuthorityKeys_Key >*
AuthorityKeys::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:cast_channel.proto.AuthorityKeys.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::cast_channel::proto::AuthorityKeys_Key >&
AuthorityKeys::keys() const {
  // @@protoc_insertion_point(field_list:cast_channel.proto.AuthorityKeys.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cast_channel

// @@protoc_insertion_point(global_scope)
