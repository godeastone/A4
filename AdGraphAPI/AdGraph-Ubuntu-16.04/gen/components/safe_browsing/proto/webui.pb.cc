// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webui.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "webui.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace safe_browsing {
class DatabaseManagerInfo_UpdateInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatabaseManagerInfo_UpdateInfo> {
} _DatabaseManagerInfo_UpdateInfo_default_instance_;
class DatabaseManagerInfo_DatabaseInfo_StoreInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatabaseManagerInfo_DatabaseInfo_StoreInfo> {
} _DatabaseManagerInfo_DatabaseInfo_StoreInfo_default_instance_;
class DatabaseManagerInfo_DatabaseInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatabaseManagerInfo_DatabaseInfo> {
} _DatabaseManagerInfo_DatabaseInfo_default_instance_;
class DatabaseManagerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatabaseManagerInfo> {
} _DatabaseManagerInfo_default_instance_;
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifierDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier> {
} _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_default_instance_;
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo> {
} _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_;
class FullHashCacheInfo_FullHashCache_CachedHashPrefixInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo> {
} _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_default_instance_;
class FullHashCacheInfo_FullHashCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FullHashCacheInfo_FullHashCache> {
} _FullHashCacheInfo_FullHashCache_default_instance_;
class FullHashCacheInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FullHashCacheInfo> {
} _FullHashCacheInfo_default_instance_;

namespace protobuf_webui_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DatabaseManagerInfo_UpdateInfo_default_instance_.Shutdown();
  _DatabaseManagerInfo_DatabaseInfo_StoreInfo_default_instance_.Shutdown();
  _DatabaseManagerInfo_DatabaseInfo_default_instance_.Shutdown();
  _DatabaseManagerInfo_default_instance_.Shutdown();
  _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_default_instance_.Shutdown();
  _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_.Shutdown();
  _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_default_instance_.Shutdown();
  _FullHashCacheInfo_FullHashCache_default_instance_.Shutdown();
  _FullHashCacheInfo_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DatabaseManagerInfo_UpdateInfo_default_instance_.DefaultConstruct();
  _DatabaseManagerInfo_DatabaseInfo_StoreInfo_default_instance_.DefaultConstruct();
  _DatabaseManagerInfo_DatabaseInfo_default_instance_.DefaultConstruct();
  _DatabaseManagerInfo_default_instance_.DefaultConstruct();
  _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier_default_instance_.DefaultConstruct();
  _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_.DefaultConstruct();
  _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_default_instance_.DefaultConstruct();
  _FullHashCacheInfo_FullHashCache_default_instance_.DefaultConstruct();
  _FullHashCacheInfo_default_instance_.DefaultConstruct();
  _DatabaseManagerInfo_default_instance_.get_mutable()->update_info_ = const_cast< ::safe_browsing::DatabaseManagerInfo_UpdateInfo*>(
      ::safe_browsing::DatabaseManagerInfo_UpdateInfo::internal_default_instance());
  _DatabaseManagerInfo_default_instance_.get_mutable()->database_info_ = const_cast< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo*>(
      ::safe_browsing::DatabaseManagerInfo_DatabaseInfo::internal_default_instance());
  _FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_default_instance_.get_mutable()->list_identifier_ = const_cast< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier*>(
      ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::internal_default_instance());
  _FullHashCacheInfo_FullHashCache_default_instance_.get_mutable()->cached_hash_prefix_info_ = const_cast< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo*>(
      ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_webui_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseManagerInfo_UpdateInfo::kNetworkStatusCodeFieldNumber;
const int DatabaseManagerInfo_UpdateInfo::kLastUpdateTimeMillisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseManagerInfo_UpdateInfo::DatabaseManagerInfo_UpdateInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DatabaseManagerInfo.UpdateInfo)
}
DatabaseManagerInfo_UpdateInfo::DatabaseManagerInfo_UpdateInfo(const DatabaseManagerInfo_UpdateInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_update_time_millis_, &from.last_update_time_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_status_code_) -
    reinterpret_cast<char*>(&last_update_time_millis_)) + sizeof(network_status_code_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo.UpdateInfo)
}

void DatabaseManagerInfo_UpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_update_time_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_status_code_) -
      reinterpret_cast<char*>(&last_update_time_millis_)) + sizeof(network_status_code_));
}

DatabaseManagerInfo_UpdateInfo::~DatabaseManagerInfo_UpdateInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  SharedDtor();
}

void DatabaseManagerInfo_UpdateInfo::SharedDtor() {
}

void DatabaseManagerInfo_UpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DatabaseManagerInfo_UpdateInfo& DatabaseManagerInfo_UpdateInfo::default_instance() {
  protobuf_webui_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatabaseManagerInfo_UpdateInfo* DatabaseManagerInfo_UpdateInfo::New(::google::protobuf::Arena* arena) const {
  DatabaseManagerInfo_UpdateInfo* n = new DatabaseManagerInfo_UpdateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatabaseManagerInfo_UpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&last_update_time_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_status_code_) -
        reinterpret_cast<char*>(&last_update_time_millis_)) + sizeof(network_status_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatabaseManagerInfo_UpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 network_status_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_network_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_update_time_millis = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_last_update_time_millis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_update_time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  return false;
#undef DO_
}

void DatabaseManagerInfo_UpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 network_status_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->network_status_code(), output);
  }

  // optional uint64 last_update_time_millis = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_update_time_millis(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DatabaseManagerInfo.UpdateInfo)
}

size_t DatabaseManagerInfo_UpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 last_update_time_millis = 2;
    if (has_last_update_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_update_time_millis());
    }

    // optional int32 network_status_code = 1;
    if (has_network_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_status_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseManagerInfo_UpdateInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DatabaseManagerInfo_UpdateInfo*>(&from));
}

void DatabaseManagerInfo_UpdateInfo::MergeFrom(const DatabaseManagerInfo_UpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_update_time_millis_ = from.last_update_time_millis_;
    }
    if (cached_has_bits & 0x00000002u) {
      network_status_code_ = from.network_status_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatabaseManagerInfo_UpdateInfo::CopyFrom(const DatabaseManagerInfo_UpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo.UpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo_UpdateInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo_UpdateInfo::Swap(DatabaseManagerInfo_UpdateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseManagerInfo_UpdateInfo::InternalSwap(DatabaseManagerInfo_UpdateInfo* other) {
  std::swap(last_update_time_millis_, other->last_update_time_millis_);
  std::swap(network_status_code_, other->network_status_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DatabaseManagerInfo_UpdateInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo.UpdateInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatabaseManagerInfo_UpdateInfo

// optional int32 network_status_code = 1;
bool DatabaseManagerInfo_UpdateInfo::has_network_status_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DatabaseManagerInfo_UpdateInfo::set_has_network_status_code() {
  _has_bits_[0] |= 0x00000002u;
}
void DatabaseManagerInfo_UpdateInfo::clear_has_network_status_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void DatabaseManagerInfo_UpdateInfo::clear_network_status_code() {
  network_status_code_ = 0;
  clear_has_network_status_code();
}
::google::protobuf::int32 DatabaseManagerInfo_UpdateInfo::network_status_code() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.UpdateInfo.network_status_code)
  return network_status_code_;
}
void DatabaseManagerInfo_UpdateInfo::set_network_status_code(::google::protobuf::int32 value) {
  set_has_network_status_code();
  network_status_code_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.UpdateInfo.network_status_code)
}

// optional uint64 last_update_time_millis = 2;
bool DatabaseManagerInfo_UpdateInfo::has_last_update_time_millis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DatabaseManagerInfo_UpdateInfo::set_has_last_update_time_millis() {
  _has_bits_[0] |= 0x00000001u;
}
void DatabaseManagerInfo_UpdateInfo::clear_has_last_update_time_millis() {
  _has_bits_[0] &= ~0x00000001u;
}
void DatabaseManagerInfo_UpdateInfo::clear_last_update_time_millis() {
  last_update_time_millis_ = GOOGLE_ULONGLONG(0);
  clear_has_last_update_time_millis();
}
::google::protobuf::uint64 DatabaseManagerInfo_UpdateInfo::last_update_time_millis() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.UpdateInfo.last_update_time_millis)
  return last_update_time_millis_;
}
void DatabaseManagerInfo_UpdateInfo::set_last_update_time_millis(::google::protobuf::uint64 value) {
  set_has_last_update_time_millis();
  last_update_time_millis_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.UpdateInfo.last_update_time_millis)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseManagerInfo_DatabaseInfo_StoreInfo::kFileNameFieldNumber;
const int DatabaseManagerInfo_DatabaseInfo_StoreInfo::kFileSizeBytesFieldNumber;
const int DatabaseManagerInfo_DatabaseInfo_StoreInfo::kUpdateStatusFieldNumber;
const int DatabaseManagerInfo_DatabaseInfo_StoreInfo::kLastApplyUpdateTimeMillisFieldNumber;
const int DatabaseManagerInfo_DatabaseInfo_StoreInfo::kChecksAttemptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseManagerInfo_DatabaseInfo_StoreInfo::DatabaseManagerInfo_DatabaseInfo_StoreInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
}
DatabaseManagerInfo_DatabaseInfo_StoreInfo::DatabaseManagerInfo_DatabaseInfo_StoreInfo(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&file_size_bytes_, &from.file_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&checks_attempted_) -
    reinterpret_cast<char*>(&file_size_bytes_)) + sizeof(checks_attempted_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checks_attempted_) -
      reinterpret_cast<char*>(&file_size_bytes_)) + sizeof(checks_attempted_));
}

DatabaseManagerInfo_DatabaseInfo_StoreInfo::~DatabaseManagerInfo_DatabaseInfo_StoreInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  SharedDtor();
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DatabaseManagerInfo_DatabaseInfo_StoreInfo& DatabaseManagerInfo_DatabaseInfo_StoreInfo::default_instance() {
  protobuf_webui_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatabaseManagerInfo_DatabaseInfo_StoreInfo* DatabaseManagerInfo_DatabaseInfo_StoreInfo::New(::google::protobuf::Arena* arena) const {
  DatabaseManagerInfo_DatabaseInfo_StoreInfo* n = new DatabaseManagerInfo_DatabaseInfo_StoreInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&file_size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checks_attempted_) -
        reinterpret_cast<char*>(&file_size_bytes_)) + sizeof(checks_attempted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 file_size_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_file_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_update_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_apply_update_time_millis = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_last_apply_update_time_millis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_apply_update_time_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 checks_attempted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_checks_attempted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checks_attempted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  return false;
#undef DO_
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional int64 file_size_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->file_size_bytes(), output);
  }

  // optional int32 update_status = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->update_status(), output);
  }

  // optional uint64 last_apply_update_time_millis = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_apply_update_time_millis(), output);
  }

  // optional uint32 checks_attempted = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->checks_attempted(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
}

size_t DatabaseManagerInfo_DatabaseInfo_StoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional int64 file_size_bytes = 2;
    if (has_file_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_size_bytes());
    }

    // optional uint64 last_apply_update_time_millis = 4;
    if (has_last_apply_update_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_apply_update_time_millis());
    }

    // optional int32 update_status = 3;
    if (has_update_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_status());
    }

    // optional uint32 checks_attempted = 5;
    if (has_checks_attempted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checks_attempted());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DatabaseManagerInfo_DatabaseInfo_StoreInfo*>(&from));
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::MergeFrom(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      file_size_bytes_ = from.file_size_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_apply_update_time_millis_ = from.last_apply_update_time_millis_;
    }
    if (cached_has_bits & 0x00000008u) {
      update_status_ = from.update_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      checks_attempted_ = from.checks_attempted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::CopyFrom(const DatabaseManagerInfo_DatabaseInfo_StoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo_DatabaseInfo_StoreInfo::Swap(DatabaseManagerInfo_DatabaseInfo_StoreInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::InternalSwap(DatabaseManagerInfo_DatabaseInfo_StoreInfo* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(file_size_bytes_, other->file_size_bytes_);
  std::swap(last_apply_update_time_millis_, other->last_apply_update_time_millis_);
  std::swap(update_status_, other->update_status_);
  std::swap(checks_attempted_, other->checks_attempted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DatabaseManagerInfo_DatabaseInfo_StoreInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatabaseManagerInfo_DatabaseInfo_StoreInfo

// optional string file_name = 1;
bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& DatabaseManagerInfo_DatabaseInfo_StoreInfo::file_name() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
  return file_name_.GetNoArena();
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
}
#if LANG_CXX11
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
}
#endif
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
}
::std::string* DatabaseManagerInfo_DatabaseInfo_StoreInfo::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DatabaseManagerInfo_DatabaseInfo_StoreInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_name)
}

// optional int64 file_size_bytes = 2;
bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_file_size_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_has_file_size_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_has_file_size_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_file_size_bytes() {
  file_size_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_file_size_bytes();
}
::google::protobuf::int64 DatabaseManagerInfo_DatabaseInfo_StoreInfo::file_size_bytes() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_size_bytes)
  return file_size_bytes_;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_file_size_bytes(::google::protobuf::int64 value) {
  set_has_file_size_bytes();
  file_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.file_size_bytes)
}

// optional int32 update_status = 3;
bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_update_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_has_update_status() {
  _has_bits_[0] |= 0x00000008u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_has_update_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_update_status() {
  update_status_ = 0;
  clear_has_update_status();
}
::google::protobuf::int32 DatabaseManagerInfo_DatabaseInfo_StoreInfo::update_status() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.update_status)
  return update_status_;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_update_status(::google::protobuf::int32 value) {
  set_has_update_status();
  update_status_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.update_status)
}

// optional uint64 last_apply_update_time_millis = 4;
bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_last_apply_update_time_millis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_has_last_apply_update_time_millis() {
  _has_bits_[0] |= 0x00000004u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_has_last_apply_update_time_millis() {
  _has_bits_[0] &= ~0x00000004u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_last_apply_update_time_millis() {
  last_apply_update_time_millis_ = GOOGLE_ULONGLONG(0);
  clear_has_last_apply_update_time_millis();
}
::google::protobuf::uint64 DatabaseManagerInfo_DatabaseInfo_StoreInfo::last_apply_update_time_millis() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.last_apply_update_time_millis)
  return last_apply_update_time_millis_;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_last_apply_update_time_millis(::google::protobuf::uint64 value) {
  set_has_last_apply_update_time_millis();
  last_apply_update_time_millis_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.last_apply_update_time_millis)
}

// optional uint32 checks_attempted = 5;
bool DatabaseManagerInfo_DatabaseInfo_StoreInfo::has_checks_attempted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_has_checks_attempted() {
  _has_bits_[0] |= 0x00000010u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_has_checks_attempted() {
  _has_bits_[0] &= ~0x00000010u;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::clear_checks_attempted() {
  checks_attempted_ = 0u;
  clear_has_checks_attempted();
}
::google::protobuf::uint32 DatabaseManagerInfo_DatabaseInfo_StoreInfo::checks_attempted() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.checks_attempted)
  return checks_attempted_;
}
void DatabaseManagerInfo_DatabaseInfo_StoreInfo::set_checks_attempted(::google::protobuf::uint32 value) {
  set_has_checks_attempted();
  checks_attempted_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo.checks_attempted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseManagerInfo_DatabaseInfo::kUpdateSuccessfulFieldNumber;
const int DatabaseManagerInfo_DatabaseInfo::kDatabaseSizeBytesFieldNumber;
const int DatabaseManagerInfo_DatabaseInfo::kStoreInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseManagerInfo_DatabaseInfo::DatabaseManagerInfo_DatabaseInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
}
DatabaseManagerInfo_DatabaseInfo::DatabaseManagerInfo_DatabaseInfo(const DatabaseManagerInfo_DatabaseInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      store_info_(from.store_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&database_size_bytes_, &from.database_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_successful_) -
    reinterpret_cast<char*>(&database_size_bytes_)) + sizeof(update_successful_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
}

void DatabaseManagerInfo_DatabaseInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&database_size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_successful_) -
      reinterpret_cast<char*>(&database_size_bytes_)) + sizeof(update_successful_));
}

DatabaseManagerInfo_DatabaseInfo::~DatabaseManagerInfo_DatabaseInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  SharedDtor();
}

void DatabaseManagerInfo_DatabaseInfo::SharedDtor() {
}

void DatabaseManagerInfo_DatabaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DatabaseManagerInfo_DatabaseInfo& DatabaseManagerInfo_DatabaseInfo::default_instance() {
  protobuf_webui_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatabaseManagerInfo_DatabaseInfo* DatabaseManagerInfo_DatabaseInfo::New(::google::protobuf::Arena* arena) const {
  DatabaseManagerInfo_DatabaseInfo* n = new DatabaseManagerInfo_DatabaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatabaseManagerInfo_DatabaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  store_info_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&database_size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_successful_) -
        reinterpret_cast<char*>(&database_size_bytes_)) + sizeof(update_successful_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatabaseManagerInfo_DatabaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool update_successful = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_update_successful();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 database_size_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_database_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &database_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  return false;
#undef DO_
}

void DatabaseManagerInfo_DatabaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool update_successful = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->update_successful(), output);
  }

  // optional uint64 database_size_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->database_size_bytes(), output);
  }

  // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->store_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->store_info(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
}

size_t DatabaseManagerInfo_DatabaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->store_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 database_size_bytes = 2;
    if (has_database_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->database_size_bytes());
    }

    // optional bool update_successful = 1;
    if (has_update_successful()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseManagerInfo_DatabaseInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DatabaseManagerInfo_DatabaseInfo*>(&from));
}

void DatabaseManagerInfo_DatabaseInfo::MergeFrom(const DatabaseManagerInfo_DatabaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_info_.MergeFrom(from.store_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      database_size_bytes_ = from.database_size_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      update_successful_ = from.update_successful_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DatabaseManagerInfo_DatabaseInfo::CopyFrom(const DatabaseManagerInfo_DatabaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo.DatabaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo_DatabaseInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo_DatabaseInfo::Swap(DatabaseManagerInfo_DatabaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseManagerInfo_DatabaseInfo::InternalSwap(DatabaseManagerInfo_DatabaseInfo* other) {
  store_info_.InternalSwap(&other->store_info_);
  std::swap(database_size_bytes_, other->database_size_bytes_);
  std::swap(update_successful_, other->update_successful_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DatabaseManagerInfo_DatabaseInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo.DatabaseInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatabaseManagerInfo_DatabaseInfo

// optional bool update_successful = 1;
bool DatabaseManagerInfo_DatabaseInfo::has_update_successful() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DatabaseManagerInfo_DatabaseInfo::set_has_update_successful() {
  _has_bits_[0] |= 0x00000002u;
}
void DatabaseManagerInfo_DatabaseInfo::clear_has_update_successful() {
  _has_bits_[0] &= ~0x00000002u;
}
void DatabaseManagerInfo_DatabaseInfo::clear_update_successful() {
  update_successful_ = false;
  clear_has_update_successful();
}
bool DatabaseManagerInfo_DatabaseInfo::update_successful() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.update_successful)
  return update_successful_;
}
void DatabaseManagerInfo_DatabaseInfo::set_update_successful(bool value) {
  set_has_update_successful();
  update_successful_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.update_successful)
}

// optional uint64 database_size_bytes = 2;
bool DatabaseManagerInfo_DatabaseInfo::has_database_size_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DatabaseManagerInfo_DatabaseInfo::set_has_database_size_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void DatabaseManagerInfo_DatabaseInfo::clear_has_database_size_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void DatabaseManagerInfo_DatabaseInfo::clear_database_size_bytes() {
  database_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_database_size_bytes();
}
::google::protobuf::uint64 DatabaseManagerInfo_DatabaseInfo::database_size_bytes() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.database_size_bytes)
  return database_size_bytes_;
}
void DatabaseManagerInfo_DatabaseInfo::set_database_size_bytes(::google::protobuf::uint64 value) {
  set_has_database_size_bytes();
  database_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.DatabaseManagerInfo.DatabaseInfo.database_size_bytes)
}

// repeated .safe_browsing.DatabaseManagerInfo.DatabaseInfo.StoreInfo store_info = 3;
int DatabaseManagerInfo_DatabaseInfo::store_info_size() const {
  return store_info_.size();
}
void DatabaseManagerInfo_DatabaseInfo::clear_store_info() {
  store_info_.Clear();
}
const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo& DatabaseManagerInfo_DatabaseInfo::store_info(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return store_info_.Get(index);
}
::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* DatabaseManagerInfo_DatabaseInfo::mutable_store_info(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return store_info_.Mutable(index);
}
::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo* DatabaseManagerInfo_DatabaseInfo::add_store_info() {
  // @@protoc_insertion_point(field_add:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return store_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >*
DatabaseManagerInfo_DatabaseInfo::mutable_store_info() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return &store_info_;
}
const ::google::protobuf::RepeatedPtrField< ::safe_browsing::DatabaseManagerInfo_DatabaseInfo_StoreInfo >&
DatabaseManagerInfo_DatabaseInfo::store_info() const {
  // @@protoc_insertion_point(field_list:safe_browsing.DatabaseManagerInfo.DatabaseInfo.store_info)
  return store_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseManagerInfo::kUpdateInfoFieldNumber;
const int DatabaseManagerInfo::kDatabaseInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseManagerInfo::DatabaseManagerInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DatabaseManagerInfo)
}
DatabaseManagerInfo::DatabaseManagerInfo(const DatabaseManagerInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_info()) {
    update_info_ = new ::safe_browsing::DatabaseManagerInfo_UpdateInfo(*from.update_info_);
  } else {
    update_info_ = NULL;
  }
  if (from.has_database_info()) {
    database_info_ = new ::safe_browsing::DatabaseManagerInfo_DatabaseInfo(*from.database_info_);
  } else {
    database_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DatabaseManagerInfo)
}

void DatabaseManagerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&update_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&database_info_) -
      reinterpret_cast<char*>(&update_info_)) + sizeof(database_info_));
}

DatabaseManagerInfo::~DatabaseManagerInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.DatabaseManagerInfo)
  SharedDtor();
}

void DatabaseManagerInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete update_info_;
  }
  if (this != internal_default_instance()) {
    delete database_info_;
  }
}

void DatabaseManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DatabaseManagerInfo& DatabaseManagerInfo::default_instance() {
  protobuf_webui_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatabaseManagerInfo* DatabaseManagerInfo::New(::google::protobuf::Arena* arena) const {
  DatabaseManagerInfo* n = new DatabaseManagerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatabaseManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DatabaseManagerInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_update_info()) {
      GOOGLE_DCHECK(update_info_ != NULL);
      update_info_->::safe_browsing::DatabaseManagerInfo_UpdateInfo::Clear();
    }
    if (has_database_info()) {
      GOOGLE_DCHECK(database_info_ != NULL);
      database_info_->::safe_browsing::DatabaseManagerInfo_DatabaseInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatabaseManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DatabaseManagerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DatabaseManagerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DatabaseManagerInfo)
  return false;
#undef DO_
}

void DatabaseManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DatabaseManagerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->update_info_, output);
  }

  // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->database_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DatabaseManagerInfo)
}

size_t DatabaseManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DatabaseManagerInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
    if (has_update_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_info_);
    }

    // optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
    if (has_database_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->database_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseManagerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DatabaseManagerInfo*>(&from));
}

void DatabaseManagerInfo::MergeFrom(const DatabaseManagerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DatabaseManagerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_info()->::safe_browsing::DatabaseManagerInfo_UpdateInfo::MergeFrom(from.update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_database_info()->::safe_browsing::DatabaseManagerInfo_DatabaseInfo::MergeFrom(from.database_info());
    }
  }
}

void DatabaseManagerInfo::CopyFrom(const DatabaseManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DatabaseManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseManagerInfo::IsInitialized() const {
  return true;
}

void DatabaseManagerInfo::Swap(DatabaseManagerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseManagerInfo::InternalSwap(DatabaseManagerInfo* other) {
  std::swap(update_info_, other->update_info_);
  std::swap(database_info_, other->database_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DatabaseManagerInfo::GetTypeName() const {
  return "safe_browsing.DatabaseManagerInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatabaseManagerInfo

// optional .safe_browsing.DatabaseManagerInfo.UpdateInfo update_info = 1;
bool DatabaseManagerInfo::has_update_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DatabaseManagerInfo::set_has_update_info() {
  _has_bits_[0] |= 0x00000001u;
}
void DatabaseManagerInfo::clear_has_update_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void DatabaseManagerInfo::clear_update_info() {
  if (update_info_ != NULL) update_info_->::safe_browsing::DatabaseManagerInfo_UpdateInfo::Clear();
  clear_has_update_info();
}
const ::safe_browsing::DatabaseManagerInfo_UpdateInfo& DatabaseManagerInfo::update_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.update_info)
  return update_info_ != NULL ? *update_info_
                         : *::safe_browsing::DatabaseManagerInfo_UpdateInfo::internal_default_instance();
}
::safe_browsing::DatabaseManagerInfo_UpdateInfo* DatabaseManagerInfo::mutable_update_info() {
  set_has_update_info();
  if (update_info_ == NULL) {
    update_info_ = new ::safe_browsing::DatabaseManagerInfo_UpdateInfo;
  }
  // @@protoc_insertion_point(field_mutable:safe_browsing.DatabaseManagerInfo.update_info)
  return update_info_;
}
::safe_browsing::DatabaseManagerInfo_UpdateInfo* DatabaseManagerInfo::release_update_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.DatabaseManagerInfo.update_info)
  clear_has_update_info();
  ::safe_browsing::DatabaseManagerInfo_UpdateInfo* temp = update_info_;
  update_info_ = NULL;
  return temp;
}
void DatabaseManagerInfo::set_allocated_update_info(::safe_browsing::DatabaseManagerInfo_UpdateInfo* update_info) {
  delete update_info_;
  update_info_ = update_info;
  if (update_info) {
    set_has_update_info();
  } else {
    clear_has_update_info();
  }
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DatabaseManagerInfo.update_info)
}

// optional .safe_browsing.DatabaseManagerInfo.DatabaseInfo database_info = 2;
bool DatabaseManagerInfo::has_database_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DatabaseManagerInfo::set_has_database_info() {
  _has_bits_[0] |= 0x00000002u;
}
void DatabaseManagerInfo::clear_has_database_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void DatabaseManagerInfo::clear_database_info() {
  if (database_info_ != NULL) database_info_->::safe_browsing::DatabaseManagerInfo_DatabaseInfo::Clear();
  clear_has_database_info();
}
const ::safe_browsing::DatabaseManagerInfo_DatabaseInfo& DatabaseManagerInfo::database_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.DatabaseManagerInfo.database_info)
  return database_info_ != NULL ? *database_info_
                         : *::safe_browsing::DatabaseManagerInfo_DatabaseInfo::internal_default_instance();
}
::safe_browsing::DatabaseManagerInfo_DatabaseInfo* DatabaseManagerInfo::mutable_database_info() {
  set_has_database_info();
  if (database_info_ == NULL) {
    database_info_ = new ::safe_browsing::DatabaseManagerInfo_DatabaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:safe_browsing.DatabaseManagerInfo.database_info)
  return database_info_;
}
::safe_browsing::DatabaseManagerInfo_DatabaseInfo* DatabaseManagerInfo::release_database_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.DatabaseManagerInfo.database_info)
  clear_has_database_info();
  ::safe_browsing::DatabaseManagerInfo_DatabaseInfo* temp = database_info_;
  database_info_ = NULL;
  return temp;
}
void DatabaseManagerInfo::set_allocated_database_info(::safe_browsing::DatabaseManagerInfo_DatabaseInfo* database_info) {
  delete database_info_;
  database_info_ = database_info;
  if (database_info) {
    set_has_database_info();
  } else {
    clear_has_database_info();
  }
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.DatabaseManagerInfo.database_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::kPlatformTypeFieldNumber;
const int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::kThreatEntryTypeFieldNumber;
const int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::kThreatTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&platform_type_, &from.platform_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&threat_type_) -
    reinterpret_cast<char*>(&platform_type_)) + sizeof(threat_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&platform_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threat_type_) -
      reinterpret_cast<char*>(&platform_type_)) + sizeof(threat_type_));
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  SharedDtor();
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SharedDtor() {
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::default_instance() {
  protobuf_webui_2eproto::InitDefaults();
  return *internal_default_instance();
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::New(::google::protobuf::Arena* arena) const {
  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* n = new FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&platform_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&threat_type_) -
        reinterpret_cast<char*>(&platform_type_)) + sizeof(threat_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 platform_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_platform_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 threat_entry_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_threat_entry_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threat_entry_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 threat_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_threat_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threat_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  return false;
#undef DO_
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 platform_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platform_type(), output);
  }

  // optional int32 threat_entry_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->threat_entry_type(), output);
  }

  // optional int32 threat_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->threat_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
}

size_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 platform_type = 1;
    if (has_platform_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_type());
    }

    // optional int32 threat_entry_type = 2;
    if (has_threat_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threat_entry_type());
    }

    // optional int32 threat_type = 3;
    if (has_threat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threat_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier*>(&from));
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      platform_type_ = from.platform_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      threat_entry_type_ = from.threat_entry_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      threat_type_ = from.threat_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::Swap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* other) {
  std::swap(platform_type_, other->platform_type_);
  std::swap(threat_entry_type_, other->threat_entry_type_);
  std::swap(threat_type_, other->threat_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier

// optional int32 platform_type = 1;
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::has_platform_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::set_has_platform_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::clear_has_platform_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::clear_platform_type() {
  platform_type_ = 0;
  clear_has_platform_type();
}
::google::protobuf::int32 FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::platform_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.platform_type)
  return platform_type_;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::set_platform_type(::google::protobuf::int32 value) {
  set_has_platform_type();
  platform_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.platform_type)
}

// optional int32 threat_entry_type = 2;
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::has_threat_entry_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::set_has_threat_entry_type() {
  _has_bits_[0] |= 0x00000002u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::clear_has_threat_entry_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::clear_threat_entry_type() {
  threat_entry_type_ = 0;
  clear_has_threat_entry_type();
}
::google::protobuf::int32 FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::threat_entry_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.threat_entry_type)
  return threat_entry_type_;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::set_threat_entry_type(::google::protobuf::int32 value) {
  set_has_threat_entry_type();
  threat_entry_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.threat_entry_type)
}

// optional int32 threat_type = 3;
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::has_threat_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::set_has_threat_type() {
  _has_bits_[0] |= 0x00000004u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::clear_has_threat_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::clear_threat_type() {
  threat_type_ = 0;
  clear_has_threat_type();
}
::google::protobuf::int32 FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::threat_type() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.threat_type)
  return threat_type_;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::set_threat_type(::google::protobuf::int32 value) {
  set_has_threat_type();
  threat_type_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier.threat_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::kPositiveExpiryFieldNumber;
const int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::kFullHashFieldNumber;
const int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::kListIdentifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_hash()) {
    full_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_hash_);
  }
  if (from.has_list_identifier()) {
    list_identifier_ = new ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier(*from.list_identifier_);
  } else {
    list_identifier_ = NULL;
  }
  positive_expiry_ = from.positive_expiry_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SharedCtor() {
  _cached_size_ = 0;
  full_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&list_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positive_expiry_) -
      reinterpret_cast<char*>(&list_identifier_)) + sizeof(positive_expiry_));
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  SharedDtor();
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SharedDtor() {
  full_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete list_identifier_;
  }
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::default_instance() {
  protobuf_webui_2eproto::InitDefaults();
  return *internal_default_instance();
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::New(::google::protobuf::Arena* arena) const {
  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* n = new FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_full_hash()) {
      GOOGLE_DCHECK(!full_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*full_hash_.UnsafeRawStringPointer())->clear();
    }
    if (has_list_identifier()) {
      GOOGLE_DCHECK(list_identifier_ != NULL);
      list_identifier_->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::Clear();
    }
  }
  positive_expiry_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 positive_expiry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_positive_expiry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &positive_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string full_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_identifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  return false;
#undef DO_
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 positive_expiry = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->positive_expiry(), output);
  }

  // optional string full_hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->full_hash(), output);
  }

  // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->list_identifier_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
}

size_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string full_hash = 2;
    if (has_full_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_hash());
    }

    // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
    if (has_list_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->list_identifier_);
    }

    // optional int64 positive_expiry = 1;
    if (has_positive_expiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->positive_expiry());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo*>(&from));
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_full_hash();
      full_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_list_identifier()->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::MergeFrom(from.list_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      positive_expiry_ = from.positive_expiry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::Swap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* other) {
  full_hash_.Swap(&other->full_hash_);
  std::swap(list_identifier_, other->list_identifier_);
  std::swap(positive_expiry_, other->positive_expiry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo

// optional int64 positive_expiry = 1;
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::has_positive_expiry() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_has_positive_expiry() {
  _has_bits_[0] |= 0x00000004u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::clear_has_positive_expiry() {
  _has_bits_[0] &= ~0x00000004u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::clear_positive_expiry() {
  positive_expiry_ = GOOGLE_LONGLONG(0);
  clear_has_positive_expiry();
}
::google::protobuf::int64 FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::positive_expiry() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.positive_expiry)
  return positive_expiry_;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_positive_expiry(::google::protobuf::int64 value) {
  set_has_positive_expiry();
  positive_expiry_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.positive_expiry)
}

// optional string full_hash = 2;
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::has_full_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_has_full_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::clear_has_full_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::clear_full_hash() {
  full_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_hash();
}
const ::std::string& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::full_hash() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
  return full_hash_.GetNoArena();
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_full_hash(const ::std::string& value) {
  set_has_full_hash();
  full_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
}
#if LANG_CXX11
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_full_hash(::std::string&& value) {
  set_has_full_hash();
  full_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
}
#endif
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_full_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_hash();
  full_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_full_hash(const char* value, size_t size) {
  set_has_full_hash();
  full_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
}
::std::string* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::mutable_full_hash() {
  set_has_full_hash();
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
  return full_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::release_full_hash() {
  // @@protoc_insertion_point(field_release:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
  clear_has_full_hash();
  return full_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_allocated_full_hash(::std::string* full_hash) {
  if (full_hash != NULL) {
    set_has_full_hash();
  } else {
    clear_has_full_hash();
  }
  full_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_hash);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.full_hash)
}

// optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.ListIdentifier list_identifier = 3;
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::has_list_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_has_list_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::clear_has_list_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::clear_list_identifier() {
  if (list_identifier_ != NULL) list_identifier_->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::Clear();
  clear_has_list_identifier();
}
const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::list_identifier() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.list_identifier)
  return list_identifier_ != NULL ? *list_identifier_
                         : *::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier::internal_default_instance();
}
::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::mutable_list_identifier() {
  set_has_list_identifier();
  if (list_identifier_ == NULL) {
    list_identifier_ = new ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.list_identifier)
  return list_identifier_;
}
::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::release_list_identifier() {
  // @@protoc_insertion_point(field_release:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.list_identifier)
  clear_has_list_identifier();
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* temp = list_identifier_;
  list_identifier_ = NULL;
  return temp;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo::set_allocated_list_identifier(::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo_ListIdentifier* list_identifier) {
  delete list_identifier_;
  list_identifier_ = list_identifier;
  if (list_identifier) {
    set_has_list_identifier();
  } else {
    clear_has_list_identifier();
  }
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo.list_identifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::kNegativeExpiryFieldNumber;
const int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::kFullHashInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
}
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      full_hash_info_(from.full_hash_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  negative_expiry_ = from.negative_expiry_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SharedCtor() {
  _cached_size_ = 0;
  negative_expiry_ = GOOGLE_LONGLONG(0);
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::~FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  SharedDtor();
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SharedDtor() {
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::default_instance() {
  protobuf_webui_2eproto::InitDefaults();
  return *internal_default_instance();
}

FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::New(::google::protobuf::Arena* arena) const {
  FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* n = new FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  full_hash_info_.Clear();
  negative_expiry_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 negative_expiry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_negative_expiry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &negative_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_full_hash_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  return false;
#undef DO_
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 negative_expiry = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->negative_expiry(), output);
  }

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->full_hash_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->full_hash_info(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
}

size_t FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->full_hash_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->full_hash_info(static_cast<int>(i)));
    }
  }

  // optional int64 negative_expiry = 1;
  if (has_negative_expiry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->negative_expiry());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo*>(&from));
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::MergeFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  full_hash_info_.MergeFrom(from.full_hash_info_);
  if (from.has_negative_expiry()) {
    set_negative_expiry(from.negative_expiry());
  }
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::CopyFrom(const FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::Swap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::InternalSwap(FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* other) {
  full_hash_info_.InternalSwap(&other->full_hash_info_);
  std::swap(negative_expiry_, other->negative_expiry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo

// optional int64 negative_expiry = 1;
bool FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::has_negative_expiry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::set_has_negative_expiry() {
  _has_bits_[0] |= 0x00000001u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::clear_has_negative_expiry() {
  _has_bits_[0] &= ~0x00000001u;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::clear_negative_expiry() {
  negative_expiry_ = GOOGLE_LONGLONG(0);
  clear_has_negative_expiry();
}
::google::protobuf::int64 FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::negative_expiry() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.negative_expiry)
  return negative_expiry_;
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::set_negative_expiry(::google::protobuf::int64 value) {
  set_has_negative_expiry();
  negative_expiry_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.negative_expiry)
}

// repeated .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.FullHashInfo full_hash_info = 2;
int FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::full_hash_info_size() const {
  return full_hash_info_.size();
}
void FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::clear_full_hash_info() {
  full_hash_info_.Clear();
}
const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo& FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::full_hash_info(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return full_hash_info_.Get(index);
}
::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::mutable_full_hash_info(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return full_hash_info_.Mutable(index);
}
::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo* FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::add_full_hash_info() {
  // @@protoc_insertion_point(field_add:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return full_hash_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >*
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::mutable_full_hash_info() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return &full_hash_info_;
}
const ::google::protobuf::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo_FullHashInfo >&
FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::full_hash_info() const {
  // @@protoc_insertion_point(field_list:safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo.full_hash_info)
  return full_hash_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullHashCacheInfo_FullHashCache::kHashPrefixFieldNumber;
const int FullHashCacheInfo_FullHashCache::kCachedHashPrefixInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullHashCacheInfo_FullHashCache::FullHashCacheInfo_FullHashCache()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo.FullHashCache)
}
FullHashCacheInfo_FullHashCache::FullHashCacheInfo_FullHashCache(const FullHashCacheInfo_FullHashCache& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash_prefix()) {
    hash_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_prefix_);
  }
  if (from.has_cached_hash_prefix_info()) {
    cached_hash_prefix_info_ = new ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo(*from.cached_hash_prefix_info_);
  } else {
    cached_hash_prefix_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo.FullHashCache)
}

void FullHashCacheInfo_FullHashCache::SharedCtor() {
  _cached_size_ = 0;
  hash_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cached_hash_prefix_info_ = NULL;
}

FullHashCacheInfo_FullHashCache::~FullHashCacheInfo_FullHashCache() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo.FullHashCache)
  SharedDtor();
}

void FullHashCacheInfo_FullHashCache::SharedDtor() {
  hash_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete cached_hash_prefix_info_;
  }
}

void FullHashCacheInfo_FullHashCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FullHashCacheInfo_FullHashCache& FullHashCacheInfo_FullHashCache::default_instance() {
  protobuf_webui_2eproto::InitDefaults();
  return *internal_default_instance();
}

FullHashCacheInfo_FullHashCache* FullHashCacheInfo_FullHashCache::New(::google::protobuf::Arena* arena) const {
  FullHashCacheInfo_FullHashCache* n = new FullHashCacheInfo_FullHashCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullHashCacheInfo_FullHashCache::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hash_prefix()) {
      GOOGLE_DCHECK(!hash_prefix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_prefix_.UnsafeRawStringPointer())->clear();
    }
    if (has_cached_hash_prefix_info()) {
      GOOGLE_DCHECK(cached_hash_prefix_info_ != NULL);
      cached_hash_prefix_info_->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FullHashCacheInfo_FullHashCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hash_prefix = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash_prefix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cached_hash_prefix_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo.FullHashCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo.FullHashCache)
  return false;
#undef DO_
}

void FullHashCacheInfo_FullHashCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hash_prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash_prefix(), output);
  }

  // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->cached_hash_prefix_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo.FullHashCache)
}

size_t FullHashCacheInfo_FullHashCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string hash_prefix = 1;
    if (has_hash_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash_prefix());
    }

    // optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
    if (has_cached_hash_prefix_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cached_hash_prefix_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullHashCacheInfo_FullHashCache::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FullHashCacheInfo_FullHashCache*>(&from));
}

void FullHashCacheInfo_FullHashCache::MergeFrom(const FullHashCacheInfo_FullHashCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash_prefix();
      hash_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_prefix_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cached_hash_prefix_info()->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::MergeFrom(from.cached_hash_prefix_info());
    }
  }
}

void FullHashCacheInfo_FullHashCache::CopyFrom(const FullHashCacheInfo_FullHashCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo.FullHashCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo_FullHashCache::IsInitialized() const {
  return true;
}

void FullHashCacheInfo_FullHashCache::Swap(FullHashCacheInfo_FullHashCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullHashCacheInfo_FullHashCache::InternalSwap(FullHashCacheInfo_FullHashCache* other) {
  hash_prefix_.Swap(&other->hash_prefix_);
  std::swap(cached_hash_prefix_info_, other->cached_hash_prefix_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FullHashCacheInfo_FullHashCache::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo.FullHashCache";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullHashCacheInfo_FullHashCache

// optional string hash_prefix = 1;
bool FullHashCacheInfo_FullHashCache::has_hash_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FullHashCacheInfo_FullHashCache::set_has_hash_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
void FullHashCacheInfo_FullHashCache::clear_has_hash_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
void FullHashCacheInfo_FullHashCache::clear_hash_prefix() {
  hash_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash_prefix();
}
const ::std::string& FullHashCacheInfo_FullHashCache::hash_prefix() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
  return hash_prefix_.GetNoArena();
}
void FullHashCacheInfo_FullHashCache::set_hash_prefix(const ::std::string& value) {
  set_has_hash_prefix();
  hash_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
}
#if LANG_CXX11
void FullHashCacheInfo_FullHashCache::set_hash_prefix(::std::string&& value) {
  set_has_hash_prefix();
  hash_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
}
#endif
void FullHashCacheInfo_FullHashCache::set_hash_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash_prefix();
  hash_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
}
void FullHashCacheInfo_FullHashCache::set_hash_prefix(const char* value, size_t size) {
  set_has_hash_prefix();
  hash_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
}
::std::string* FullHashCacheInfo_FullHashCache::mutable_hash_prefix() {
  set_has_hash_prefix();
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
  return hash_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FullHashCacheInfo_FullHashCache::release_hash_prefix() {
  // @@protoc_insertion_point(field_release:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
  clear_has_hash_prefix();
  return hash_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FullHashCacheInfo_FullHashCache::set_allocated_hash_prefix(::std::string* hash_prefix) {
  if (hash_prefix != NULL) {
    set_has_hash_prefix();
  } else {
    clear_has_hash_prefix();
  }
  hash_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_prefix);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.hash_prefix)
}

// optional .safe_browsing.FullHashCacheInfo.FullHashCache.CachedHashPrefixInfo cached_hash_prefix_info = 2;
bool FullHashCacheInfo_FullHashCache::has_cached_hash_prefix_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FullHashCacheInfo_FullHashCache::set_has_cached_hash_prefix_info() {
  _has_bits_[0] |= 0x00000002u;
}
void FullHashCacheInfo_FullHashCache::clear_has_cached_hash_prefix_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void FullHashCacheInfo_FullHashCache::clear_cached_hash_prefix_info() {
  if (cached_hash_prefix_info_ != NULL) cached_hash_prefix_info_->::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::Clear();
  clear_has_cached_hash_prefix_info();
}
const ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo& FullHashCacheInfo_FullHashCache::cached_hash_prefix_info() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.FullHashCache.cached_hash_prefix_info)
  return cached_hash_prefix_info_ != NULL ? *cached_hash_prefix_info_
                         : *::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo::internal_default_instance();
}
::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* FullHashCacheInfo_FullHashCache::mutable_cached_hash_prefix_info() {
  set_has_cached_hash_prefix_info();
  if (cached_hash_prefix_info_ == NULL) {
    cached_hash_prefix_info_ = new ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo;
  }
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.FullHashCache.cached_hash_prefix_info)
  return cached_hash_prefix_info_;
}
::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* FullHashCacheInfo_FullHashCache::release_cached_hash_prefix_info() {
  // @@protoc_insertion_point(field_release:safe_browsing.FullHashCacheInfo.FullHashCache.cached_hash_prefix_info)
  clear_has_cached_hash_prefix_info();
  ::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* temp = cached_hash_prefix_info_;
  cached_hash_prefix_info_ = NULL;
  return temp;
}
void FullHashCacheInfo_FullHashCache::set_allocated_cached_hash_prefix_info(::safe_browsing::FullHashCacheInfo_FullHashCache_CachedHashPrefixInfo* cached_hash_prefix_info) {
  delete cached_hash_prefix_info_;
  cached_hash_prefix_info_ = cached_hash_prefix_info;
  if (cached_hash_prefix_info) {
    set_has_cached_hash_prefix_info();
  } else {
    clear_has_cached_hash_prefix_info();
  }
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.FullHashCacheInfo.FullHashCache.cached_hash_prefix_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullHashCacheInfo::kNumberOfHitsFieldNumber;
const int FullHashCacheInfo::kFullHashCacheFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullHashCacheInfo::FullHashCacheInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_webui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.FullHashCacheInfo)
}
FullHashCacheInfo::FullHashCacheInfo(const FullHashCacheInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      full_hash_cache_(from.full_hash_cache_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_of_hits_ = from.number_of_hits_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.FullHashCacheInfo)
}

void FullHashCacheInfo::SharedCtor() {
  _cached_size_ = 0;
  number_of_hits_ = 0;
}

FullHashCacheInfo::~FullHashCacheInfo() {
  // @@protoc_insertion_point(destructor:safe_browsing.FullHashCacheInfo)
  SharedDtor();
}

void FullHashCacheInfo::SharedDtor() {
}

void FullHashCacheInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FullHashCacheInfo& FullHashCacheInfo::default_instance() {
  protobuf_webui_2eproto::InitDefaults();
  return *internal_default_instance();
}

FullHashCacheInfo* FullHashCacheInfo::New(::google::protobuf::Arena* arena) const {
  FullHashCacheInfo* n = new FullHashCacheInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullHashCacheInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.FullHashCacheInfo)
  full_hash_cache_.Clear();
  number_of_hits_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FullHashCacheInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.FullHashCacheInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number_of_hits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_number_of_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_full_hash_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.FullHashCacheInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.FullHashCacheInfo)
  return false;
#undef DO_
}

void FullHashCacheInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.FullHashCacheInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 number_of_hits = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number_of_hits(), output);
  }

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->full_hash_cache_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->full_hash_cache(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.FullHashCacheInfo)
}

size_t FullHashCacheInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.FullHashCacheInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->full_hash_cache_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->full_hash_cache(static_cast<int>(i)));
    }
  }

  // optional int32 number_of_hits = 1;
  if (has_number_of_hits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number_of_hits());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullHashCacheInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FullHashCacheInfo*>(&from));
}

void FullHashCacheInfo::MergeFrom(const FullHashCacheInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.FullHashCacheInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  full_hash_cache_.MergeFrom(from.full_hash_cache_);
  if (from.has_number_of_hits()) {
    set_number_of_hits(from.number_of_hits());
  }
}

void FullHashCacheInfo::CopyFrom(const FullHashCacheInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.FullHashCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullHashCacheInfo::IsInitialized() const {
  return true;
}

void FullHashCacheInfo::Swap(FullHashCacheInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullHashCacheInfo::InternalSwap(FullHashCacheInfo* other) {
  full_hash_cache_.InternalSwap(&other->full_hash_cache_);
  std::swap(number_of_hits_, other->number_of_hits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FullHashCacheInfo::GetTypeName() const {
  return "safe_browsing.FullHashCacheInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullHashCacheInfo

// optional int32 number_of_hits = 1;
bool FullHashCacheInfo::has_number_of_hits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FullHashCacheInfo::set_has_number_of_hits() {
  _has_bits_[0] |= 0x00000001u;
}
void FullHashCacheInfo::clear_has_number_of_hits() {
  _has_bits_[0] &= ~0x00000001u;
}
void FullHashCacheInfo::clear_number_of_hits() {
  number_of_hits_ = 0;
  clear_has_number_of_hits();
}
::google::protobuf::int32 FullHashCacheInfo::number_of_hits() const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.number_of_hits)
  return number_of_hits_;
}
void FullHashCacheInfo::set_number_of_hits(::google::protobuf::int32 value) {
  set_has_number_of_hits();
  number_of_hits_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.FullHashCacheInfo.number_of_hits)
}

// repeated .safe_browsing.FullHashCacheInfo.FullHashCache full_hash_cache = 2;
int FullHashCacheInfo::full_hash_cache_size() const {
  return full_hash_cache_.size();
}
void FullHashCacheInfo::clear_full_hash_cache() {
  full_hash_cache_.Clear();
}
const ::safe_browsing::FullHashCacheInfo_FullHashCache& FullHashCacheInfo::full_hash_cache(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return full_hash_cache_.Get(index);
}
::safe_browsing::FullHashCacheInfo_FullHashCache* FullHashCacheInfo::mutable_full_hash_cache(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return full_hash_cache_.Mutable(index);
}
::safe_browsing::FullHashCacheInfo_FullHashCache* FullHashCacheInfo::add_full_hash_cache() {
  // @@protoc_insertion_point(field_add:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return full_hash_cache_.Add();
}
::google::protobuf::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache >*
FullHashCacheInfo::mutable_full_hash_cache() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return &full_hash_cache_;
}
const ::google::protobuf::RepeatedPtrField< ::safe_browsing::FullHashCacheInfo_FullHashCache >&
FullHashCacheInfo::full_hash_cache() const {
  // @@protoc_insertion_point(field_list:safe_browsing.FullHashCacheInfo.full_hash_cache)
  return full_hash_cache_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

// @@protoc_insertion_point(global_scope)
