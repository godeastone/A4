// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: permuted_entropy_cache.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "permuted_entropy_cache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace variations {
class PermutedEntropyCache_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PermutedEntropyCache_Entry> {
} _PermutedEntropyCache_Entry_default_instance_;
class PermutedEntropyCacheDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PermutedEntropyCache> {
} _PermutedEntropyCache_default_instance_;

namespace protobuf_permuted_5fentropy_5fcache_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _PermutedEntropyCache_Entry_default_instance_.Shutdown();
  _PermutedEntropyCache_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PermutedEntropyCache_Entry_default_instance_.DefaultConstruct();
  _PermutedEntropyCache_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_permuted_5fentropy_5fcache_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermutedEntropyCache_Entry::kRandomizationSeedFieldNumber;
const int PermutedEntropyCache_Entry::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermutedEntropyCache_Entry::PermutedEntropyCache_Entry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_permuted_5fentropy_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:variations.PermutedEntropyCache.Entry)
}
PermutedEntropyCache_Entry::PermutedEntropyCache_Entry(const PermutedEntropyCache_Entry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&randomization_seed_, &from.randomization_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&randomization_seed_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:variations.PermutedEntropyCache.Entry)
}

void PermutedEntropyCache_Entry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&randomization_seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&randomization_seed_)) + sizeof(value_));
}

PermutedEntropyCache_Entry::~PermutedEntropyCache_Entry() {
  // @@protoc_insertion_point(destructor:variations.PermutedEntropyCache.Entry)
  SharedDtor();
}

void PermutedEntropyCache_Entry::SharedDtor() {
}

void PermutedEntropyCache_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PermutedEntropyCache_Entry& PermutedEntropyCache_Entry::default_instance() {
  protobuf_permuted_5fentropy_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

PermutedEntropyCache_Entry* PermutedEntropyCache_Entry::New(::google::protobuf::Arena* arena) const {
  PermutedEntropyCache_Entry* n = new PermutedEntropyCache_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PermutedEntropyCache_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:variations.PermutedEntropyCache.Entry)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&randomization_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&randomization_seed_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PermutedEntropyCache_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:variations.PermutedEntropyCache.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 randomization_seed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_randomization_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randomization_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:variations.PermutedEntropyCache.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:variations.PermutedEntropyCache.Entry)
  return false;
#undef DO_
}

void PermutedEntropyCache_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:variations.PermutedEntropyCache.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 randomization_seed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->randomization_seed(), output);
  }

  // required uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:variations.PermutedEntropyCache.Entry)
}

size_t PermutedEntropyCache_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:variations.PermutedEntropyCache.Entry)
  size_t total_size = 0;

  if (has_randomization_seed()) {
    // required uint32 randomization_seed = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->randomization_seed());
  }

  if (has_value()) {
    // required uint32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  return total_size;
}
size_t PermutedEntropyCache_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:variations.PermutedEntropyCache.Entry)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 randomization_seed = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->randomization_seed());

    // required uint32 value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermutedEntropyCache_Entry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PermutedEntropyCache_Entry*>(&from));
}

void PermutedEntropyCache_Entry::MergeFrom(const PermutedEntropyCache_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:variations.PermutedEntropyCache.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      randomization_seed_ = from.randomization_seed_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PermutedEntropyCache_Entry::CopyFrom(const PermutedEntropyCache_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:variations.PermutedEntropyCache.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermutedEntropyCache_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PermutedEntropyCache_Entry::Swap(PermutedEntropyCache_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermutedEntropyCache_Entry::InternalSwap(PermutedEntropyCache_Entry* other) {
  std::swap(randomization_seed_, other->randomization_seed_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PermutedEntropyCache_Entry::GetTypeName() const {
  return "variations.PermutedEntropyCache.Entry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PermutedEntropyCache_Entry

// required uint32 randomization_seed = 1;
bool PermutedEntropyCache_Entry::has_randomization_seed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PermutedEntropyCache_Entry::set_has_randomization_seed() {
  _has_bits_[0] |= 0x00000001u;
}
void PermutedEntropyCache_Entry::clear_has_randomization_seed() {
  _has_bits_[0] &= ~0x00000001u;
}
void PermutedEntropyCache_Entry::clear_randomization_seed() {
  randomization_seed_ = 0u;
  clear_has_randomization_seed();
}
::google::protobuf::uint32 PermutedEntropyCache_Entry::randomization_seed() const {
  // @@protoc_insertion_point(field_get:variations.PermutedEntropyCache.Entry.randomization_seed)
  return randomization_seed_;
}
void PermutedEntropyCache_Entry::set_randomization_seed(::google::protobuf::uint32 value) {
  set_has_randomization_seed();
  randomization_seed_ = value;
  // @@protoc_insertion_point(field_set:variations.PermutedEntropyCache.Entry.randomization_seed)
}

// required uint32 value = 2;
bool PermutedEntropyCache_Entry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PermutedEntropyCache_Entry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void PermutedEntropyCache_Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void PermutedEntropyCache_Entry::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 PermutedEntropyCache_Entry::value() const {
  // @@protoc_insertion_point(field_get:variations.PermutedEntropyCache.Entry.value)
  return value_;
}
void PermutedEntropyCache_Entry::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:variations.PermutedEntropyCache.Entry.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PermutedEntropyCache::kEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PermutedEntropyCache::PermutedEntropyCache()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_permuted_5fentropy_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:variations.PermutedEntropyCache)
}
PermutedEntropyCache::PermutedEntropyCache(const PermutedEntropyCache& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:variations.PermutedEntropyCache)
}

void PermutedEntropyCache::SharedCtor() {
  _cached_size_ = 0;
}

PermutedEntropyCache::~PermutedEntropyCache() {
  // @@protoc_insertion_point(destructor:variations.PermutedEntropyCache)
  SharedDtor();
}

void PermutedEntropyCache::SharedDtor() {
}

void PermutedEntropyCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PermutedEntropyCache& PermutedEntropyCache::default_instance() {
  protobuf_permuted_5fentropy_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

PermutedEntropyCache* PermutedEntropyCache::New(::google::protobuf::Arena* arena) const {
  PermutedEntropyCache* n = new PermutedEntropyCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PermutedEntropyCache::Clear() {
// @@protoc_insertion_point(message_clear_start:variations.PermutedEntropyCache)
  entry_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PermutedEntropyCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:variations.PermutedEntropyCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .variations.PermutedEntropyCache.Entry entry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:variations.PermutedEntropyCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:variations.PermutedEntropyCache)
  return false;
#undef DO_
}

void PermutedEntropyCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:variations.PermutedEntropyCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .variations.PermutedEntropyCache.Entry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entry(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:variations.PermutedEntropyCache)
}

size_t PermutedEntropyCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:variations.PermutedEntropyCache)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .variations.PermutedEntropyCache.Entry entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermutedEntropyCache::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PermutedEntropyCache*>(&from));
}

void PermutedEntropyCache::MergeFrom(const PermutedEntropyCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:variations.PermutedEntropyCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
}

void PermutedEntropyCache::CopyFrom(const PermutedEntropyCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:variations.PermutedEntropyCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermutedEntropyCache::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->entry())) return false;
  return true;
}

void PermutedEntropyCache::Swap(PermutedEntropyCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermutedEntropyCache::InternalSwap(PermutedEntropyCache* other) {
  entry_.InternalSwap(&other->entry_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PermutedEntropyCache::GetTypeName() const {
  return "variations.PermutedEntropyCache";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PermutedEntropyCache

// repeated .variations.PermutedEntropyCache.Entry entry = 1;
int PermutedEntropyCache::entry_size() const {
  return entry_.size();
}
void PermutedEntropyCache::clear_entry() {
  entry_.Clear();
}
const ::variations::PermutedEntropyCache_Entry& PermutedEntropyCache::entry(int index) const {
  // @@protoc_insertion_point(field_get:variations.PermutedEntropyCache.entry)
  return entry_.Get(index);
}
::variations::PermutedEntropyCache_Entry* PermutedEntropyCache::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:variations.PermutedEntropyCache.entry)
  return entry_.Mutable(index);
}
::variations::PermutedEntropyCache_Entry* PermutedEntropyCache::add_entry() {
  // @@protoc_insertion_point(field_add:variations.PermutedEntropyCache.entry)
  return entry_.Add();
}
::google::protobuf::RepeatedPtrField< ::variations::PermutedEntropyCache_Entry >*
PermutedEntropyCache::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:variations.PermutedEntropyCache.entry)
  return &entry_;
}
const ::google::protobuf::RepeatedPtrField< ::variations::PermutedEntropyCache_Entry >&
PermutedEntropyCache::entry() const {
  // @@protoc_insertion_point(field_list:variations.PermutedEntropyCache.entry)
  return entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace variations

// @@protoc_insertion_point(global_scope)
