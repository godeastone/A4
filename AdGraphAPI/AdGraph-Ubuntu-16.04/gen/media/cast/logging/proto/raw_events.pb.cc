// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw_events.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raw_events.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace media {
namespace cast {
namespace proto {
class GeneralDescriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GeneralDescription> {
} _GeneralDescription_default_instance_;
class LogMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogMetadata> {
} _LogMetadata_default_instance_;
class AggregatedFrameEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AggregatedFrameEvent> {
} _AggregatedFrameEvent_default_instance_;
class BasePacketEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BasePacketEvent> {
} _BasePacketEvent_default_instance_;
class AggregatedPacketEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AggregatedPacketEvent> {
} _AggregatedPacketEvent_default_instance_;

namespace protobuf_raw_5fevents_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _GeneralDescription_default_instance_.Shutdown();
  _LogMetadata_default_instance_.Shutdown();
  _AggregatedFrameEvent_default_instance_.Shutdown();
  _BasePacketEvent_default_instance_.Shutdown();
  _AggregatedPacketEvent_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GeneralDescription_default_instance_.DefaultConstruct();
  _LogMetadata_default_instance_.DefaultConstruct();
  _AggregatedFrameEvent_default_instance_.DefaultConstruct();
  _BasePacketEvent_default_instance_.DefaultConstruct();
  _AggregatedPacketEvent_default_instance_.DefaultConstruct();
  _LogMetadata_default_instance_.get_mutable()->general_description_ = const_cast< ::media::cast::proto::GeneralDescription*>(
      ::media::cast::proto::GeneralDescription::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_raw_5fevents_2eproto

bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralDescription::kProductFieldNumber;
const int GeneralDescription::kProductVersionFieldNumber;
const int GeneralDescription::kOsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralDescription::GeneralDescription()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raw_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.GeneralDescription)
}
GeneralDescription::GeneralDescription(const GeneralDescription& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product()) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  product_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_version()) {
    product_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_version_);
  }
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os()) {
    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.GeneralDescription)
}

void GeneralDescription::SharedCtor() {
  _cached_size_ = 0;
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GeneralDescription::~GeneralDescription() {
  // @@protoc_insertion_point(destructor:media.cast.proto.GeneralDescription)
  SharedDtor();
}

void GeneralDescription::SharedDtor() {
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeneralDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GeneralDescription& GeneralDescription::default_instance() {
  protobuf_raw_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

GeneralDescription* GeneralDescription::New(::google::protobuf::Arena* arena) const {
  GeneralDescription* n = new GeneralDescription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeneralDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.GeneralDescription)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_product()) {
      GOOGLE_DCHECK(!product_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*product_.UnsafeRawStringPointer())->clear();
    }
    if (has_product_version()) {
      GOOGLE_DCHECK(!product_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*product_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_os()) {
      GOOGLE_DCHECK(!os_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*os_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeneralDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.GeneralDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.GeneralDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.GeneralDescription)
  return false;
#undef DO_
}

void GeneralDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.GeneralDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string product = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product(), output);
  }

  // optional string product_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_version(), output);
  }

  // optional string os = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.GeneralDescription)
}

size_t GeneralDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.GeneralDescription)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string product = 1;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional string product_version = 2;
    if (has_product_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_version());
    }

    // optional string os = 3;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralDescription::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GeneralDescription*>(&from));
}

void GeneralDescription::MergeFrom(const GeneralDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.GeneralDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_product();
      product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_product_version();
      product_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_os();
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
  }
}

void GeneralDescription::CopyFrom(const GeneralDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.GeneralDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralDescription::IsInitialized() const {
  return true;
}

void GeneralDescription::Swap(GeneralDescription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralDescription::InternalSwap(GeneralDescription* other) {
  product_.Swap(&other->product_);
  product_version_.Swap(&other->product_version_);
  os_.Swap(&other->os_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GeneralDescription::GetTypeName() const {
  return "media.cast.proto.GeneralDescription";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeneralDescription

// optional string product = 1;
bool GeneralDescription::has_product() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeneralDescription::set_has_product() {
  _has_bits_[0] |= 0x00000001u;
}
void GeneralDescription::clear_has_product() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeneralDescription::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product();
}
const ::std::string& GeneralDescription::product() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.GeneralDescription.product)
  return product_.GetNoArena();
}
void GeneralDescription::set_product(const ::std::string& value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media.cast.proto.GeneralDescription.product)
}
#if LANG_CXX11
void GeneralDescription::set_product(::std::string&& value) {
  set_has_product();
  product_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media.cast.proto.GeneralDescription.product)
}
#endif
void GeneralDescription::set_product(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media.cast.proto.GeneralDescription.product)
}
void GeneralDescription::set_product(const char* value, size_t size) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media.cast.proto.GeneralDescription.product)
}
::std::string* GeneralDescription::mutable_product() {
  set_has_product();
  // @@protoc_insertion_point(field_mutable:media.cast.proto.GeneralDescription.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GeneralDescription::release_product() {
  // @@protoc_insertion_point(field_release:media.cast.proto.GeneralDescription.product)
  clear_has_product();
  return product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GeneralDescription::set_allocated_product(::std::string* product) {
  if (product != NULL) {
    set_has_product();
  } else {
    clear_has_product();
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.GeneralDescription.product)
}

// optional string product_version = 2;
bool GeneralDescription::has_product_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeneralDescription::set_has_product_version() {
  _has_bits_[0] |= 0x00000002u;
}
void GeneralDescription::clear_has_product_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeneralDescription::clear_product_version() {
  product_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_version();
}
const ::std::string& GeneralDescription::product_version() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.GeneralDescription.product_version)
  return product_version_.GetNoArena();
}
void GeneralDescription::set_product_version(const ::std::string& value) {
  set_has_product_version();
  product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media.cast.proto.GeneralDescription.product_version)
}
#if LANG_CXX11
void GeneralDescription::set_product_version(::std::string&& value) {
  set_has_product_version();
  product_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media.cast.proto.GeneralDescription.product_version)
}
#endif
void GeneralDescription::set_product_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_version();
  product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media.cast.proto.GeneralDescription.product_version)
}
void GeneralDescription::set_product_version(const char* value, size_t size) {
  set_has_product_version();
  product_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media.cast.proto.GeneralDescription.product_version)
}
::std::string* GeneralDescription::mutable_product_version() {
  set_has_product_version();
  // @@protoc_insertion_point(field_mutable:media.cast.proto.GeneralDescription.product_version)
  return product_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GeneralDescription::release_product_version() {
  // @@protoc_insertion_point(field_release:media.cast.proto.GeneralDescription.product_version)
  clear_has_product_version();
  return product_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GeneralDescription::set_allocated_product_version(::std::string* product_version) {
  if (product_version != NULL) {
    set_has_product_version();
  } else {
    clear_has_product_version();
  }
  product_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_version);
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.GeneralDescription.product_version)
}

// optional string os = 3;
bool GeneralDescription::has_os() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GeneralDescription::set_has_os() {
  _has_bits_[0] |= 0x00000004u;
}
void GeneralDescription::clear_has_os() {
  _has_bits_[0] &= ~0x00000004u;
}
void GeneralDescription::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os();
}
const ::std::string& GeneralDescription::os() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.GeneralDescription.os)
  return os_.GetNoArena();
}
void GeneralDescription::set_os(const ::std::string& value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media.cast.proto.GeneralDescription.os)
}
#if LANG_CXX11
void GeneralDescription::set_os(::std::string&& value) {
  set_has_os();
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media.cast.proto.GeneralDescription.os)
}
#endif
void GeneralDescription::set_os(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media.cast.proto.GeneralDescription.os)
}
void GeneralDescription::set_os(const char* value, size_t size) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media.cast.proto.GeneralDescription.os)
}
::std::string* GeneralDescription::mutable_os() {
  set_has_os();
  // @@protoc_insertion_point(field_mutable:media.cast.proto.GeneralDescription.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GeneralDescription::release_os() {
  // @@protoc_insertion_point(field_release:media.cast.proto.GeneralDescription.os)
  clear_has_os();
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GeneralDescription::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    set_has_os();
  } else {
    clear_has_os();
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.GeneralDescription.os)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogMetadata::kIsAudioFieldNumber;
const int LogMetadata::kFirstRtpTimestampFieldNumber;
const int LogMetadata::kNumFrameEventsFieldNumber;
const int LogMetadata::kNumPacketEventsFieldNumber;
const int LogMetadata::kReferenceTimestampMsAtUnixEpochFieldNumber;
const int LogMetadata::kExtraDataFieldNumber;
const int LogMetadata::kGeneralDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogMetadata::LogMetadata()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raw_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.LogMetadata)
}
LogMetadata::LogMetadata(const LogMetadata& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_data()) {
    extra_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
  }
  if (from.has_general_description()) {
    general_description_ = new ::media::cast::proto::GeneralDescription(*from.general_description_);
  } else {
    general_description_ = NULL;
  }
  ::memcpy(&is_audio_, &from.is_audio_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_timestamp_ms_at_unix_epoch_) -
    reinterpret_cast<char*>(&is_audio_)) + sizeof(reference_timestamp_ms_at_unix_epoch_));
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.LogMetadata)
}

void LogMetadata::SharedCtor() {
  _cached_size_ = 0;
  extra_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&general_description_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_timestamp_ms_at_unix_epoch_) -
      reinterpret_cast<char*>(&general_description_)) + sizeof(reference_timestamp_ms_at_unix_epoch_));
}

LogMetadata::~LogMetadata() {
  // @@protoc_insertion_point(destructor:media.cast.proto.LogMetadata)
  SharedDtor();
}

void LogMetadata::SharedDtor() {
  extra_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete general_description_;
  }
}

void LogMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogMetadata& LogMetadata::default_instance() {
  protobuf_raw_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogMetadata* LogMetadata::New(::google::protobuf::Arena* arena) const {
  LogMetadata* n = new LogMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.LogMetadata)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_extra_data()) {
      GOOGLE_DCHECK(!extra_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extra_data_.UnsafeRawStringPointer())->clear();
    }
    if (has_general_description()) {
      GOOGLE_DCHECK(general_description_ != NULL);
      general_description_->::media::cast::proto::GeneralDescription::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&is_audio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reference_timestamp_ms_at_unix_epoch_) -
        reinterpret_cast<char*>(&is_audio_)) + sizeof(reference_timestamp_ms_at_unix_epoch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.LogMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_audio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_audio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_audio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_rtp_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_first_rtp_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_frame_events = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_frame_events();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_frame_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_packet_events = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_num_packet_events();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_packet_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_reference_timestamp_ms_at_unix_epoch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reference_timestamp_ms_at_unix_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extra_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.cast.proto.GeneralDescription general_description = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_general_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.LogMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.LogMetadata)
  return false;
#undef DO_
}

void LogMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.LogMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_audio = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_audio(), output);
  }

  // optional uint32 first_rtp_timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first_rtp_timestamp(), output);
  }

  // optional int32 num_frame_events = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_frame_events(), output);
  }

  // optional int32 num_packet_events = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_packet_events(), output);
  }

  // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->reference_timestamp_ms_at_unix_epoch(), output);
  }

  // optional string extra_data = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->extra_data(), output);
  }

  // optional .media.cast.proto.GeneralDescription general_description = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->general_description_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.LogMetadata)
}

size_t LogMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.LogMetadata)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional string extra_data = 6;
    if (has_extra_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_data());
    }

    // optional .media.cast.proto.GeneralDescription general_description = 7;
    if (has_general_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->general_description_);
    }

    // optional bool is_audio = 1;
    if (has_is_audio()) {
      total_size += 1 + 1;
    }

    // optional uint32 first_rtp_timestamp = 2;
    if (has_first_rtp_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_rtp_timestamp());
    }

    // optional int32 num_frame_events = 3;
    if (has_num_frame_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_frame_events());
    }

    // optional int32 num_packet_events = 4;
    if (has_num_packet_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_packet_events());
    }

    // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
    if (has_reference_timestamp_ms_at_unix_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reference_timestamp_ms_at_unix_epoch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogMetadata*>(&from));
}

void LogMetadata::MergeFrom(const LogMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.LogMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_extra_data();
      extra_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_general_description()->::media::cast::proto::GeneralDescription::MergeFrom(from.general_description());
    }
    if (cached_has_bits & 0x00000004u) {
      is_audio_ = from.is_audio_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_rtp_timestamp_ = from.first_rtp_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_frame_events_ = from.num_frame_events_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_packet_events_ = from.num_packet_events_;
    }
    if (cached_has_bits & 0x00000040u) {
      reference_timestamp_ms_at_unix_epoch_ = from.reference_timestamp_ms_at_unix_epoch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogMetadata::CopyFrom(const LogMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.LogMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetadata::IsInitialized() const {
  return true;
}

void LogMetadata::Swap(LogMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogMetadata::InternalSwap(LogMetadata* other) {
  extra_data_.Swap(&other->extra_data_);
  std::swap(general_description_, other->general_description_);
  std::swap(is_audio_, other->is_audio_);
  std::swap(first_rtp_timestamp_, other->first_rtp_timestamp_);
  std::swap(num_frame_events_, other->num_frame_events_);
  std::swap(num_packet_events_, other->num_packet_events_);
  std::swap(reference_timestamp_ms_at_unix_epoch_, other->reference_timestamp_ms_at_unix_epoch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogMetadata::GetTypeName() const {
  return "media.cast.proto.LogMetadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogMetadata

// optional bool is_audio = 1;
bool LogMetadata::has_is_audio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogMetadata::set_has_is_audio() {
  _has_bits_[0] |= 0x00000004u;
}
void LogMetadata::clear_has_is_audio() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogMetadata::clear_is_audio() {
  is_audio_ = false;
  clear_has_is_audio();
}
bool LogMetadata::is_audio() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.is_audio)
  return is_audio_;
}
void LogMetadata::set_is_audio(bool value) {
  set_has_is_audio();
  is_audio_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.is_audio)
}

// optional uint32 first_rtp_timestamp = 2;
bool LogMetadata::has_first_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogMetadata::set_has_first_rtp_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void LogMetadata::clear_has_first_rtp_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogMetadata::clear_first_rtp_timestamp() {
  first_rtp_timestamp_ = 0u;
  clear_has_first_rtp_timestamp();
}
::google::protobuf::uint32 LogMetadata::first_rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.first_rtp_timestamp)
  return first_rtp_timestamp_;
}
void LogMetadata::set_first_rtp_timestamp(::google::protobuf::uint32 value) {
  set_has_first_rtp_timestamp();
  first_rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.first_rtp_timestamp)
}

// optional int32 num_frame_events = 3;
bool LogMetadata::has_num_frame_events() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogMetadata::set_has_num_frame_events() {
  _has_bits_[0] |= 0x00000010u;
}
void LogMetadata::clear_has_num_frame_events() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogMetadata::clear_num_frame_events() {
  num_frame_events_ = 0;
  clear_has_num_frame_events();
}
::google::protobuf::int32 LogMetadata::num_frame_events() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.num_frame_events)
  return num_frame_events_;
}
void LogMetadata::set_num_frame_events(::google::protobuf::int32 value) {
  set_has_num_frame_events();
  num_frame_events_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.num_frame_events)
}

// optional int32 num_packet_events = 4;
bool LogMetadata::has_num_packet_events() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogMetadata::set_has_num_packet_events() {
  _has_bits_[0] |= 0x00000020u;
}
void LogMetadata::clear_has_num_packet_events() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogMetadata::clear_num_packet_events() {
  num_packet_events_ = 0;
  clear_has_num_packet_events();
}
::google::protobuf::int32 LogMetadata::num_packet_events() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.num_packet_events)
  return num_packet_events_;
}
void LogMetadata::set_num_packet_events(::google::protobuf::int32 value) {
  set_has_num_packet_events();
  num_packet_events_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.num_packet_events)
}

// optional int64 reference_timestamp_ms_at_unix_epoch = 5;
bool LogMetadata::has_reference_timestamp_ms_at_unix_epoch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LogMetadata::set_has_reference_timestamp_ms_at_unix_epoch() {
  _has_bits_[0] |= 0x00000040u;
}
void LogMetadata::clear_has_reference_timestamp_ms_at_unix_epoch() {
  _has_bits_[0] &= ~0x00000040u;
}
void LogMetadata::clear_reference_timestamp_ms_at_unix_epoch() {
  reference_timestamp_ms_at_unix_epoch_ = GOOGLE_LONGLONG(0);
  clear_has_reference_timestamp_ms_at_unix_epoch();
}
::google::protobuf::int64 LogMetadata::reference_timestamp_ms_at_unix_epoch() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.reference_timestamp_ms_at_unix_epoch)
  return reference_timestamp_ms_at_unix_epoch_;
}
void LogMetadata::set_reference_timestamp_ms_at_unix_epoch(::google::protobuf::int64 value) {
  set_has_reference_timestamp_ms_at_unix_epoch();
  reference_timestamp_ms_at_unix_epoch_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.reference_timestamp_ms_at_unix_epoch)
}

// optional string extra_data = 6;
bool LogMetadata::has_extra_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogMetadata::set_has_extra_data() {
  _has_bits_[0] |= 0x00000001u;
}
void LogMetadata::clear_has_extra_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogMetadata::clear_extra_data() {
  extra_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extra_data();
}
const ::std::string& LogMetadata::extra_data() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.extra_data)
  return extra_data_.GetNoArena();
}
void LogMetadata::set_extra_data(const ::std::string& value) {
  set_has_extra_data();
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.extra_data)
}
#if LANG_CXX11
void LogMetadata::set_extra_data(::std::string&& value) {
  set_has_extra_data();
  extra_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media.cast.proto.LogMetadata.extra_data)
}
#endif
void LogMetadata::set_extra_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_extra_data();
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media.cast.proto.LogMetadata.extra_data)
}
void LogMetadata::set_extra_data(const char* value, size_t size) {
  set_has_extra_data();
  extra_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media.cast.proto.LogMetadata.extra_data)
}
::std::string* LogMetadata::mutable_extra_data() {
  set_has_extra_data();
  // @@protoc_insertion_point(field_mutable:media.cast.proto.LogMetadata.extra_data)
  return extra_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogMetadata::release_extra_data() {
  // @@protoc_insertion_point(field_release:media.cast.proto.LogMetadata.extra_data)
  clear_has_extra_data();
  return extra_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogMetadata::set_allocated_extra_data(::std::string* extra_data) {
  if (extra_data != NULL) {
    set_has_extra_data();
  } else {
    clear_has_extra_data();
  }
  extra_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_data);
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.LogMetadata.extra_data)
}

// optional .media.cast.proto.GeneralDescription general_description = 7;
bool LogMetadata::has_general_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogMetadata::set_has_general_description() {
  _has_bits_[0] |= 0x00000002u;
}
void LogMetadata::clear_has_general_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogMetadata::clear_general_description() {
  if (general_description_ != NULL) general_description_->::media::cast::proto::GeneralDescription::Clear();
  clear_has_general_description();
}
const ::media::cast::proto::GeneralDescription& LogMetadata::general_description() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.general_description)
  return general_description_ != NULL ? *general_description_
                         : *::media::cast::proto::GeneralDescription::internal_default_instance();
}
::media::cast::proto::GeneralDescription* LogMetadata::mutable_general_description() {
  set_has_general_description();
  if (general_description_ == NULL) {
    general_description_ = new ::media::cast::proto::GeneralDescription;
  }
  // @@protoc_insertion_point(field_mutable:media.cast.proto.LogMetadata.general_description)
  return general_description_;
}
::media::cast::proto::GeneralDescription* LogMetadata::release_general_description() {
  // @@protoc_insertion_point(field_release:media.cast.proto.LogMetadata.general_description)
  clear_has_general_description();
  ::media::cast::proto::GeneralDescription* temp = general_description_;
  general_description_ = NULL;
  return temp;
}
void LogMetadata::set_allocated_general_description(::media::cast::proto::GeneralDescription* general_description) {
  delete general_description_;
  general_description_ = general_description;
  if (general_description) {
    set_has_general_description();
  } else {
    clear_has_general_description();
  }
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.LogMetadata.general_description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AggregatedFrameEvent::kRelativeRtpTimestampFieldNumber;
const int AggregatedFrameEvent::kEventTypeFieldNumber;
const int AggregatedFrameEvent::kEventTimestampMsFieldNumber;
const int AggregatedFrameEvent::kEncodedFrameSizeFieldNumber;
const int AggregatedFrameEvent::kDelayMillisFieldNumber;
const int AggregatedFrameEvent::kKeyFrameFieldNumber;
const int AggregatedFrameEvent::kTargetBitrateFieldNumber;
const int AggregatedFrameEvent::kWidthFieldNumber;
const int AggregatedFrameEvent::kHeightFieldNumber;
const int AggregatedFrameEvent::kEncoderCpuPercentUtilizedFieldNumber;
const int AggregatedFrameEvent::kIdealizedBitratePercentUtilizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AggregatedFrameEvent::AggregatedFrameEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raw_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.AggregatedFrameEvent)
}
AggregatedFrameEvent::AggregatedFrameEvent(const AggregatedFrameEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      event_type_(from.event_type_),
      event_timestamp_ms_(from.event_timestamp_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relative_rtp_timestamp_, &from.relative_rtp_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&idealized_bitrate_percent_utilized_) -
    reinterpret_cast<char*>(&relative_rtp_timestamp_)) + sizeof(idealized_bitrate_percent_utilized_));
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.AggregatedFrameEvent)
}

void AggregatedFrameEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&relative_rtp_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idealized_bitrate_percent_utilized_) -
      reinterpret_cast<char*>(&relative_rtp_timestamp_)) + sizeof(idealized_bitrate_percent_utilized_));
}

AggregatedFrameEvent::~AggregatedFrameEvent() {
  // @@protoc_insertion_point(destructor:media.cast.proto.AggregatedFrameEvent)
  SharedDtor();
}

void AggregatedFrameEvent::SharedDtor() {
}

void AggregatedFrameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AggregatedFrameEvent& AggregatedFrameEvent::default_instance() {
  protobuf_raw_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

AggregatedFrameEvent* AggregatedFrameEvent::New(::google::protobuf::Arena* arena) const {
  AggregatedFrameEvent* n = new AggregatedFrameEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AggregatedFrameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.AggregatedFrameEvent)
  event_type_.Clear();
  event_timestamp_ms_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&relative_rtp_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encoder_cpu_percent_utilized_) -
        reinterpret_cast<char*>(&relative_rtp_timestamp_)) + sizeof(encoder_cpu_percent_utilized_));
  }
  idealized_bitrate_percent_utilized_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AggregatedFrameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.AggregatedFrameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_relative_rtp_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relative_rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::media::cast::proto::EventType_IsValid(value)) {
              add_event_type(static_cast< ::media::cast::proto::EventType >(value));
            } else {
              unknown_fields_stream.WriteVarint32(tag);
              unknown_fields_stream.WriteVarint32(
                  static_cast< ::google::protobuf::uint32>(value));
            }
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::cast::proto::EventType_IsValid(value)) {
            add_event_type(static_cast< ::media::cast::proto::EventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_event_timestamp_ms())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_event_timestamp_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 encoded_frame_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_encoded_frame_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoded_frame_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 delay_millis = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_delay_millis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool key_frame = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_key_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_bitrate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_target_bitrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_bitrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 encoder_cpu_percent_utilized = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_encoder_cpu_percent_utilized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoder_cpu_percent_utilized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 idealized_bitrate_percent_utilized = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_idealized_bitrate_percent_utilized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idealized_bitrate_percent_utilized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.AggregatedFrameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.AggregatedFrameEvent)
  return false;
#undef DO_
}

void AggregatedFrameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.AggregatedFrameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 relative_rtp_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->relative_rtp_timestamp(), output);
  }

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  if (this->event_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_event_type_cached_byte_size_));
  }
  for (int i = 0, n = this->event_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->event_type(i), output);
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  if (this->event_timestamp_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _event_timestamp_ms_cached_byte_size_));
  }
  for (int i = 0, n = this->event_timestamp_ms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->event_timestamp_ms(i), output);
  }

  // optional int32 encoded_frame_size = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->encoded_frame_size(), output);
  }

  // optional int64 delay_millis = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->delay_millis(), output);
  }

  // optional bool key_frame = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->key_frame(), output);
  }

  // optional int32 target_bitrate = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->target_bitrate(), output);
  }

  // optional int32 width = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->width(), output);
  }

  // optional int32 height = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->height(), output);
  }

  // optional int32 encoder_cpu_percent_utilized = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->encoder_cpu_percent_utilized(), output);
  }

  // optional int32 idealized_bitrate_percent_utilized = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->idealized_bitrate_percent_utilized(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.AggregatedFrameEvent)
}

size_t AggregatedFrameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.AggregatedFrameEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->event_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->event_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _event_type_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->event_timestamp_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _event_timestamp_ms_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 relative_rtp_timestamp = 1;
    if (has_relative_rtp_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relative_rtp_timestamp());
    }

    // optional int32 encoded_frame_size = 4;
    if (has_encoded_frame_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encoded_frame_size());
    }

    // optional int64 delay_millis = 5;
    if (has_delay_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->delay_millis());
    }

    // optional bool key_frame = 6;
    if (has_key_frame()) {
      total_size += 1 + 1;
    }

    // optional int32 target_bitrate = 7;
    if (has_target_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_bitrate());
    }

    // optional int32 width = 8;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 9;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 encoder_cpu_percent_utilized = 10;
    if (has_encoder_cpu_percent_utilized()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encoder_cpu_percent_utilized());
    }

  }
  // optional int32 idealized_bitrate_percent_utilized = 11;
  if (has_idealized_bitrate_percent_utilized()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->idealized_bitrate_percent_utilized());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatedFrameEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AggregatedFrameEvent*>(&from));
}

void AggregatedFrameEvent::MergeFrom(const AggregatedFrameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.AggregatedFrameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_type_.MergeFrom(from.event_type_);
  event_timestamp_ms_.MergeFrom(from.event_timestamp_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      relative_rtp_timestamp_ = from.relative_rtp_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      encoded_frame_size_ = from.encoded_frame_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      delay_millis_ = from.delay_millis_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_frame_ = from.key_frame_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_bitrate_ = from.target_bitrate_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      encoder_cpu_percent_utilized_ = from.encoder_cpu_percent_utilized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_idealized_bitrate_percent_utilized(from.idealized_bitrate_percent_utilized());
  }
}

void AggregatedFrameEvent::CopyFrom(const AggregatedFrameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.AggregatedFrameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedFrameEvent::IsInitialized() const {
  return true;
}

void AggregatedFrameEvent::Swap(AggregatedFrameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AggregatedFrameEvent::InternalSwap(AggregatedFrameEvent* other) {
  event_type_.InternalSwap(&other->event_type_);
  event_timestamp_ms_.InternalSwap(&other->event_timestamp_ms_);
  std::swap(relative_rtp_timestamp_, other->relative_rtp_timestamp_);
  std::swap(encoded_frame_size_, other->encoded_frame_size_);
  std::swap(delay_millis_, other->delay_millis_);
  std::swap(key_frame_, other->key_frame_);
  std::swap(target_bitrate_, other->target_bitrate_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(encoder_cpu_percent_utilized_, other->encoder_cpu_percent_utilized_);
  std::swap(idealized_bitrate_percent_utilized_, other->idealized_bitrate_percent_utilized_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AggregatedFrameEvent::GetTypeName() const {
  return "media.cast.proto.AggregatedFrameEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AggregatedFrameEvent

// optional uint32 relative_rtp_timestamp = 1;
bool AggregatedFrameEvent::has_relative_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AggregatedFrameEvent::set_has_relative_rtp_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void AggregatedFrameEvent::clear_has_relative_rtp_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void AggregatedFrameEvent::clear_relative_rtp_timestamp() {
  relative_rtp_timestamp_ = 0u;
  clear_has_relative_rtp_timestamp();
}
::google::protobuf::uint32 AggregatedFrameEvent::relative_rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.relative_rtp_timestamp)
  return relative_rtp_timestamp_;
}
void AggregatedFrameEvent::set_relative_rtp_timestamp(::google::protobuf::uint32 value) {
  set_has_relative_rtp_timestamp();
  relative_rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.relative_rtp_timestamp)
}

// repeated .media.cast.proto.EventType event_type = 2 [packed = true];
int AggregatedFrameEvent::event_type_size() const {
  return event_type_.size();
}
void AggregatedFrameEvent::clear_event_type() {
  event_type_.Clear();
}
::media::cast::proto::EventType AggregatedFrameEvent::event_type(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.event_type)
  return static_cast< ::media::cast::proto::EventType >(event_type_.Get(index));
}
void AggregatedFrameEvent::set_event_type(int index, ::media::cast::proto::EventType value) {
  assert(::media::cast::proto::EventType_IsValid(value));
  event_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.event_type)
}
void AggregatedFrameEvent::add_event_type(::media::cast::proto::EventType value) {
  assert(::media::cast::proto::EventType_IsValid(value));
  event_type_.Add(value);
  // @@protoc_insertion_point(field_add:media.cast.proto.AggregatedFrameEvent.event_type)
}
const ::google::protobuf::RepeatedField<int>&
AggregatedFrameEvent::event_type() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.AggregatedFrameEvent.event_type)
  return event_type_;
}
::google::protobuf::RepeatedField<int>*
AggregatedFrameEvent::mutable_event_type() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.AggregatedFrameEvent.event_type)
  return &event_type_;
}

// repeated int64 event_timestamp_ms = 3 [packed = true];
int AggregatedFrameEvent::event_timestamp_ms_size() const {
  return event_timestamp_ms_.size();
}
void AggregatedFrameEvent::clear_event_timestamp_ms() {
  event_timestamp_ms_.Clear();
}
::google::protobuf::int64 AggregatedFrameEvent::event_timestamp_ms(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
  return event_timestamp_ms_.Get(index);
}
void AggregatedFrameEvent::set_event_timestamp_ms(int index, ::google::protobuf::int64 value) {
  event_timestamp_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
}
void AggregatedFrameEvent::add_event_timestamp_ms(::google::protobuf::int64 value) {
  event_timestamp_ms_.Add(value);
  // @@protoc_insertion_point(field_add:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AggregatedFrameEvent::event_timestamp_ms() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
  return event_timestamp_ms_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AggregatedFrameEvent::mutable_event_timestamp_ms() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
  return &event_timestamp_ms_;
}

// optional int32 encoded_frame_size = 4;
bool AggregatedFrameEvent::has_encoded_frame_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AggregatedFrameEvent::set_has_encoded_frame_size() {
  _has_bits_[0] |= 0x00000002u;
}
void AggregatedFrameEvent::clear_has_encoded_frame_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void AggregatedFrameEvent::clear_encoded_frame_size() {
  encoded_frame_size_ = 0;
  clear_has_encoded_frame_size();
}
::google::protobuf::int32 AggregatedFrameEvent::encoded_frame_size() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.encoded_frame_size)
  return encoded_frame_size_;
}
void AggregatedFrameEvent::set_encoded_frame_size(::google::protobuf::int32 value) {
  set_has_encoded_frame_size();
  encoded_frame_size_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.encoded_frame_size)
}

// optional int64 delay_millis = 5;
bool AggregatedFrameEvent::has_delay_millis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AggregatedFrameEvent::set_has_delay_millis() {
  _has_bits_[0] |= 0x00000004u;
}
void AggregatedFrameEvent::clear_has_delay_millis() {
  _has_bits_[0] &= ~0x00000004u;
}
void AggregatedFrameEvent::clear_delay_millis() {
  delay_millis_ = GOOGLE_LONGLONG(0);
  clear_has_delay_millis();
}
::google::protobuf::int64 AggregatedFrameEvent::delay_millis() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.delay_millis)
  return delay_millis_;
}
void AggregatedFrameEvent::set_delay_millis(::google::protobuf::int64 value) {
  set_has_delay_millis();
  delay_millis_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.delay_millis)
}

// optional bool key_frame = 6;
bool AggregatedFrameEvent::has_key_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AggregatedFrameEvent::set_has_key_frame() {
  _has_bits_[0] |= 0x00000008u;
}
void AggregatedFrameEvent::clear_has_key_frame() {
  _has_bits_[0] &= ~0x00000008u;
}
void AggregatedFrameEvent::clear_key_frame() {
  key_frame_ = false;
  clear_has_key_frame();
}
bool AggregatedFrameEvent::key_frame() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.key_frame)
  return key_frame_;
}
void AggregatedFrameEvent::set_key_frame(bool value) {
  set_has_key_frame();
  key_frame_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.key_frame)
}

// optional int32 target_bitrate = 7;
bool AggregatedFrameEvent::has_target_bitrate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AggregatedFrameEvent::set_has_target_bitrate() {
  _has_bits_[0] |= 0x00000010u;
}
void AggregatedFrameEvent::clear_has_target_bitrate() {
  _has_bits_[0] &= ~0x00000010u;
}
void AggregatedFrameEvent::clear_target_bitrate() {
  target_bitrate_ = 0;
  clear_has_target_bitrate();
}
::google::protobuf::int32 AggregatedFrameEvent::target_bitrate() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.target_bitrate)
  return target_bitrate_;
}
void AggregatedFrameEvent::set_target_bitrate(::google::protobuf::int32 value) {
  set_has_target_bitrate();
  target_bitrate_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.target_bitrate)
}

// optional int32 width = 8;
bool AggregatedFrameEvent::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AggregatedFrameEvent::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
void AggregatedFrameEvent::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void AggregatedFrameEvent::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 AggregatedFrameEvent::width() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.width)
  return width_;
}
void AggregatedFrameEvent::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.width)
}

// optional int32 height = 9;
bool AggregatedFrameEvent::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AggregatedFrameEvent::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
void AggregatedFrameEvent::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void AggregatedFrameEvent::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 AggregatedFrameEvent::height() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.height)
  return height_;
}
void AggregatedFrameEvent::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.height)
}

// optional int32 encoder_cpu_percent_utilized = 10;
bool AggregatedFrameEvent::has_encoder_cpu_percent_utilized() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AggregatedFrameEvent::set_has_encoder_cpu_percent_utilized() {
  _has_bits_[0] |= 0x00000080u;
}
void AggregatedFrameEvent::clear_has_encoder_cpu_percent_utilized() {
  _has_bits_[0] &= ~0x00000080u;
}
void AggregatedFrameEvent::clear_encoder_cpu_percent_utilized() {
  encoder_cpu_percent_utilized_ = 0;
  clear_has_encoder_cpu_percent_utilized();
}
::google::protobuf::int32 AggregatedFrameEvent::encoder_cpu_percent_utilized() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.encoder_cpu_percent_utilized)
  return encoder_cpu_percent_utilized_;
}
void AggregatedFrameEvent::set_encoder_cpu_percent_utilized(::google::protobuf::int32 value) {
  set_has_encoder_cpu_percent_utilized();
  encoder_cpu_percent_utilized_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.encoder_cpu_percent_utilized)
}

// optional int32 idealized_bitrate_percent_utilized = 11;
bool AggregatedFrameEvent::has_idealized_bitrate_percent_utilized() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AggregatedFrameEvent::set_has_idealized_bitrate_percent_utilized() {
  _has_bits_[0] |= 0x00000100u;
}
void AggregatedFrameEvent::clear_has_idealized_bitrate_percent_utilized() {
  _has_bits_[0] &= ~0x00000100u;
}
void AggregatedFrameEvent::clear_idealized_bitrate_percent_utilized() {
  idealized_bitrate_percent_utilized_ = 0;
  clear_has_idealized_bitrate_percent_utilized();
}
::google::protobuf::int32 AggregatedFrameEvent::idealized_bitrate_percent_utilized() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.idealized_bitrate_percent_utilized)
  return idealized_bitrate_percent_utilized_;
}
void AggregatedFrameEvent::set_idealized_bitrate_percent_utilized(::google::protobuf::int32 value) {
  set_has_idealized_bitrate_percent_utilized();
  idealized_bitrate_percent_utilized_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.idealized_bitrate_percent_utilized)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasePacketEvent::kPacketIdFieldNumber;
const int BasePacketEvent::kEventTypeFieldNumber;
const int BasePacketEvent::kEventTimestampMsFieldNumber;
const int BasePacketEvent::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasePacketEvent::BasePacketEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raw_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.BasePacketEvent)
}
BasePacketEvent::BasePacketEvent(const BasePacketEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      event_type_(from.event_type_),
      event_timestamp_ms_(from.event_timestamp_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packet_id_, &from.packet_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&packet_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.BasePacketEvent)
}

void BasePacketEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&packet_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&packet_id_)) + sizeof(size_));
}

BasePacketEvent::~BasePacketEvent() {
  // @@protoc_insertion_point(destructor:media.cast.proto.BasePacketEvent)
  SharedDtor();
}

void BasePacketEvent::SharedDtor() {
}

void BasePacketEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BasePacketEvent& BasePacketEvent::default_instance() {
  protobuf_raw_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

BasePacketEvent* BasePacketEvent::New(::google::protobuf::Arena* arena) const {
  BasePacketEvent* n = new BasePacketEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasePacketEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.BasePacketEvent)
  event_type_.Clear();
  event_timestamp_ms_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&packet_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&packet_id_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BasePacketEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.BasePacketEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_packet_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::media::cast::proto::EventType_IsValid(value)) {
              add_event_type(static_cast< ::media::cast::proto::EventType >(value));
            } else {
              unknown_fields_stream.WriteVarint32(tag);
              unknown_fields_stream.WriteVarint32(
                  static_cast< ::google::protobuf::uint32>(value));
            }
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::cast::proto::EventType_IsValid(value)) {
            add_event_type(static_cast< ::media::cast::proto::EventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_event_timestamp_ms())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_event_timestamp_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.BasePacketEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.BasePacketEvent)
  return false;
#undef DO_
}

void BasePacketEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.BasePacketEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packet_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  if (this->event_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_event_type_cached_byte_size_));
  }
  for (int i = 0, n = this->event_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->event_type(i), output);
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  if (this->event_timestamp_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _event_timestamp_ms_cached_byte_size_));
  }
  for (int i = 0, n = this->event_timestamp_ms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->event_timestamp_ms(i), output);
  }

  // optional int32 size = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.BasePacketEvent)
}

size_t BasePacketEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.BasePacketEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->event_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->event_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _event_type_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->event_timestamp_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _event_timestamp_ms_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 packet_id = 1;
    if (has_packet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasePacketEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BasePacketEvent*>(&from));
}

void BasePacketEvent::MergeFrom(const BasePacketEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.BasePacketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_type_.MergeFrom(from.event_type_);
  event_timestamp_ms_.MergeFrom(from.event_timestamp_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      packet_id_ = from.packet_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BasePacketEvent::CopyFrom(const BasePacketEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.BasePacketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePacketEvent::IsInitialized() const {
  return true;
}

void BasePacketEvent::Swap(BasePacketEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasePacketEvent::InternalSwap(BasePacketEvent* other) {
  event_type_.InternalSwap(&other->event_type_);
  event_timestamp_ms_.InternalSwap(&other->event_timestamp_ms_);
  std::swap(packet_id_, other->packet_id_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BasePacketEvent::GetTypeName() const {
  return "media.cast.proto.BasePacketEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasePacketEvent

// optional int32 packet_id = 1;
bool BasePacketEvent::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BasePacketEvent::set_has_packet_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BasePacketEvent::clear_has_packet_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BasePacketEvent::clear_packet_id() {
  packet_id_ = 0;
  clear_has_packet_id();
}
::google::protobuf::int32 BasePacketEvent::packet_id() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.BasePacketEvent.packet_id)
  return packet_id_;
}
void BasePacketEvent::set_packet_id(::google::protobuf::int32 value) {
  set_has_packet_id();
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.BasePacketEvent.packet_id)
}

// repeated .media.cast.proto.EventType event_type = 2 [packed = true];
int BasePacketEvent::event_type_size() const {
  return event_type_.size();
}
void BasePacketEvent::clear_event_type() {
  event_type_.Clear();
}
::media::cast::proto::EventType BasePacketEvent::event_type(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.BasePacketEvent.event_type)
  return static_cast< ::media::cast::proto::EventType >(event_type_.Get(index));
}
void BasePacketEvent::set_event_type(int index, ::media::cast::proto::EventType value) {
  assert(::media::cast::proto::EventType_IsValid(value));
  event_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:media.cast.proto.BasePacketEvent.event_type)
}
void BasePacketEvent::add_event_type(::media::cast::proto::EventType value) {
  assert(::media::cast::proto::EventType_IsValid(value));
  event_type_.Add(value);
  // @@protoc_insertion_point(field_add:media.cast.proto.BasePacketEvent.event_type)
}
const ::google::protobuf::RepeatedField<int>&
BasePacketEvent::event_type() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.BasePacketEvent.event_type)
  return event_type_;
}
::google::protobuf::RepeatedField<int>*
BasePacketEvent::mutable_event_type() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.BasePacketEvent.event_type)
  return &event_type_;
}

// repeated int64 event_timestamp_ms = 3 [packed = true];
int BasePacketEvent::event_timestamp_ms_size() const {
  return event_timestamp_ms_.size();
}
void BasePacketEvent::clear_event_timestamp_ms() {
  event_timestamp_ms_.Clear();
}
::google::protobuf::int64 BasePacketEvent::event_timestamp_ms(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.BasePacketEvent.event_timestamp_ms)
  return event_timestamp_ms_.Get(index);
}
void BasePacketEvent::set_event_timestamp_ms(int index, ::google::protobuf::int64 value) {
  event_timestamp_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:media.cast.proto.BasePacketEvent.event_timestamp_ms)
}
void BasePacketEvent::add_event_timestamp_ms(::google::protobuf::int64 value) {
  event_timestamp_ms_.Add(value);
  // @@protoc_insertion_point(field_add:media.cast.proto.BasePacketEvent.event_timestamp_ms)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BasePacketEvent::event_timestamp_ms() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.BasePacketEvent.event_timestamp_ms)
  return event_timestamp_ms_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BasePacketEvent::mutable_event_timestamp_ms() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.BasePacketEvent.event_timestamp_ms)
  return &event_timestamp_ms_;
}

// optional int32 size = 4;
bool BasePacketEvent::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BasePacketEvent::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void BasePacketEvent::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void BasePacketEvent::clear_size() {
  size_ = 0;
  clear_has_size();
}
::google::protobuf::int32 BasePacketEvent::size() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.BasePacketEvent.size)
  return size_;
}
void BasePacketEvent::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.BasePacketEvent.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AggregatedPacketEvent::kRelativeRtpTimestampFieldNumber;
const int AggregatedPacketEvent::kBasePacketEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AggregatedPacketEvent::AggregatedPacketEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raw_5fevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.AggregatedPacketEvent)
}
AggregatedPacketEvent::AggregatedPacketEvent(const AggregatedPacketEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      base_packet_event_(from.base_packet_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relative_rtp_timestamp_ = from.relative_rtp_timestamp_;
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.AggregatedPacketEvent)
}

void AggregatedPacketEvent::SharedCtor() {
  _cached_size_ = 0;
  relative_rtp_timestamp_ = 0u;
}

AggregatedPacketEvent::~AggregatedPacketEvent() {
  // @@protoc_insertion_point(destructor:media.cast.proto.AggregatedPacketEvent)
  SharedDtor();
}

void AggregatedPacketEvent::SharedDtor() {
}

void AggregatedPacketEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AggregatedPacketEvent& AggregatedPacketEvent::default_instance() {
  protobuf_raw_5fevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

AggregatedPacketEvent* AggregatedPacketEvent::New(::google::protobuf::Arena* arena) const {
  AggregatedPacketEvent* n = new AggregatedPacketEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AggregatedPacketEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.AggregatedPacketEvent)
  base_packet_event_.Clear();
  relative_rtp_timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AggregatedPacketEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.AggregatedPacketEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_relative_rtp_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relative_rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_packet_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.AggregatedPacketEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.AggregatedPacketEvent)
  return false;
#undef DO_
}

void AggregatedPacketEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.AggregatedPacketEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 relative_rtp_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->relative_rtp_timestamp(), output);
  }

  // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->base_packet_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->base_packet_event(static_cast<int>(i)), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.AggregatedPacketEvent)
}

size_t AggregatedPacketEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.AggregatedPacketEvent)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->base_packet_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_packet_event(static_cast<int>(i)));
    }
  }

  // optional uint32 relative_rtp_timestamp = 1;
  if (has_relative_rtp_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->relative_rtp_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggregatedPacketEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AggregatedPacketEvent*>(&from));
}

void AggregatedPacketEvent::MergeFrom(const AggregatedPacketEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.AggregatedPacketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_packet_event_.MergeFrom(from.base_packet_event_);
  if (from.has_relative_rtp_timestamp()) {
    set_relative_rtp_timestamp(from.relative_rtp_timestamp());
  }
}

void AggregatedPacketEvent::CopyFrom(const AggregatedPacketEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.AggregatedPacketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedPacketEvent::IsInitialized() const {
  return true;
}

void AggregatedPacketEvent::Swap(AggregatedPacketEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AggregatedPacketEvent::InternalSwap(AggregatedPacketEvent* other) {
  base_packet_event_.InternalSwap(&other->base_packet_event_);
  std::swap(relative_rtp_timestamp_, other->relative_rtp_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AggregatedPacketEvent::GetTypeName() const {
  return "media.cast.proto.AggregatedPacketEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AggregatedPacketEvent

// optional uint32 relative_rtp_timestamp = 1;
bool AggregatedPacketEvent::has_relative_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AggregatedPacketEvent::set_has_relative_rtp_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void AggregatedPacketEvent::clear_has_relative_rtp_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void AggregatedPacketEvent::clear_relative_rtp_timestamp() {
  relative_rtp_timestamp_ = 0u;
  clear_has_relative_rtp_timestamp();
}
::google::protobuf::uint32 AggregatedPacketEvent::relative_rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedPacketEvent.relative_rtp_timestamp)
  return relative_rtp_timestamp_;
}
void AggregatedPacketEvent::set_relative_rtp_timestamp(::google::protobuf::uint32 value) {
  set_has_relative_rtp_timestamp();
  relative_rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedPacketEvent.relative_rtp_timestamp)
}

// repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
int AggregatedPacketEvent::base_packet_event_size() const {
  return base_packet_event_.size();
}
void AggregatedPacketEvent::clear_base_packet_event() {
  base_packet_event_.Clear();
}
const ::media::cast::proto::BasePacketEvent& AggregatedPacketEvent::base_packet_event(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return base_packet_event_.Get(index);
}
::media::cast::proto::BasePacketEvent* AggregatedPacketEvent::mutable_base_packet_event(int index) {
  // @@protoc_insertion_point(field_mutable:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return base_packet_event_.Mutable(index);
}
::media::cast::proto::BasePacketEvent* AggregatedPacketEvent::add_base_packet_event() {
  // @@protoc_insertion_point(field_add:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return base_packet_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::media::cast::proto::BasePacketEvent >*
AggregatedPacketEvent::mutable_base_packet_event() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return &base_packet_event_;
}
const ::google::protobuf::RepeatedPtrField< ::media::cast::proto::BasePacketEvent >&
AggregatedPacketEvent::base_packet_event() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return base_packet_event_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cast
}  // namespace media

// @@protoc_insertion_point(global_scope)
