// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace ipc {
namespace invalidation {
class ClientTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientType> {
} _ClientType_default_instance_;
class ObjectSourceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjectSource> {
} _ObjectSource_default_instance_;
class ConstantsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Constants> {
} _Constants_default_instance_;

namespace protobuf_types_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ClientType_default_instance_.Shutdown();
  _ObjectSource_default_instance_.Shutdown();
  _Constants_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ClientType_default_instance_.DefaultConstruct();
  _ObjectSource_default_instance_.DefaultConstruct();
  _Constants_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_types_2eproto

bool ClientType_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 1004:
    case 1018:
    case 1038:
    case 1055:
    case 1056:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ClientType_Type ClientType::INTERNAL;
const ClientType_Type ClientType::TEST;
const ClientType_Type ClientType::DEMO;
const ClientType_Type ClientType::CHROME_SYNC;
const ClientType_Type ClientType::CHROME_SYNC_ANDROID;
const ClientType_Type ClientType::CHROME_SYNC_IOS;
const ClientType_Type ClientType::CHROME_SYNC_GCM_DESKTOP;
const ClientType_Type ClientType::CHROME_SYNC_GCM_IOS;
const ClientType_Type ClientType::Type_MIN;
const ClientType_Type ClientType::Type_MAX;
const int ClientType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ObjectSource_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 1004:
    case 1014:
    case 1025:
    case 1030:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectSource_Type ObjectSource::INTERNAL;
const ObjectSource_Type ObjectSource::TEST;
const ObjectSource_Type ObjectSource::DEMO;
const ObjectSource_Type ObjectSource::CHROME_SYNC;
const ObjectSource_Type ObjectSource::COSMO_CHANGELOG;
const ObjectSource_Type ObjectSource::CHROME_COMPONENTS;
const ObjectSource_Type ObjectSource::CHROME_PUSH_MESSAGING;
const ObjectSource_Type ObjectSource::Type_MIN;
const ObjectSource_Type ObjectSource::Type_MAX;
const int ObjectSource::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Constants_ObjectVersion_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Constants_ObjectVersion Constants::UNKNOWN;
const Constants_ObjectVersion Constants::ObjectVersion_MIN;
const Constants_ObjectVersion Constants::ObjectVersion_MAX;
const int Constants::ObjectVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientType::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientType::ClientType()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.ClientType)
}
ClientType::ClientType(const ClientType& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.ClientType)
}

void ClientType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
}

ClientType::~ClientType() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.ClientType)
  SharedDtor();
}

void ClientType::SharedDtor() {
}

void ClientType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientType& ClientType::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientType* ClientType::New(::google::protobuf::Arena* arena) const {
  ClientType* n = new ClientType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientType::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.ClientType)
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.ClientType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.ClientType.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ipc::invalidation::ClientType_Type_IsValid(value)) {
            set_type(static_cast< ::ipc::invalidation::ClientType_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.ClientType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.ClientType)
  return false;
#undef DO_
}

void ClientType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.ClientType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.ClientType.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.ClientType)
}

size_t ClientType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.ClientType)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .ipc.invalidation.ClientType.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientType*>(&from));
}

void ClientType::MergeFrom(const ClientType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.ClientType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void ClientType::CopyFrom(const ClientType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.ClientType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientType::IsInitialized() const {
  return true;
}

void ClientType::Swap(ClientType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientType::InternalSwap(ClientType* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientType::GetTypeName() const {
  return "ipc.invalidation.ClientType";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientType

// optional .ipc.invalidation.ClientType.Type type = 1;
bool ClientType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientType::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientType::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientType::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ipc::invalidation::ClientType_Type ClientType::type() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.ClientType.type)
  return static_cast< ::ipc::invalidation::ClientType_Type >(type_);
}
void ClientType::set_type(::ipc::invalidation::ClientType_Type value) {
  assert(::ipc::invalidation::ClientType_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.ClientType.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectSource::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectSource::ObjectSource()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.ObjectSource)
}
ObjectSource::ObjectSource(const ObjectSource& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.ObjectSource)
}

void ObjectSource::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
}

ObjectSource::~ObjectSource() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.ObjectSource)
  SharedDtor();
}

void ObjectSource::SharedDtor() {
}

void ObjectSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ObjectSource& ObjectSource::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectSource* ObjectSource::New(::google::protobuf::Arena* arena) const {
  ObjectSource* n = new ObjectSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectSource::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.ObjectSource)
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.ObjectSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.ObjectSource.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ipc::invalidation::ObjectSource_Type_IsValid(value)) {
            set_type(static_cast< ::ipc::invalidation::ObjectSource_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.ObjectSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.ObjectSource)
  return false;
#undef DO_
}

void ObjectSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.ObjectSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.ObjectSource.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.ObjectSource)
}

size_t ObjectSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.ObjectSource)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // optional .ipc.invalidation.ObjectSource.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectSource::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ObjectSource*>(&from));
}

void ObjectSource::MergeFrom(const ObjectSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.ObjectSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void ObjectSource::CopyFrom(const ObjectSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.ObjectSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSource::IsInitialized() const {
  return true;
}

void ObjectSource::Swap(ObjectSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectSource::InternalSwap(ObjectSource* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ObjectSource::GetTypeName() const {
  return "ipc.invalidation.ObjectSource";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectSource

// optional .ipc.invalidation.ObjectSource.Type type = 1;
bool ObjectSource::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectSource::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectSource::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectSource::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ipc::invalidation::ObjectSource_Type ObjectSource::type() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.ObjectSource.type)
  return static_cast< ::ipc::invalidation::ObjectSource_Type >(type_);
}
void ObjectSource::set_type(::ipc::invalidation::ObjectSource_Type value) {
  assert(::ipc::invalidation::ObjectSource_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.ObjectSource.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Constants::Constants()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_types_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.Constants)
}
Constants::Constants(const Constants& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.Constants)
}

void Constants::SharedCtor() {
  _cached_size_ = 0;
}

Constants::~Constants() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.Constants)
  SharedDtor();
}

void Constants::SharedDtor() {
}

void Constants::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Constants& Constants::default_instance() {
  protobuf_types_2eproto::InitDefaults();
  return *internal_default_instance();
}

Constants* Constants::New(::google::protobuf::Arena* arena) const {
  Constants* n = new Constants;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Constants::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.Constants)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Constants::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.Constants)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.Constants)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.Constants)
  return false;
#undef DO_
}

void Constants::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.Constants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.Constants)
}

size_t Constants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.Constants)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Constants::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Constants*>(&from));
}

void Constants::MergeFrom(const Constants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.Constants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Constants::CopyFrom(const Constants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.Constants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constants::IsInitialized() const {
  return true;
}

void Constants::Swap(Constants* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Constants::InternalSwap(Constants* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Constants::GetTypeName() const {
  return "ipc.invalidation.Constants";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Constants

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace invalidation
}  // namespace ipc

// @@protoc_insertion_point(global_scope)
