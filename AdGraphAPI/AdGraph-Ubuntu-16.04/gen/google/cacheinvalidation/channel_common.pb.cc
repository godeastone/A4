// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channel_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace ipc {
namespace invalidation {
class ChannelMessageEncodingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelMessageEncoding> {
} _ChannelMessageEncoding_default_instance_;
class NetworkEndpointIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkEndpointId> {
} _NetworkEndpointId_default_instance_;

namespace protobuf_channel_5fcommon_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ChannelMessageEncoding_default_instance_.Shutdown();
  _NetworkEndpointId_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChannelMessageEncoding_default_instance_.DefaultConstruct();
  _NetworkEndpointId_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_channel_5fcommon_2eproto

bool ChannelMessageEncoding_MessageEncoding_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding::PROTOBUF_BINARY_FORMAT;
const ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding::PROTOBUF_JSON_FORMAT;
const ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding::MessageEncoding_MIN;
const ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding::MessageEncoding_MAX;
const int ChannelMessageEncoding::MessageEncoding_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool NetworkEndpointId_NetworkAddress_IsValid(int value) {
  switch (value) {
    case 1:
    case 113:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NetworkEndpointId_NetworkAddress NetworkEndpointId::TEST;
const NetworkEndpointId_NetworkAddress NetworkEndpointId::ANDROID;
const NetworkEndpointId_NetworkAddress NetworkEndpointId::NetworkAddress_MIN;
const NetworkEndpointId_NetworkAddress NetworkEndpointId::NetworkAddress_MAX;
const int NetworkEndpointId::NetworkAddress_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMessageEncoding::ChannelMessageEncoding()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_channel_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.ChannelMessageEncoding)
}
ChannelMessageEncoding::ChannelMessageEncoding(const ChannelMessageEncoding& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.ChannelMessageEncoding)
}

void ChannelMessageEncoding::SharedCtor() {
  _cached_size_ = 0;
}

ChannelMessageEncoding::~ChannelMessageEncoding() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.ChannelMessageEncoding)
  SharedDtor();
}

void ChannelMessageEncoding::SharedDtor() {
}

void ChannelMessageEncoding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChannelMessageEncoding& ChannelMessageEncoding::default_instance() {
  protobuf_channel_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelMessageEncoding* ChannelMessageEncoding::New(::google::protobuf::Arena* arena) const {
  ChannelMessageEncoding* n = new ChannelMessageEncoding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMessageEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.ChannelMessageEncoding)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelMessageEncoding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.ChannelMessageEncoding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.ChannelMessageEncoding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.ChannelMessageEncoding)
  return false;
#undef DO_
}

void ChannelMessageEncoding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.ChannelMessageEncoding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.ChannelMessageEncoding)
}

size_t ChannelMessageEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.ChannelMessageEncoding)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMessageEncoding::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChannelMessageEncoding*>(&from));
}

void ChannelMessageEncoding::MergeFrom(const ChannelMessageEncoding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.ChannelMessageEncoding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChannelMessageEncoding::CopyFrom(const ChannelMessageEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.ChannelMessageEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessageEncoding::IsInitialized() const {
  return true;
}

void ChannelMessageEncoding::Swap(ChannelMessageEncoding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMessageEncoding::InternalSwap(ChannelMessageEncoding* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChannelMessageEncoding::GetTypeName() const {
  return "ipc.invalidation.ChannelMessageEncoding";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelMessageEncoding

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkEndpointId::kNetworkAddressFieldNumber;
const int NetworkEndpointId::kClientAddressFieldNumber;
const int NetworkEndpointId::kIsOfflineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkEndpointId::NetworkEndpointId()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_channel_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.NetworkEndpointId)
}
NetworkEndpointId::NetworkEndpointId(const NetworkEndpointId& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_address()) {
    client_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_address_);
  }
  ::memcpy(&is_offline_, &from.is_offline_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_address_) -
    reinterpret_cast<char*>(&is_offline_)) + sizeof(network_address_));
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.NetworkEndpointId)
}

void NetworkEndpointId::SharedCtor() {
  _cached_size_ = 0;
  client_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_offline_ = false;
  network_address_ = 1;
}

NetworkEndpointId::~NetworkEndpointId() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.NetworkEndpointId)
  SharedDtor();
}

void NetworkEndpointId::SharedDtor() {
  client_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkEndpointId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkEndpointId& NetworkEndpointId::default_instance() {
  protobuf_channel_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkEndpointId* NetworkEndpointId::New(::google::protobuf::Arena* arena) const {
  NetworkEndpointId* n = new NetworkEndpointId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkEndpointId::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.NetworkEndpointId)
  if (has_client_address()) {
    GOOGLE_DCHECK(!client_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*client_address_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    is_offline_ = false;
    network_address_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkEndpointId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.NetworkEndpointId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ipc::invalidation::NetworkEndpointId_NetworkAddress_IsValid(value)) {
            set_network_address(static_cast< ::ipc::invalidation::NetworkEndpointId_NetworkAddress >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes client_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_offline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_offline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_offline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.NetworkEndpointId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.NetworkEndpointId)
  return false;
#undef DO_
}

void NetworkEndpointId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.NetworkEndpointId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->network_address(), output);
  }

  // optional bytes client_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->client_address(), output);
  }

  // optional bool is_offline = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_offline(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.NetworkEndpointId)
}

size_t NetworkEndpointId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.NetworkEndpointId)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes client_address = 2;
    if (has_client_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_address());
    }

    // optional bool is_offline = 3;
    if (has_is_offline()) {
      total_size += 1 + 1;
    }

    // optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
    if (has_network_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_address());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkEndpointId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkEndpointId*>(&from));
}

void NetworkEndpointId::MergeFrom(const NetworkEndpointId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.NetworkEndpointId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_client_address();
      client_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_offline_ = from.is_offline_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_address_ = from.network_address_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkEndpointId::CopyFrom(const NetworkEndpointId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.NetworkEndpointId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkEndpointId::IsInitialized() const {
  return true;
}

void NetworkEndpointId::Swap(NetworkEndpointId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkEndpointId::InternalSwap(NetworkEndpointId* other) {
  client_address_.Swap(&other->client_address_);
  std::swap(is_offline_, other->is_offline_);
  std::swap(network_address_, other->network_address_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkEndpointId::GetTypeName() const {
  return "ipc.invalidation.NetworkEndpointId";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkEndpointId

// optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
bool NetworkEndpointId::has_network_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkEndpointId::set_has_network_address() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkEndpointId::clear_has_network_address() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkEndpointId::clear_network_address() {
  network_address_ = 1;
  clear_has_network_address();
}
::ipc::invalidation::NetworkEndpointId_NetworkAddress NetworkEndpointId::network_address() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.NetworkEndpointId.network_address)
  return static_cast< ::ipc::invalidation::NetworkEndpointId_NetworkAddress >(network_address_);
}
void NetworkEndpointId::set_network_address(::ipc::invalidation::NetworkEndpointId_NetworkAddress value) {
  assert(::ipc::invalidation::NetworkEndpointId_NetworkAddress_IsValid(value));
  set_has_network_address();
  network_address_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.NetworkEndpointId.network_address)
}

// optional bytes client_address = 2;
bool NetworkEndpointId::has_client_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkEndpointId::set_has_client_address() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkEndpointId::clear_has_client_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkEndpointId::clear_client_address() {
  client_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_address();
}
const ::std::string& NetworkEndpointId::client_address() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.NetworkEndpointId.client_address)
  return client_address_.GetNoArena();
}
void NetworkEndpointId::set_client_address(const ::std::string& value) {
  set_has_client_address();
  client_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.NetworkEndpointId.client_address)
}
#if LANG_CXX11
void NetworkEndpointId::set_client_address(::std::string&& value) {
  set_has_client_address();
  client_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.NetworkEndpointId.client_address)
}
#endif
void NetworkEndpointId::set_client_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_address();
  client_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.NetworkEndpointId.client_address)
}
void NetworkEndpointId::set_client_address(const void* value, size_t size) {
  set_has_client_address();
  client_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.NetworkEndpointId.client_address)
}
::std::string* NetworkEndpointId::mutable_client_address() {
  set_has_client_address();
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.NetworkEndpointId.client_address)
  return client_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkEndpointId::release_client_address() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.NetworkEndpointId.client_address)
  clear_has_client_address();
  return client_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkEndpointId::set_allocated_client_address(::std::string* client_address) {
  if (client_address != NULL) {
    set_has_client_address();
  } else {
    clear_has_client_address();
  }
  client_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_address);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.NetworkEndpointId.client_address)
}

// optional bool is_offline = 3;
bool NetworkEndpointId::has_is_offline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkEndpointId::set_has_is_offline() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkEndpointId::clear_has_is_offline() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkEndpointId::clear_is_offline() {
  is_offline_ = false;
  clear_has_is_offline();
}
bool NetworkEndpointId::is_offline() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.NetworkEndpointId.is_offline)
  return is_offline_;
}
void NetworkEndpointId::set_is_offline(bool value) {
  set_has_is_offline();
  is_offline_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.NetworkEndpointId.is_offline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace invalidation
}  // namespace ipc

// @@protoc_insertion_point(global_scope)
